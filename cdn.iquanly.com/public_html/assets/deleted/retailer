/* Minification failed. Returning unminified contents.
(29990,17-18): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: k
(29890,19-23): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: code
(29891,22-26): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: code
 */
'use strict'
/**********************************************
 * Set of controllers for Retailer Admin page 
 * can be broken down into sub-module if the file get too long
 **********************************************/

var kvApp = angular.module('kv.retailer.ctrl', ['kv.session', 'kv.services', 'kv.utils', 'kv.dataservices', 'kv.filters', 'kv.directives', 'kv.common', 'autocomplete', 'ngSanitize']);
//hoanhd: declare kvApp to split controller to multi files
kvApp.controller('OrderCtrl', ['kvSession', '$scope', '$rootScope', 'orderStatus', 'orderStatusMap', 'kendofilter', '$filter', '$routeParams', 'logger', 'kvExportToExcel', 'OrderResource', 'kvPrinter', 'BranchResource', 'paymentMethods', 'paymentStatus', 'SurchargeResource', 'PartnerDeliveryResource', 'settings','kvLabel',
    function (_session, $scope, $rootScope, _orderStatus, _orderMap, _filter, $filter, $routeParams, _logger, _export, _ordersvc, _print, _branches, _paymentMethod, _paymentStatus, _surcharge, _delivery, _setting, _l) {
        $scope.settings = _setting;
        $scope.pageSizes = pager.pageSizes;
        $scope.typeList = viewUrl.orderList;
        $scope.typeEmail = viewUrl.orderEmail;
        $scope.searchLable = $scope._l.order_SearchHolder;
        $scope.lblOtherTimeFilter = null;
        $scope.order_SearchCustomerLbl = $scope._l.order_SearchCustomerLbl;
        $scope.rights = { canAdd: ($scope._p.has('Order_Create')) };
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };
        $scope.deliveryIds = [];

        $scope.grdColumns = [{ "field": "Code", "title": _l.orderCode, headerAttributes: { "class": "tdCode16" }, attributes: { "class": "tdCode16" } },
                 { "field": "PurchaseDate", "title": _l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true },
                 { "field": "ModifiedDate", "title": _l.modifiedDate, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true, hidden: true },
                 { "field": "Customer.Name", "title": _l.order_Customer, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                 { "field": "Customer.ContactNumber", "title": _l.print_Phone, headerAttributes: { "class": "tdPhone" }, attributes: { "class": "tdPhone" }, hidden: true },
                 { "field": "Customer.Address", "title": _l.address, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                 { "field": "Branch.Name", "title": _l.branch, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                 { "field": "Seller.GivenName", "title": _l.employeeSale, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                 { "field": "ShortDescription", "title": _l.note, hidden: true, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                 { "field": "SubTotal", "title": _l.subTotal, format: "{0:n0}", headerAttributes: { "class": "tdSLC txtR" }, attributes: { "class": "tdSLC txtR" }, isNumber: true, sortable: false, hidden: true },
                 { "field": "Discount", "title": _l.discount, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" }, isNumber: true, hidden: true },
                 { "field": "TotalAfterDiscount", "title": _l.subTotalAfterDiscount, hidden: true, format: "{0:n0}", headerAttributes: { "class": "tdTotalPro txtR" }, attributes: { "class": "tdTotalPro txtR" }, isNumber: true, sortable: false },
                 { "field": "Surcharge", "title": _l.surcharge, hidden: true, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" }, isNumber: true },
                 { "field": "Total", "title": _l.paidCustomer, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" }, isNumber: true },
                 { "field": "TotalPayment", "title": _l.paidAmount, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" }, isNumber: true },
                 { "field": "Status", "title": _l.status, headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" } }
        ];

        if (!$scope.settings.UseSurcharge) {
            $scope.grdColumns = $scope.grdColumns.filter(function (c) {
                return (c.field !== "Surcharge" && c.field !== "TotalAfterDiscount");
            });
        }

        //$scope.selectedInvoice = {Code: 'adfsdf'};
        // Init Data     
        if ($("#rowTemplate").html()) {
            $scope.template = $("#rowTemplate").html();
            $scope.pageSize = pager.defaultEmail;
            // $scope.viewtype = $scope.typeEmail;
        } else {
            $scope.pageSize = pager.defaultList;
            //  $scope.viewtype = $scope.typeList;
        }
        // For Detail View
        if ($("#templDetail").length > 0) {
            $scope.detailTemplate = kendo.template($("#templDetail").html());
        }
        // $scope.Invoicedata = {Code:"ABC"};
        $scope.statusMap = _orderMap;

        $scope.invoiceDetail = function (data) {
            //$scope.$broadcast('showInvoiceDetail', id);

            $scope.invoicePopup.showInvoice(data.id, function () {
                //on save callback
                $scope.invoicedb.read();
            });
        };
        $scope.returnDetail = function (id) {
            //$scope.$broadcast('showReturnDetail', id);
            $scope.returnPopup.showReturn(id, function () {
                //on save success
                $scope.refundDb.read();
            });
        };
        $scope.paymentDetail = function (code, callback) {
            //$scope.$broadcast('showPaymentDetail', code);
            $scope.paymentPopup.showPayment(code, callback);
        };

        var r2 = _surcharge.get({
            Permission: 'Surcharge_Read',
            ForManage: true
        });
        r2.$promise.then(function (dp) {
            $scope.surcharges = dp.Data;
            refresh($scope);
        });

        $scope.export = function () {
            var filter = $scope.orders.reader.kvFilter;
            
            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            var columns = [];
            var obj = $("#grdOrders").data("kendoGrid").options.columns;
            try {
                if (localStorage.getItem("grdOrders")) {
                    obj = JSON.parse(localStorage.getItem("grdOrders"));
                }
            } catch (ex) { }

            if (obj) {
                for (var i = 0; i < obj.length; i++) {
                    var col = obj[i];

                    if (col.field == "ShortDescription")
                        col.field = "Description";

                    if (!col.hidden) {
                        columns.push({ "Title": col.title, "Field": col.field, "IsNumber": col.isNumber, "IsDate": col.isDate });
                    }
                }
            }

            var type = "Order";
            var fileName = "DanhSachDatHang";
            
            var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
            _export.toExcel(type, fileName, data);
        };
        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;

            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });
            //Order Detail


            //End Order Detail
            var hideTab = function (index) {
                var tabStripObj = tabship.data("kendoTabStrip");
                var selectedIndex = tabStripObj.select().index();
                if (selectedIndex == index) {
                    tabStripObj.select(0);
                }
                $(tabStripObj.items()[index]).attr("style", "display:none");
            };

            var loadTabInvoice = true, loadTabPayment = true, loadTabRefund = true;
            if (e.data.StatusValue == $scope.statusMap.Pending || e.data.StatusValue == $scope.statusMap.Draft) {
                //if (e.data.StatusValue == $scope.statusMap.Pending || e.data.StatusValue == $scope.statusMap.Draft) {
                loadTabInvoice = false;
                hideTab(1);

            }
            if (e.data.StatusValue == $scope.statusMap.Pending) {
                hideTab(2);
                loadTabPayment = false;
            }
            if (e.data.StatusValue == $scope.statusMap.Pending || e.data.StatusValue == $scope.statusMap.Draft) {

                hideTab(3);
                loadTabRefund = false;

            }
            if (loadTabInvoice) {
                $scope.invoicedb = new kendo.data.DataSource({
                    type: "odata",
                    autoSync: true,
                    transport: {
                        read: {
                            url: "/api/invoices/?OrderId=" + e.data.Id + "&format=json&Includes=SoldBy&Include=TotalQuantity&Includes=PaymentCode&Includes=PaymentId&Includes=StatusValue",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    change: function () {
                        if (this._total == 0) {
                            hideTab(1);
                        }
                    },
                    serverPaging: false,
                    serverFiltering: false,
                    serverSorting: true,
                    schema: {
                        data: "Data",
                        total: "Total",
                        parse: function (response) {
                            if (response && response.Data) {
                                for (var j = 0; j < response.Data.length; j++) {
                                    var t = response.Data[j];
                                    t.PaymentCode = t.PaymentCode ? t.PaymentCode : "";
                                    t.PurchaseDate = $filter('parseDate')(t.PurchaseDate);
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                PurchaseDate: { type: "date" }
                            }
                        }
                    }
                });

                detailRow.find("#tblinvoice").kendoGrid({
                    dataSource: $scope.invoicedb,
                    pageable: false,
                    dataBinding: $scope.emptyGridFix,
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.invoiceItem").click(function () {
                            var data = $(this).data();
                            scope.invoiceDetail(data);
                        });
                        this.wrapper.find("a[name=paymentItem]").click(function () {
                            var code = $(this).data().code;
                            scope.paymentDetail(code, function () {
                                scope.orders.read();
                            }
                            );
                        });
                    },
                    columns: [
                        //{ field: "Code", title: $scope._l.invoiceCode, template: '<a href="\\#/' + viewUrl.invoiceList + '?Code=#=Code#" name="invoiceItem" target="_blank">#=Code#</a>', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                        { field: "Code", title: $scope._l.invoiceCode, template: '<a href="javascript:void(0)" class="invoiceItem" data-id="#=Id#">#=Code#</a>', headerAttributes: { "class": "tdCode16" }, attributes: { "class": "tdCode16" } },
                        { field: "PurchaseDate", title: $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { field: "SoldBy.GivenName", title: $scope._l.createdBy },
                        { field: "Total", title: $scope._l.invoiceValues, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
                        { field: "StatusValue", title: $scope._l.status, headerAttributes: { "class": "tdSSL" }, attributes: { "class": "tdSSL" } }
                        //{ field: "PaymentCode", template: '<a href="javascript:void(0)" name="paymentItem" data-code="#=PaymentCode#">#=PaymentCode#</a>', title: $scope._l.order_RefPayment, headerAttributes: { "class": "tdCode18 txtC" }, attributes: { "class": "tdCode18 txtC" } }
                    ]
                });
            }

            if (loadTabPayment) {
                $scope.paymentDb = new kendo.data.DataSource({
                    type: "odata",
                    autoSync: true,
                    transport: {
                        read: {
                            url: "/api/payments/?OrderId=" + e.data.Id + "&format=json&Includes=User&Includes=CustomerName&Includes=Order&GroupCode=true",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    change: function () {
                        if (this._total == 0) {
                            hideTab(2);
                        }
                    },
                    serverPaging: false,
                    serverFiltering: false,
                    serverSorting: true,
                    schema: {
                        data: "Data",
                        total: "Total",
                        parse: function (response) {
                            if (response && response.Data) {
                                for (var j = 0; j < response.Data.length; j++) {
                                    var t = response.Data[j];
                                    //t.Method
                                    // var payment = _paymentMethod.filter(function (elem) {
                                    //   return elem.Id == t.Method;
                                    //});
                                    t.Method = _paymentMethod[t.Method];
                                    t.Status = _paymentStatus[t.Status];
                                    t.User = t.User ? t.User.GivenName : t.UserName;
                                    t.PurchaseDate = $filter('parseDate')(t.PurchaseDate);
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                CreatedDate: { type: "date" },
                                TransDate: { type: "date" }
                            }
                        }
                    }
                });

                detailRow.find("#tblpayment").kendoGrid({
                    dataSource: $scope.paymentDb,
                    pageable: false,
                    dataBinding: $scope.emptyGridFix,
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a[name=paymentItem]").click(function () {
                            var code = $(this).attr("data");
                            scope.paymentDetail(code, function () {
                                scope.orders.read();
                            });
                        });
                    },
                    columns: [
                        { "field": "Code", template: '<a href="javascript:void(0)" name="paymentItem" data="#=Code#">#=Code#</a>', "title": $scope._l.order_PaymentCode, headerAttributes: { "class": "tdCode18" }, attributes: { "class": "tdCode18" } },
                        { "field": "TransDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { "field": "User", "title": $scope._l.order_InvoiceCreatedBy, format: "{0:n0}", sortable: false, headerAttributes: { "class": "" }, attributes: { "class": "" } },
                        { "field": "Method", "title": $scope._l.order_InvoiceMethod, headerAttributes: { "class": "tdCodeTT" }, attributes: { "class": "tdCodeTT" } },
                        { "field": "Status", "title": $scope._l.status, headerAttributes: { "class": "tdCodeTT" }, attributes: { "class": "tdCodeTT" } },
                        { "field": "Amount", "title": $scope._l.order_InvoicePay, format: "{0:n0}", headerAttributes: { "class": "txtR tdPrice" }, attributes: { "class": "txtR tdPrice" } }

                    ]
                });
            }
        };

        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }

        $scope.orderStatus = kvDropbox.orderStatus;
        if (!$scope.orderStatus) {
            $scope.orderStatus = [];
            for (var i in _orderStatus) {
                $scope.orderStatus.push({ key: i, value: _orderStatus[i] });
            }
        }
        $scope.currentBranchId = _session.branch.Id;
        $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;
        //$scope.branchs = _branches.get({ Permission: 'Order_Read' });//_session.branchs;
        $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];
        $scope.branches = _branches.get({ Permission: 'Order_Read' }, function () {
            $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
        });

        $scope.bindedGrid;  
        $scope.grvdataBinding = function (arg) {
           
            //if (!$scope._setting.SellAllowDeposit) {
            //    arg.sender.hideColumn("Status");
            //}

            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };

        $scope.dateFilter.TimeRange = (kvDropbox.dateFilter) ? kvDropbox.dateFilter : 'alltime';
        var now = new Date();
        now = now.setHours(0, 0, 0, 0);
        var fromDate = new Date(now);
        var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);
        $scope.dateFilter.StartDate = kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart);
        $scope.dateFilter.EndDate = kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now));

        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            //remove any other filter 
            $scope.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
        }

        var r = _delivery.get({ Permission: 'PartnerDelivery_Read' });
        r.$promise.then(function (dp) {
            $scope.deliveries = dp.Data;
            refresh($scope);
        });

        $scope.deliveryFilterUpdated = function () {
            $scope.refresh();
        }

        function filterbyExtention() {
            var para = {};
            var d = [];

            para.ProductKey = $scope.filterProduct;
            para.CustomerKey = $scope.filterCustomer;
            // Add filter by User
            para.UserNameKey = $scope.filterUserName;

            angular.forEach($scope.deliveryIds, function (value) {
                d.push(value.Id);
            });
            if (d.length > 0)
                para.DeliveryIds = JSON.stringify(d);

            return para;
        }
        // Bind data for Main Gridview
        $scope.orders = new kendo.data.DataSource({
            type: "odata",
            autoSync: false,
            transport: {
                read: {
                    url: "/api/Orders?format=json&Includes=Branch&Includes=Customer&Includes=Payments&Includes=Seller&Includes=InvoiceOrderSurcharges&ForSummaryRow=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: filterbyExtention
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    if (response) {
                        //this.totalValue = "<span>" + kendo.toString(response.Total2Value, "n0") + "</span><span class='dpib' style='width:98px'>" + kendo.toString(response.Total1Value, "n0") + "</span>";
                        this.hasSummaryRow = true;
                    }
                    if (response && response.Data) {
                        for (var i = 0 ; i < response.Data.length ; i++) {
                            var t = response.Data[i];
                            t.Customer = t.Customer ? t.Customer : { Name: $scope._l.guest };
                            t.StatusValue = t.Status;
                            t.Status = _orderStatus[t.Status];
                            t.PaidAmount = t.TotalPayment;
                            
                            t.ModifiedDate = $filter('parseDate')(t.ModifiedDate);
                            t.Branch = t.Branch ? t.Branch : { Name: '' };
                            t.Seller = t.Seller ? t.Seller : { GivenName: '' };
                            t.ShortDescription = $filter('truncateDesc')(t.Description);
                            if (t.Payments && t.Payments.length > 0) {
                                t.PaymentMethod = _paymentMethod[t.Payments[0].Method];
                            }
                            if (!t.Discount)
                                t.Discount = 0;

                            //if (t.Discount && t.Discount > 0)
                            //    t.SubTotal = t.Total + t.Discount;
                            //else
                            //    t.SubTotal = t.Total;

                            if (Math.abs(t.Total - t.TotalPayment) > 0.00001) {
                                t.isWarning = true;
                            }

                            if (t.Id < 0) {
                                t.PurchaseDate = "";
                                t.Customer = "";
                                //t.SubTotal = "";
                                //t.Discount = "";
                            }

                            if (!t.Surcharge)
                                t.Surcharge = 0;

                            if (t.InvoiceOrderSurcharges)
                                t.InvoiceOrderSurcharges = t.InvoiceOrderSurcharges.filter(function (s1) {
                                    return !s1.InvoiceId;
                                });

                            if ($scope.surcharges) {
                                angular.forEach(t.InvoiceOrderSurcharges, function (s) {
                                    for (var k = 0; k < $scope.surcharges.length ; k++) {
                                        if (s.SurchargeId == $scope.surcharges[k].Id) {
                                            s.Name = $scope.surcharges[k].Name;
                                            break;
                                        }
                                    }
                                })
                            }

                            t.TotalAfterDiscount = t.Total - (t.Surcharge ? t.Surcharge : 0);

                            if (t.Discount && t.Discount > 0)
                                t.SubTotal = t.TotalAfterDiscount + t.Discount;
                            else
                                t.SubTotal = t.TotalAfterDiscount;
                        }
                        // for highlight the diff payment
                        this.hasCustomStyle = true;
                        this.warnColumnIndex = 16;
                        if (!$scope.settings.UseSurcharge) {
                            this.warnColumnIndex = 14;
                        }
                    }
                    return response;
                },
                model: {
                    fields: {
                        Code: { type: "string" },
                        PurchaseDate: { type: "date" },
                        BranchName: { type: "string" },
                        Status: { type: "string" },
                        CustomerName: { type: "string" },
                        SaleValue: { type: "string" }
                    }
                }
            }
        });


        function initFilter() {

            var filter = [];
            if ($routeParams.Code) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
            }
            else {

                var values = $scope.branchids;
                var condition = [];
                if (values && values.length > 0) {
                    for (var j = 0; j < values.length; j++) {
                        if (values[j] > 0) {
                            condition.push(_filter.newCondition("BranchId", parseInt(values[j]), "eq"));
                        }
                    }
                    filter = _filter.append(filter, condition, "or");
                }
                if ($scope.dateFilter.TimeRange == 'other') {
                    condition = [];
                    if ($scope.dateFilter.StartDate) {

                        var todate = new Date($scope.dateFilter.EndDate);
                        condition.push(_filter.newCondition("PurchaseDate", $scope.dateFilter.StartDate, "ge"));
                        condition.push(_filter.newCondition("PurchaseDate", new Date(todate.DateAdd(1)), "lt"));
                    }
                    filter = _filter.append(filter, condition, "and");
                } else if ($scope.dateFilter.TimeRange != '') {
                    condition = [
                     _filter.newCondition("PurchaseDate", $scope.dateFilter.TimeRange, "eq")
                    ];
                    filter = _filter.append(filter, condition, "or");
                }
                values = $scope.orderStatus;
                condition = [];
                var count = 0;
                for (var k = 0; k < values.length; k++) {
                    if (values[k].checked && parseInt(values[k].key) > 0) {
                        condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                        count++;
                    }
                }
                if (count > 0) {
                    filter = _filter.append(filter, condition, "or");
                }
            }
            return filter;
        }
        // End Detail
        // Function 
        $scope.refresh = function () {
            $scope.orders.pageSize(parseInt($scope.pageSize));
        };

        $scope.filterbyBranch = function () {
            var values = $scope.branchids;
            var condition = [];
            if (values && values.length > 0) {
                for (var k = 0; k < values.length; k++) {
                    if (parseInt(values[k]) > 0) {
                        condition.push(_filter.newCondition("BranchId", parseInt(values[k]), "eq"));
                    }
                }
                _filter.filter($scope.orders, condition, "or");
            } else {
                _filter.remove($scope.orders, "BranchId");
            }
        };

        $scope.filterbyStatus = function () {
            var values = $scope.orderStatus;
            var condition = [];
            var count = 0;
            //if (values.length > 0) {
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) > 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                    count++;
                }
            }
            if (count > 0) {
                _filter.filter($scope.orders, condition, "or");
            } else {
                _filter.remove($scope.orders, "Status");
            }
        };

        $scope.filterbyName = function () {
            if ($scope.filterName) {
                var condition = [
               _filter.newCondition("Code", $scope.filterName, "contains")
                ];
                _filter.filter($scope.orders, condition, "and");
            } else {
                _filter.remove($scope.orders, "Code");
            }
        };

        $scope.filterbyDescription = function () {
            if ($scope.filterDescription) {
                var condition = [
               _filter.newCondition("Description", $scope.filterDescription, "contains")
                ];
                _filter.filter($scope.orders, condition, "and");
            } else {
                _filter.remove($scope.orders, "Description");
            }
        };

        $scope.changeView = function () {
            //var kvDropbox = {};
            kvDropbox.dateFilter = $scope.dateFilter.TimeRange;
            kvDropbox.viewtype = $scope.viewtype;
            kvDropbox.branchids = $scope.branchids;
            kvDropbox.orderStatus = $scope.orderStatus;
            if ($scope.dateFilter.TimeRange == 'other') {
                kvDropbox.fromDate = $scope.dateFilter.StartDate;
                kvDropbox.toDate = $scope.dateFilter.EndDate;
            }

            //localStorage['order_filter'] = JSON.stringify(kvDropbox);
            $scope.location.url('/' + $scope.viewtype + '?filter=' + JSON.stringify(kvDropbox));

        };

        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
            var condition = [];
            if ($scope.dateFilter.StartDate) {
                var todate = new Date($scope.dateFilter.EndDate);
                condition.push(_filter.newCondition("PurchaseDate", $scope.dateFilter.StartDate, "ge"));
                condition.push(_filter.newCondition("PurchaseDate", new Date(todate.DateAdd(1)), "lt"));
            }
            _filter.filter($scope.orders, condition, "and");
            //$("#otherCheck").prettyCheckable("check");
            $scope.dateFilter.TimeRange = 'other';
            //$scope.dateFilterPopup.close();
        };
        $scope.filterbyDate = function () {
            //if ($scope.dateFilter == 'alltimes') {
            //    _filter.remove($scope.orders, "PurchaseDate");
            //    return;
            //}

            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else {
                var fnow = new Date();
                fnow = fnow.setHours(0, 0, 0, 0);
                var ffromDate = new Date(fnow);
                var defStartchange = $scope.dateFilter.TimeRange == 'thisweek' ? ffromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? ffromDate.GetfirstDayOfMonth() : ffromDate);
                $scope.dateFilter.StartDate = defStartchange;
                $scope.dateFilter.EndDate = new Date(fnow);
                $scope.lblOtherTimeFilter = null;
                var condition = [
                      _filter.newCondition("PurchaseDate", $scope.dateFilter.TimeRange, "eq")
                ];
                _filter.filter($scope.orders, condition, "or");
            }  
        };


        $scope.numCheckedData = 0;
        $scope.selectRow = function () {
            var checked = this.checked,
                row = $(this).closest("tr"),
                grid = $("#grdOrders").data("kendoGrid"),
                dataItem = grid.dataItem(row);
            if (checked) {
                //-select the row
                row.addClass("k-state-selected");
                $scope.checkedData[dataItem.Id] = dataItem;
                $scope.numCheckedData++;
            } else {
                //-remove selection
                delete $scope.checkedData[dataItem.Id];
                $scope.numCheckedData--;
                row.removeClass("k-state-selected");
            }
            //$("#numRows").text($scope.numCheckedData);
        };
        if ($routeParams.Code) {
            $scope.refresh();
        }
    }])
//#region order-form
.directive('orderForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'UserResource', 'OrderResource', 'orderStatusMap', 'PrivilegeHelper', '$window', 'settings', 'invoiceDeliveryType',
    function (_session, _l, emptyGridFix, _usersvc, _orders, _status, _p, $window, settings, _invoiceDeliveryType) {
        return {
            restrict: 'E',
            scope: { dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {

                function loadDetail() {

                    if (!scope.dataItem.Cashier)
                    {
                        _orders.get({ orderId: scope.dataItem.Id, Includes: ["TotalQuantity", "Seller", "Cashier", "User"] }, function (data) {
                            scope.dataItem.TotalQuantity = data.TotalQuantity;
                            scope.dataItem.Seller = data.Seller;
                            scope.dataItem.Cashier = data.Cashier;
                            scope.dataItem.User = data.User;
                            scope.dataItem.CustomerDebt = data.CustomerDebt;
                            scope.dataItem.CustomerOldDebt = data.CustomerOldDebt;
                            if (scope.dataItem.Extra) {
                                var payment = JSON.parse(scope.dataItem.Extra);
                                if (payment.PriceBookId) {
                                    scope.dataItem.selectedBook = payment.PriceBookId.Id;
                                }
                            }
                            if (data.DeliveryDetail) {
                                scope.dataItem.DeliveryDetail = data.DeliveryDetail;
                                scope.isUseCod = scope.dataItem.UsingCod === 1? true : false;
                                scope.dataItem.DeliveryDetail.TypeName = scope.deliveryType[scope.dataItem.DeliveryDetail.Type].Name;
                                if (typeof scope.dataItem.DeliveryDetail.deliverySearchParam === "undefined")
                                    scope.dataItem.DeliveryDetail.deliverySearchParam = scope.dataItem.DeliveryDetail.PartnerDelivery ? scope.dataItem.DeliveryDetail.PartnerDelivery.Name : "";
                                if (typeof scope.dataItem.DeliveryDetail.locationSearchParam === "undefined")
                                    scope.dataItem.DeliveryDetail.locationSearchParam = scope.dataItem.DeliveryDetail.Location ? scope.dataItem.DeliveryDetail.Location.Name : "";
                            } else if (settings.UseCod) {
                                scope.dataItem.DeliveryDetail = {};
                                scope.dataItem.DeliveryDetail.Type = scope.deliveryType[0].Id;
                            }
                        }
                        );
                    }                        
                    scope.disabled = (scope.dataItem.StatusValue === _status.Finalized) || scope.dataItem.StatusValue === _status.Void || scope.noteditable || !_p.has('Order_Update');
                    scope.hasVoid = (scope.dataItem.StatusValue === _status.Draft) && _p.has('Order_Delete');
                    scope.hasIssued = scope.dataItem.StatusValue === _status.Finalized;
                    //if (scope.isUseCod || settings.UseCod) {
                    scope.deliveryType = [];
                    for (var idx in _invoiceDeliveryType) {
                        if (_invoiceDeliveryType.hasOwnProperty(idx)) {
                            scope.deliveryType.push({ Id: parseInt(idx), Name: _invoiceDeliveryType[idx] });
                        }
                    }
                    //}
                    
                var orderDetaildb = new kendo.data.DataSource(
                {
                         type: "odata",
                         autoSync: true,
                         transport: {
                             read: {
                                 url: "/api/orders/" + scope.dataItem.Id + "/details?format=json&Includes=Product",
                                 dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                             }
                         },
                         change: function (ob) {
                             scope.dataItem.OrderDetails = ob.items;
                         },
                         serverPaging: false,
                         serverFiltering: true,
                         serverSorting: true,
                         schema: {
                             data: "Data",
                             total: "Total",
                             parse: function (response) {
                                 //do not display negative discount 
                                 var subTotal = 0;
                                 angular.forEach(response.Data, function (r) {
                                     if (r.Discount && r.Discount < -0.000001) {
                                         r.Price -= r.Discount;
                                         r.Discount = null;
                                     }
                                     r.Note = r.Note ? r.Note : '';
                                     // get product name without unit in brackets
                                     r.ProductNameNoUnit = r.ProductName.replace(/ *\([^)]*\) */g, "");
                                     r.Description = r.Description ? r.Description : r.Product.Description;

                                     r.Unit = r.Product ? r.Product.Unit : '';
                                     r.BasePrice = r.Product.BasePrice;
                                     subTotal += r.Price ? ( r.Price - (r.Discount ? r.Discount : 0) ) * r.Quantity : 0;
                                 });

                                 scope.dataItem.SubTotal = subTotal;
                                 return response;
                             }
                         }
                     });
                    elem.find("#tblsub").empty();
                    elem.find("#tblsub").kendoGrid({
                        dataSource: orderDetaildb,
                        pageable: false,
                        dataBinding: scope.emptyGridFix,
                        columns: [
                            { field: "Product.Code", title: scope._l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                            { field: "ProductName", title: scope._l.product_Name, template: '#=ProductName#<span class="txtN txtI fs11 dpb txtGray">#=Note#</span>' },
                            { field: "Price", title: scope._l.price, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
                            { field: "Quantity", title: scope._l.quantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
                            { field: "Discount", title: scope._l.discount, format: "{0:n0}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
                            { field: "SubTotal", title: scope._l.subTotalDetail, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal txtB" } }
                        ]
                    });

                    scope.sellers = _usersvc.getByRole({ Role: 'Order', BranchId: scope.dataItem.BranchId }); //_usersvc.get({ BranchId: data.Branch.Id, IsSeller: true });                        
                    if (scope.dataItem.OrderId) {
                        scope.order = _orders.get({ orderId: scope.dataItem.OrderId });
                    }
                }
                if (scope.dataItem) {
                    loadDetail();
                } else {
                    scope.$watch('dataItem.Id', function (val) {
                        if (val) {
                            loadDetail();
                        }
                    });
                }
            },
            controller: [
                '$scope', 'kvMessages', 'OrderResource', 'logger', '$filter', 'kvConfirmBox', 'kvExportToExcel', 'kvPrinter', 'orderStatusMap', 'printTypeMap', 'settings',
                function ($scope, _m, _ordersvc, _logger, $filter, _msgbox, _export, _print, _map, _printTypeMap, _setting) {
                    $scope._l = _l;
                    $scope.viewUrl = viewUrl;
                    $scope.statusMap = _map;
                    var hasVoidPayment = _p.has("Payment_Delete");
                    $scope.settings = _setting;
                    var voidSaleOrder = function (isVoidPayment) {
                        _ordersvc.remove({ orderId: $scope.dataItem.Id, IsVoidPayment: isVoidPayment, CompareCode: $scope.dataItem.Code }, function () {
                            _logger.success($filter("stringFormat")(_m.voidSaleOrderSuccessfully, [$scope.dataItem.Code]));
                            execCb($scope.onSave, $scope.dataItem);
                        }, callbackFail);
                    };
                    $scope.cancel = function () {

                        var ivmsg = _msgbox.confirm($filter("stringFormat")(_m.voidSaleOrderConfirm, [$scope.dataItem.Code]), _m.voidOrderSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);

                        ivmsg.confirm = function () {
                            if ($scope.dataItem.TotalPayment!==0 && hasVoidPayment) {
                                var pmmsg = _msgbox.confirm($scope._l.order_MsgDelPaymentOrder, _m.voidOrderSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                pmmsg.confirm = function () {
                                    voidSaleOrder(true);
                                };
                                pmmsg.cancel = function () {
                                    voidSaleOrder(false);
                                };
                            } else {
                                voidSaleOrder(false);
                            }
                        };


                    };

                    $scope.finishOrder = function () {
                        var id = $scope.dataItem.Id;
                        _msgbox.confirm($scope._l.sale_MsgOrderSuccessLbl, $scope._l.sale_MsgSuccess);
                        _msgbox.onConfirm = function () {
                            _ordersvc.save({ Order: $scope.dataItem, Complete: true }, function (data) {
                                _logger.success($filter("stringFormat")(_m.orderCompleted, [data.Code]));
                                execCb($scope.onSave, $scope.dataItem);

                            }, function (err) {
                                _logger.error(getMessage(err));
                            });
                        };

                    };
                    $scope.exportDetail = function () {
                        var id = $scope.dataItem.Id;
                        var type = "OrderDetail";
                        var fileName = "ChiTietDatHang_" + $scope.dataItem.Code;
                        var data = { req: id };
                        _export.toExcel(type, fileName, data);
                    };
                    $scope.printContent = function () {
                        $scope.dataItem.retailerInfo = {
                            "name": _session.retailer.name,
                            "address": _session.retailer.address,
                            "phone": _session.retailer.phone,
                            "logo": _session.retailer.logo
                        };

                        if ($scope.dataItem.Customer && $scope.dataItem.Customer.Debt)
                            $scope.dataItem.Customer.OldDebt = $scope.dataItem.Customer.Debt;

                        _print.printfromtype(_printTypeMap.Order, $scope.dataItem);

                    };

                    $scope.update = function () {
                        if (!$scope.dataItem.payments || $scope.dataItem.payments.length == 0) {
                            save();
                        } else {
                            _msgbox.confirm(_l.msgWarningUpdate, _l.titleUpdateInvoice);
                            _msgbox.onConfirm = save;
                        }
                    };

                    $scope.processOrder = function () {                        
                        $window.open('/' + viewUrl.sale + '/#/?order=' + $scope.dataItem.Id);
                    };

                    function save() {
                        var r = _ordersvc.save({ Order: $scope.dataItem });
                        r.$promise.then(callbackSuccess, callbackFail);
                    }

                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.order, data.Code]));
                        execCb($scope.onSave, $scope.dataItem);
                    }

                }
            ],
            templateUrl: _session.partialPath('order-form.html')
        };
    }])
//#endregion
.directive('kvOrderPopup', ['kvSession', '$rootScope', 'logger', 'OrderResource', 'kvConfirmBox', '$filter', 'kvLabel', 'SurchargeResource',
function (_session, $rootScope, _logger, _ordersvc, _msgbox, $filter, _l, _surcharge) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', 'orderStatus', function ($scope, _orderStatus) {
                    //
                    //t.StatusValue = t.Status;
                    //t.Status = _invoiceStatus[t.Status];
                    $scope._l = _l;
                    //$scope._m = _m;

                    $scope.window = {
                        openDetail: function () {
                            //$scope.dataItem = data;
                            $scope.wdOrderDetail.wrapper.addClass("k-window-poup");
                            $scope.wdOrderDetail.center().open();
                        }
                    };

                    $scope.dispose = function () {
                        $scope.dataItem = null;
                        //$scope.cursellers = null;
                        $scope.invoices = null;
                        $scope.onSave = null;
                    };

                    var r2 = _surcharge.get({ Permission: 'Surcharge_Read', ForManage: true });
                    r2.$promise.then(function (dp) {
                        $scope.surcharges = dp.Data;
                        refresh($scope);
                    });

                    this.showOrder = function (id, onSaveHandler) {
                        $scope.onSave = function (arg) {
                            $scope.wdOrderDetail.close();
                            execCb(onSaveHandler, arg);
                        };
                        //&Includes=Branch&Includes=Total&Includes=SubTotal&Includes=Customer&Includes=Seller
                        $scope.order = _ordersvc.get({ orderId: id, Includes: ["TotalQuantity", "Branch", "Order", "Customer", "Seller", "Cashier", "InvoiceOrderSurcharges"] });
                        $scope.order.$promise.then(function (data) {
                            $scope.order = data;
                            $scope.order.StatusValue = $scope.order.Status;
                            $scope.order.Status = _orderStatus[$scope.order.Status];
                            $scope.wdOrderDetail.title($scope._l.order);

                            if ($scope.surcharges) {
                                angular.forEach($scope.order.InvoiceOrderSurcharges, function (s) {
                                    for (var k = 0; k < $scope.surcharges.length ; k++) {
                                        if (s.SurchargeId == $scope.surcharges[k].Id) {
                                            s.Name = $scope.surcharges[k].Name;
                                            break;
                                        }
                                    }
                                })
                            }

                        });
                        $scope.window.openDetail();
                        //$scope.loadRowDetail(id);
                    };
                    //inject to parent 
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }

                }
            ],
            templateUrl: _session.partialPath('order-popup.html')
        };
    }])
.factory('kvDropbox', [function () {
    return {};
}])
;
;
'use strict'

//mainly for the kendo template 
//it search for function in global scope
function hasDocumentViewRight(docType) {
    return !((docType == paymentDocType.values.Sell && !window.rights.canViewInvoice)
              || (docType == paymentDocType.values.Return && !window.rights.canViewReturn)
              || (docType == paymentDocType.values.Miscellaneous && !window.rights.canViewCashFlow)
        );
}

kvApp.controller('CustomerCtrl', ['$scope', 'logger', 'kvMessages', 'kendofilter', 'OrderResource', '$location', '$rootScope', '$routeParams', '$filter', 'kvPaymentDocType', 'kvConfirmBox', 'CustomerResource', 'kvExportToExcel', 'invoiceStatusMap', 'kvSession', '$kWindow', 'CommonServices', 'CustomerGroupResource',
function ($scope, _logger, _m, _filter, _orders, $location, $rootScope, $routeParams, $filter, paymentDocType, _msgBox, _customers, _export, _invoiceStatus, _session, $kWindow, CommonServices, CustomerGroupResource) {
        $scope.pageSize = pager.defaultList;
        $scope.pageSizes = pager.pageSizes;
        $scope.selectedCustomers = [];
        $scope.checkbox = {
            checkAll: false
        };

        $scope.compareFn = function (obj1, obj2) {
            return obj1.Id == obj2.Id;
        }

        var rights = window.rights = $scope.rights = {};
        window.paymentDocType = paymentDocType;
        $scope.$on('$destroy', function () {
            //detach those variable from window obj
            window.rights = null;
            window.paymentDocType = null;
        });

        $scope.filterDate = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        }

        $scope.customerFilterDate = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        }

        rights.canUpdate = $scope._p.has('Customer_Update');
        rights.canImport = $scope._p.has('Customer_Import');
        rights.canExport = $scope._p.has('Customer_Export');
        rights.canCreate = $scope._p.has('Customer_Create');
        rights.canDelete = $scope._p.has('Customer_Delete');
        rights.canViewInvoice = $scope._p.has('Invoice_Read') || $scope._p.has('Customer_Export');
        rights.canViewOrder = $scope._p.has('Order_Read') && !_session.retailer.isCoffee;
        rights.canViewReturn = $scope._p.has('Return_Read');
        rights.canViewDebt = $scope._p.has('CustomerAdjustment_Read') || $scope._p.has('Customer_Export');
        rights.canAdjustDebt = $scope._p.has('CustomerAdjustment_Create');
        rights.canCreatePayment = $scope._p.has('Payment_Create');
        rights.canViewCashFlow = $scope._p.has('CashFlow_Read');
        $scope.canCreate = $scope._p.has('Customer_Create');
        $scope.canDelete = $scope._p.has('Customer_Delete');
        $scope.canUpdate = $scope._p.has('Customer_Update');

        $scope.custFilter = { dateRange: 'all' };
        $scope.custFilter.TotalInvoiced = {
            From: 0
        }
        var initFilter = function () {
            if ($routeParams.Code || $routeParams.code) {
                $scope.custFilter.Code = $routeParams.Code || $routeParams.code;
                return [_filter.newCondition('Code', $scope.custFilter.Code, 'contains')];
            }
            return [];
        };

        $scope.bindedGrid;
        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };

        var getAdditionalParam = function () {
            //return filter by total invoiced amount 
            var invoicedFilter = $scope.custFilter.TotalInvoiced;
            var param = {};
            if (invoicedFilter) {

                if (invoicedFilter.From === 0 || invoicedFilter.From) {
                    param.InvoicedLower = invoicedFilter.From;
                }

                if (invoicedFilter.To === 0 || invoicedFilter.To) {
                    param.InvoicedUpper = invoicedFilter.To;
                }
            }
            param.GroupId = $scope.selectedGroupId;
            param.DateFilterType = $scope.filterDate.TimeRange;
            if (param.DateFilterType === 'other') {
                if ($scope.filterDate.StartDate) {
                    param.StartDate = $scope.filterDate.StartDate.toISOString();
                }
                if ($scope.filterDate.EndDate) {
                    param.EndDate = $scope.filterDate.EndDate;
                    param.EndDate = new Date(param.EndDate.DateAdd(1)).toISOString();
                }
            }

            param.NewCustomerDateFilterType = $scope.customerFilterDate.TimeRange;
            if (param.NewCustomerDateFilterType === 'other') {
                if ($scope.customerFilterDate.StartDate) {
                    param.NewCustomerStartDate = $scope.customerFilterDate.StartDate.toISOString();
                }
                if ($scope.customerFilterDate.EndDate) {
                    param.NewCustomerEndDate = $scope.customerFilterDate.EndDate;
                    param.NewCustomerEndDate = new Date(param.NewCustomerEndDate.DateAdd(1)).toISOString();
                }
            }

            return param;
        };

        $scope.customers = new kendo.data.DataSource({
            type: "odata",
            transport: {
                read: {
                    url: ("/api/customers?format=json" + (($scope.rights.canViewInvoice || $scope.rights.canViewDebt) ? "&Includes=TotalInvoiced&Includes=Location" : "") + "&ForSummaryRow=true"),
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: getAdditionalParam
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {

                    if (response) {
                        //response.Total1Value,
                        //response.Total2Value,
                        //this.totalValue = kendo.toString(response.Total1Value, "n0") + "<span class='dpib customerDebtTotal'>" + kendo.toString(response.Total2Value, "n0") + '</span>';
                        if (response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        var hasSummary = false;
                        angular.forEach(response.Data, function (r) {
                            //console.log(r);
                            r.BirthDate = $filter('parseDate')(r.BirthDate);
                            r.GroupsText = r.Groups ? r.Groups.replace(/\|/g, ", ") : "";
                            if (r.Gender == true)
                                r.Gender = $scope._l.male;
                            else if (r.Gender == false)
                                r.Gender = $scope._l.female;
                            else
                                r.Gender = "";

                            if (r.Id == -1) {
                                hasSummary = true;
                                r.Gender = "";
                                if (!$scope.rights.canViewInvoice || r.TotalInvoiced == -1)
                                    r.TotalInvoiced = "--";
                                if (!$scope.rights.canViewDebt || r.Debt == -1)
                                    r.Debt = "--";
                            } else {
                                r.CompareCode = r.Code;
                                r.CompareName = r.Name;
                            }
                        });
                        
                        if (hasSummary)
                            this.hasSummaryRow = true;
                    }
                    return response;
                },
                model: {
                    fields: {
                        Name: { type: "string" },
                        ContactNumber: { type: "string" },
                        Email: { type: "string" }
                    }
                }
            }
        });
        $scope.grdColumns = [
            { field: "Code", title: $scope._l.customerCode, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
            { field: "Name", title: $scope._l.customer_Name, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
            { field: "ContactNumber", title: $scope._l.contactNo, headerAttributes: { "class": "tdPhone" }, attributes: { "class": "tdPhone" } },
            { field: "GroupsText", title: $scope._l.customer_Group, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
            { field: "Gender", title: $scope._l.gender, headerAttributes: { "class": "tdSLB" }, attributes: { "class": "tdSLB" }, hidden: true },
            { field: "BirthDate", title: $scope._l.birthdate, format: "{0:dd/MM/yyyy}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, hidden: true },
            { field: "Email", title: $scope._l.email, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
            { field: "Address", "title": $scope._l.address, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
            { field: "LocationName", "title": $scope._l.delivery_location, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
            { field: "Debt", title: $scope._l.customer_DebtTitle, headerAttributes: { "class": "tdDebt txtR" }, attributes: { "class": "tdDebt txtR" }, template: '{{dataItem.Debt | balSheetFormat}}', isNumber: true },
            { field: "TotalInvoiced", title: $scope._l.totalInvoiced, format: "{0:n0}", headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" }, isNumber: true }
        ];

        if (($scope._p.has('SmsEmailTemplate_SendSMS') || $scope._p.has('SmsEmailTemplate_SendEmail')) && $scope._setting.SMSEmailMarketing && ($scope._setting.IsConnectVG || $scope._setting.MailServiceType > 0)) {
            $scope.grdColumns.unshift({ sortable: false, field: "Id", template: '<label class="quickaction_chk dpb" ng-click="eventStop($event)" ><input type="checkbox" checklist-model="selectedCustomers" checklist-comparator=".Id" checklist-comparator="compareFn" checklist-value="{Id: dataItem.Code, Name: dataItem.Name, Phone: dataItem.ContactNumber || \'\', Email: dataItem.Email || \'\', Type: 3}" kv-pretty-check kv-data-label="" /></label>', headerTemplate: '<input type="checkbox" ng-change="customerGridCheckAll()" ng-model="checkbox.checkAll" ng-checked="checkbox.checkAll" ng-true-value="true" ng-false-value="false" kv-pretty-check kv-data-label="" />', headerAttributes: { "class": "w20 tdCheck" }, attributes: { "class": "w20 tdCheck" } });
        }

        $scope.eventStop = function ($event) {
            if ($event) {
                event.preventDefault();
                event.stopPropagation();
            }
        }

        if (!$scope.rights.canViewInvoice) {
            for (var i = 0; i, $scope.grdColumns.length; i++) {
                if ($scope.grdColumns[i].field == 'TotalInvoiced') {
                    $scope.grdColumns.splice(i, 1);
                    break;
                }
            }
        }
        if (!$scope.rights.canViewDebt) {
            for (var j = 0; j < $scope.grdColumns.length; j++) {
                if ($scope.grdColumns[j].field == 'Debt') {
                    $scope.grdColumns.splice(j, 1);
                    break;
                }
            }
        }
        $scope.import = function () {
            $scope.importCustomerPopup.showPopup();
        };
        $scope.export = function () {
            var filter = $scope.customers.reader.kvFilter;
            filter.EndDate = kendo.parseDate(filter.EndDate);
            filter.StartDate = kendo.parseDate(filter.StartDate);
            
            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            var type = "Customer";
            var fileName = "DanhSachKhachHang";
            var data = { req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);

        };


        $scope.detailTemplate = kendo.template($('#customerDetailTmpl').html());

        var customerHandler = {
            onSave: function (customer) {
                _logger.success(_m.customerSaveSuccess);
            },
            onSaveError: function (err) {
                _logger.error(err);
            }
        };

        function updateViewOnDebtChange() {
            setTimeout(function () { $scope.customers.read(); }, 500);
        }

        $scope.$on("refreshCustomer", function () {
            //$scope.customers.read();
            updateViewOnDebtChange();
        });

        $scope.deleteCustomer = function (customer) {
            _msgBox.confirm($filter("stringFormat")($scope._l.customer_MsgDel, [customer.Code]), $scope._l.customer_TitleDel, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgBox.onConfirm = function () {
                _customers.remove({ customerId: customer.Id, CompareCode: customer.Code, CompareName: customer.Name }, function () {
                    _logger.success($scope._m.globalDeleteSuccess);
                    $scope.customers.read();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };

        };

        $scope.addCustomer = function () {
            $rootScope.$broadcast(app.events.showCustomerForm, null);            
        };
        $scope.editCustomer = function (customer) {
            $rootScope.$broadcast(app.events.showCustomerForm, customer);
        }
        $scope.updateBalance = function (customer) {
            $scope.$broadcast('update-balance', customer);
        };

        $scope.makePayment = function (customer) {
            //$scope.paymentPopup
            $scope.paymentFormPopup.showPaymentForCustomer(customer, {
                onSave: updateViewOnDebtChange
            });
        };

        $scope.filterByCode = function () {
            var filter = [];
            if ($scope.custFilter.Code && $scope.custFilter.Code.length >= 1) {
                /*
                _filter.remove($scope.customers, 'Code');
                _filter.remove($scope.customers, 'ContactNumber');
                _filter.remove($scope.customers, 'Name');
                */
                var cond = [];
                cond.push(_filter.newCondition('Code', $scope.custFilter.Code, 'contains'));
                cond.push(_filter.newCondition('ContactNumber', $scope.custFilter.Code, 'contains'));
                cond.push(_filter.newCondition('Name', $scope.custFilter.Code, 'contains'));
                filter = _filter.append(filter, cond, "or");
                _filter.addfilter($scope.customers, filter);
                //_filter.filter($scope.customers, cond, "or");
            } else if (!$scope.custFilter.Code) {
                filter = $scope.customers.filter();
                if (!filter) return;
                filter = _filter.detach(filter, 'Code');
                filter = _filter.detach(filter, 'ContactNumber');
                filter = _filter.detach(filter, 'Name');
                $scope.customers.filter(filter);
            }

        };
        $scope.RefreshGrid = function (isall) {
            if (isall) {
                $scope.comboGroup.dataSource.read();
            }
            $scope.customers.read();
        };

        $scope.onChange = function (e) {
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedGroup = dataItem;
            $scope.RefreshGrid();
        };
        $scope.onCascade = function (e) {
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedGroup = dataItem;
            $scope.selectedGroupId = dataItem.Id;
        };

        $scope.selectedGroupId = 0;
        $scope.comboGroup = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                //autoSync: true,
                transport: {
                    read: {
                        url: "/api/customers/group?IsFilter=true",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total"
                }
            }),
            placeholder: $scope._l.customer_ChooseGroup + " ...",
            dataTextField: "Name",
            dataValueField: "Id",
            valuePrimitive: true,
            change: $scope.onChange,
            cascade: $scope.onCascade,
            dataBound: function (e) {
                //var dataItem = e.sender.dataItem(e.sender.selectedIndex);
                //if (dataItem) {
                //    $scope.selectedGroup = dataItem;
                //    $scope.selectedGroupId = dataItem.Id;
                //}
            }
        };

        $scope.AddGroup = function () {

            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: $scope._l.customer_GroupAddTitle,
                    resizable: false,
                    draggable: true,
                    pinned: true,
                    width: 560,
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-masstel k-window-customerGroup");
                    }
                },
                template: '<kv-customer-group-form kv-on-save="onSave(group)" kv-on-cancel="onCancel()"></kv-customer-group-form>',
                controller: ["$scope", "$windowInstance", function ($scope, $windowInstance) {

                    $scope.onSave = function (group) {
                        $windowInstance.close(group);
                    };

                    $scope.onCancel = function () {
                        $windowInstance.close(false);
                    };
                }]
            });

            wdInstance.result.then(function (resp) {
                if (angular.isObject(resp) && resp) {

                    //fix for add
                    delete resp.$resolve;
                    delete resp.$promise;

                    $scope.ddlSelectGroup.dataSource.add(resp);
                    $scope.selectedGroup = resp;
                    $scope.selectedGroupId = resp.Id;
                    $scope.RefreshGrid(true);
                }
            });

            //$scope.customerGroupForm.showPopup(0, function (data) {
            //    $scope.selectedGroup = data;
            //    $scope.selectedGroupId = data.Id;
            //    $scope.RefreshGrid(true);
            //});

        };
        $scope.EditGroup = function () {
            if ($scope.selectedGroupId > 0) {

                /*
                    CuongTL: New kendo window service -> update
                */
                CustomerGroupResource.get({ groupId: $scope.selectedGroupId }, function (data) {
                    var wdInstance = $kWindow.open({
                        options: {
                            modal: true,
                            title: $scope._l.customer_GroupEditTitle,
                            resizable: false,
                            draggable: true,
                            pinned: true,
                            width: 560,
                            visible: false,
                            open: function () {
                                this.wrapper.addClass("k-window-poup k-window-masstel k-window-customerGroup");
                            }
                        },
                        template: '<kv-customer-group-form kv-group-data="groupData" kv-on-save="onSave(group)" kv-on-delete="onDelete(group)" kv-on-cancel="onCancel()"></kv-customer-group-form>',
                        resolve: {
                            customerGroupData: function () {
                                return data;
                            }
                        },
                        controller: ["$scope", "$windowInstance", "customerGroupData", function ($scope, $windowInstance, customerGroupData) {

                            init();

                            function init() {
                                $scope.groupData = customerGroupData;
                            };

                            $scope.onSave = function (group) {
                                $windowInstance.close(group);
                            };

                            $scope.onCancel = function() {
                                $windowInstance.close(false);
                            };

                            $scope.onDelete = function (group) {
                                group.Id = 0;
                                $windowInstance.close(group);
                            };
                        }]
                    });

                    wdInstance.result.then(function (resp) {
                        if (angular.isObject(resp) && resp) {
                            $scope.selectedGroup = resp;
                            $scope.selectedGroupId = resp.Id;
                            $scope.RefreshGrid(true);
                        }
                    });

                }, function (err) {
                    _logger.error(getMessage(err));
                });
                

                //$scope.customerGroupForm.showPopup($scope.selectedGroupId, function (data) {
                //    $scope.selectedGroup = data;
                //    $scope.selectedGroupId = data.Id;
                //    $scope.RefreshGrid(true);
                //});
            }
            else
                //_logger.error($scope._l.pricebook_msgErrorInfo + " " + $scope._m.globalPriceBook);
                _logger.error($scope._l.customer_msgErrorInfo);
        };

        $scope.filterByTotalInvoiced = function () {
            //force reload
            $scope.customers.read();
        };

        $scope.filterByNewCustomerDate = function () {
            $scope.customers.read();
        }

        $scope.filterByDateRange = function () {
            $scope.customers.read();
        };

        //$scope.filterByCustomDateRange = function () {
        //    //$scope.lblOtherTimeFilter = ($scope.custFilter.fromDate ? $filter('date')($scope.custFilter.fromDate, 'dd/MM/yyyy') : '') + " - " + ($scope.custFilter.toDate ? $filter('date')($scope.custFilter.toDate, 'dd/MM/yyyy') : '');
        //    //$scope.custFilter.dateRange = 'other';
        //    //$scope.dateFilterPopup.close();
        //    $scope.customers.read();
        //};

        $scope.filterByDebt = function () {
            var debFilter = $scope.custFilter.Debt;
            //var filter= _filter.detach($scope.customers, 'Debt');
            if (debFilter) {
                var cond = [];
                if (debFilter.From != null && debFilter.From != undefined && !isNaN(parseFloat(debFilter.From))) {
                    cond.push(_filter.newCondition('Debt', debFilter.From, 'ge'));
                }
                if (debFilter.To != null && debFilter.To != undefined && !isNaN(parseFloat(debFilter.To))) {
                    cond.push(_filter.newCondition('Debt', debFilter.To, 'le'));
                }

                if (cond.length > 0) {
                    _filter.filter($scope.customers, cond, 'and');
                    return;
                }
            }

            _filter.remove($scope.customers, 'Debt');
        };

        $scope.showDocumentDetail = function (data, customer) {
            if (!hasDocumentViewRight(data.type)) {
                _logger.warning($scope._l.customer_NoDocumentView);
                return;
            }
            if (data.type == paymentDocType.values.Sell) {
                $scope.invoicePopup.showInvoice(data.id);
            } else if (data.type == paymentDocType.values.Payment) {
                $scope.paymentPopup.showPayment(data.code, function () {
                    $scope.refresh();
                });
            } else if (data.type == paymentDocType.values.Return) {
                $scope.returnPopup.showReturn(data.id);
            } else if (data.type == paymentDocType.values.ClosingLoanBook) {
                $scope.$broadcast('show-adjustment', data, customer);
            } else if (data.type == paymentDocType.values.PaymentViaCashflow) {
                //$scope.cashflowPopup.showPayment(data.id);
                $location.url('/' + viewUrl.cashflow + '?Code=' + data.code);
            }
        };

        function initOrderFilter(id) {
            var filter = [];
            var para = getAdditionalParam();

            filter = _filter.append(filter, [_filter.newCondition('CustomerId', id, "eq")], "and");
            if (para.DateFilterType === 'other') {
                if (para.StartDate) {
                    filter = _filter.append(filter, [_filter.newCondition('PurchaseDate', kendo.parseDate(para.StartDate), "ge")], "and");
                }
                if (para.EndDate) {
                    filter = _filter.append(filter, [_filter.newCondition('PurchaseDate', kendo.parseDate(para.EndDate), "lt")], "and");
                }
            } else if (para.DateFilterType !== 'all') {
                filter = _filter.append(filter, [_filter.newCondition('PurchaseDate', para.DateFilterType, "eq")], "and");
            }

            filter = _filter.append(filter, [_filter.newCondition('Status', _invoiceStatus.Void, 'ne')], 'and');
            filter = _filter.append(filter, [_filter.newCondition('Status', _invoiceStatus.Failed, 'ne')], 'and');

            return filter;
        }

        $scope.exportCustomerOrder = function () {
            log.error($scope._l.customer_NoUseToFunction);

        };
        $scope.exportCustomerInvoice = function () {
            log.error($scope._l.customer_NoUseToFunction);
        };

        $scope.exportCustomerDebt = function () {
            log.error($scope._l.customer_NoUseToFunction);
        };

        $scope.grvDetailInit = function (e) {
            //e.detailRow.find('.tabstrip')
            var detailRow = e.detailRow;

            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });
            var hideTab = function (index) {
                $(tabship.data("kendoTabStrip").items()[index]).attr("style", "display:none");
            };
            var pageableObj = { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.customer_Paging } };
            if ($scope.rights.canViewOrder) {
                //=== customer order list =========================
                var customerOrderList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/orders?format=json&Includes=Seller&Includes=Branch&Includes=Customer',
                            dataType: 'json'
                        }
                    },
                    change: function () {
                        if (this._total == 0) {
                            hideTab(2);
                        }
                    },
                    pageSize: 5,
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    filter: initOrderFilter(e.data.Id),
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        parse: function (response) {

                            if (response) {
                                if (response.Filter) {
                                    this.kvFilter = response.Filter;
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                PurchaseDate: { type: "date" },
                            }
                        }
                    },
                });
                $scope.exportCustomerOrder = function () {
                    var filter = customerOrderList.reader.kvFilter;
                    //var col = $('.customerOrderList').data("kendoGrid").options.columns;
                    //var arrcol = [];
                    //for (var idx = 0; idx < col.length; idx++) {
                    //    arrcol.push({
                    //        Field: col[idx].field,
                    //        Title: col[idx].title,
                    //        Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                    //        Width: col[idx].width
                    //    });
                    //}
                    var type = "Order";
                    var fileName = "LichSuDatHang";
                    //var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                    var data = { req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);

                };

                detailRow.find('.customerOrderList').kendoGrid({
                    dataSource: customerOrderList,
                    pageable: pageableObj,
                    dataBinding: function () {
                        e.data.orderCount = this.dataSource._total;
                        $scope.emptyGridFix.apply(this, arguments);
                    },
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.orderCode").click(function () {
                            var data = $(this).data();
                            scope.showOrderDetail(data.id);
                            refresh($scope);
                        });
                    },
                    columns: [
                        { "field": "Code", "title": $scope._l.orderCode, template: '<a href="javascript:void(0)" class="orderCode" data-id="#=Id#">#=Code#</a>', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                        { "field": "PurchaseDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy H:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { "field": "Seller.GivenName", "title": $scope._l.employeeSale },
                        { "field": "Total", "title": $scope._l.total, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } }
                    ]
                });

            }

            if ($scope.rights.canViewInvoice) {
                //=== customer invoice list =========================
                var customerInvoiceList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/invoices?format=json&Includes=SoldBy&Includes=Customer&Includes=BranchName',
                            dataType: 'json',

                        }
                    },
                    pageSize: 5,
                    change: function () {
                        if (this._total == 0) {
                            hideTab(1);
                        }
                    },
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    filter: initOrderFilter(e.data.Id),
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        parse: function (response) {
                            if (response) {
                                if (response.Filter) {
                                    this.kvFilter = response.Filter;
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                PurchaseDate: { type: "date" },
                            }
                        }
                    },
                });
                detailRow.find('.customerInvoiceList').kendoGrid({
                    dataSource: customerInvoiceList,
                    pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.customer_invoiceHistoryPaging } },
                    dataBinding: function () {
                        e.data.invoiceCount = this.dataSource._total;
                        $scope.emptyGridFix.apply(this, arguments);
                    },
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.invoiceCode").click(function () {
                            var data = $(this).data();
                            scope.showInvoiceDetail(data);
                            refresh($scope);
                        });
                    },
                    columns: [
                        { "field": "Code", "title": $scope._l.invoiceCode, template: '<a href="javascript:void(0)" class="invoiceCode" data-code="#=Code#" data-id="#=Id#">#=Code#</a>', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                        { "field": "PurchaseDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy H:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { "field": "SoldBy.GivenName", "title": $scope._l.employeeSale },
                        { "field": "Total", "title": $scope._l.total, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } }
                    ]
                });

                $scope.exportCustomerInvoice = function () {
                    var filter = customerInvoiceList.reader.kvFilter;

                    //var col = $('.customerInvoiceList').data("kendoGrid").options.columns;
                    //var arrcol = [];
                    //for (var idx = 0; idx < col.length; idx++) {
                    //    arrcol.push({
                    //        Field: col[idx].field,
                    //        Title: col[idx].title,
                    //        Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                    //        Width: col[idx].width
                    //    });
                    //}

                    var type = "Invoice";
                    var fileName = "LichSuBanHang";
                    var data = { req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);
                };
            }
            //===========customer debt list================
            if ($scope.rights.canViewDebt) {
                var customerDebtList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/customers/' + e.data.Id + '/debt?format=json&GroupCode=true',
                            dataType: 'json'
                        }
                    },
                    pageSize: 5,
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        model: {
                            fields: {
                                DocumentCode: { type: "string" },
                                TransDate: { type: 'date' }
                            }
                        },
                        parse: function (response) {
                            if (response.Filter) {
                                this.kvFilter = response.Filter;
                            }
                            //var mostRecent;
                            angular.forEach(response.Data, function (r) {
                                r.TypeStr = paymentDocType.labels[r.DocumentType];

                                //if (mostRecent == undefined) {
                                //    mostRecent = r.Balance;
                                //}
                                r.Value = $filter('balSheetFormat')(r.Value);
                                r.Balance = $filter('balSheetFormat')(r.Balance);
                            });
                            /*
                            if (mostRecent !== e.data.Debt && Math.abs(mostRecent - e.data.Debt) > 0.000001) {
                                e.data.Debt = mostRecent;
                                refresh($scope);
                            }
                            */
                            return response;
                        }
                    }
                });

                //e.data.debtListDS = customerDebtList;


                detailRow.find('.customerDebtList').kendoGrid({
                    dataSource: customerDebtList,
                    pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.customer_DebtPaging } },
                    dataBinding: function () {
                        e.data.recordCount = this.dataSource._total;
                        $scope.emptyGridFix.apply(this, arguments);
                    },
                    dataTitle: $scope._l.debt,
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.documentCode").click(function () {
                            var data = $(this).data();
                            var customer = scope.dataItem;
                            //    data.debtList = customerDebtList;ss cashflow  
                            if (data && customer)
                                scope.showDocumentDetail(data, customer);
                            refresh($scope);
                        });
                    },
                    columns: [
                        {
                            field: "DocumentCode", title: $scope._l.paymentCode, template: '#if (hasDocumentViewRight(DocumentType)) {#' +
                            ' #if(DocumentType!=' + paymentDocType.values.PaymentViaCashflow + '){#' +
                                '<a href="javascript:void(0)" class="documentCode" data-id="#=DocumentId#" data-code="#=DocumentCode#" data-type="#=DocumentType#">#=DocumentCode#</a>' +
                                '#}else{# ' + '<a href="\\#/' + viewUrl.cashflow + '?Code=#=DocumentCode#" target="_blank">#=DocumentCode#</a> #}#' +

                              '#} else {# #=DocumentCode# #}#', headerAttributes: { "class": "tdCodePur" }, attributes: { "class": "tdCodePur" }
                        },
                        { field: 'TransDate', title: $scope._l.lblTime, format: "{0:dd/MM/yyyy H:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { field: 'TypeStr', title: $scope._l.customer_Type },
                        { field: "Value", title: $scope._l.customer_Value, headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } },
                        { field: "Balance", title: $scope._l.customer_DebtSubTitle, headerAttributes: { "class": "tdDebt txtR" }, attributes: { "class": "tdDebt txtR" } }
                    ]
                });
                $scope.exportCustomerDebt = function () {
                    var filter = customerDebtList.reader.kvFilter;
                    var col = $('.customerDebtList').data("kendoGrid").options.columns;
                    var arrcol = [];
                    for (var idx = 0; idx < col.length; idx++) {
                        arrcol.push({
                            Field: col[idx].field,
                            Title: col[idx].title,
                            Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                            Width: col[idx].width
                        });
                    }
                    var type = "CustomerDebt";
                    var fileName = "LichSuThanhToanKhachHang";
                    var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);

                };

            }
        };

        $scope.showOrderDetail = function (orderId) {
            // $location.url('/' + viewUrl.orderList + '?code=' + orderId);
            $scope.orderPopup.showOrder(orderId);

        };

        $scope.showInvoiceDetail = function (data) {
            //$location.url('/' + viewUrl.invoiceList + '?code=' + data.code);
            $scope.invoicePopup.showInvoice(data.id);
        };

        $scope.refresh = function () {
            $scope.customers.pageSize(parseInt($scope.pageSize));
        };

        $scope.openWdSendMessage = function (isSendEmail) {
            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: isSendEmail ? $scope._l.sms_SendEmail : $scope._l.sms_SendSMS,
                    resizable: true,
                    width: 720,
                    position: {
                        top: 100,
                        left: "30%"
                    },
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-masstel k-window-sms");
                    }
                },
                template: '<kv-send-message-form on-cancel="onCancel()" on-sent="onSent()" selected-customers="selectedCustomers" is-send-email="' + isSendEmail + '" class="sms-email"></kv-send-message-form>',
                controller: ['$scope', 'selectedCustomers', '$windowInstance', function ($scope, selectedCustomers, $windowInstance) {
                    init();

                    function init() {
                        $scope.selectedCustomers = selectedCustomers;
                    }

                    $scope.onCancel = function () {
                        $windowInstance.close(false);
                    };

                    $scope.onSent = function () {
                        $windowInstance.close(true);
                    }
                }],
                resolve: {
                    selectedCustomers: function() {
                        return $scope.selectedCustomers;
                    }
                }
            });
        };

        $scope.customerGridCheckAll = function () {
            var data = angular.copy($scope.customers.data());

            if ($scope.checkbox.checkAll) {
               
                angular.forEach(data, function (item) {

                    if (item.Code && CommonServices.indexOfObjectCompareField(item, $scope.selectedCustomers, 'Code', 'Id') == -1) {
                        $scope.selectedCustomers.push({
                            Id: item.Code,
                            Name: item.Name,
                            Phone: item.ContactNumber || "",
                            Email: item.Email || "",
                            Type: 3
                        })
                    }
                });
            }
            else {

                var temp = angular.copy($scope.selectedCustomers);

                for (var i = 0; i < $scope.selectedCustomers.length; i++) {

                    var item = $scope.selectedCustomers[i];
                    var index = CommonServices.indexOfObjectCompareField(item, data, 'Id', 'Code');

                    if (index != -1) {
                        temp.splice(CommonServices.indexOfObject(item, temp, 'Id'), 1);
                    }
                }

                $scope.selectedCustomers.splice(0, $scope.selectedCustomers.length);
                angular.forEach(temp, function (item) {

                    if (item.Id && CommonServices.indexOfObject(item, $scope.selectedCustomers, 'Id') == -1) {
                        $scope.selectedCustomers.push({
                            Id: item.Id,
                            Name: item.Name,
                            Phone: item.ContactNumber || "",
                            Email: item.Email || "",
                            Type: 3
                        })
                    }
                });
            }
        };

        $scope.openSelectedCustomers = function () {
            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: $scope._l.sms_SelectedCustomer,
                    resizable: true,
                    width: 880,
                    position: {
                        top: 100,
                        left: "30%"
                    },
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-masstel k-window-customerchk");
                    }
                },
                template: '<kv-selected-customers selected-customers="selectedCustomers"></kv-selected-customers>',
                controller: ['$scope', '$windowInstance', 'selectedCustomers', function ($scope, $windowInstance, selectedCustomers) {
                    $scope.selectedCustomers = selectedCustomers;
                }],
                resolve: {
                    selectedCustomers: function() {
                        return $scope.selectedCustomers;
                    }
                }
            });
        };
    }])
    .directive('kvCustomerFilter', ['kvSession', function (_session) {
        return {
            restrict: 'E',
            link: function (scope, elem, attrs) {
                //console.log('testing');
            },
            controller: ['$scope', function ($scope) {

            }],
            templateUrl: _session.partialPath('customer-filter.html')
        };
    }])
     .directive("kvCustomerGroupForm", ["kvSession", "logger", "PrivilegeHelper", "kvLabel", "$filter", "kvMessages", function (_session, _logger, _p, _l, $filter, _m) {
         return {
             restrict: "E",
             scope: {
                kvOnSave: "&",
                kvOnCancel: "&",
                kvOnDelete: "&",
                kvGroupData: "="
             },
             link: function (scope, elem) {
                 scope._l = _l;
                 scope.canCreate = _p.has('Customer_Create');
                 scope.canDelete = _p.has('Customer_Delete') && angular.isObject(scope.kvGroupData);
                 scope.canUpdate = _p.has('Customer_Update');
                 elem.on('$destroy', function () {
                     if (scope.$parent && scope.popupName) {
                         delete scope.$parent[scope.popupName];
                     }
                 });
             },
             controller: ['$scope', 'CustomerGroupResource', 'kvConfirmBox', 'operatorType', 'DiscountTypes', function ($scope, service, _msgbox, operatorType, DiscountTypes) {

                 //init form
                 init();

                 function init() {
                     $scope.typeUpdate = "nothing";
                     $scope.tabType = "1";

                     if (angular.isObject($scope.kvGroupData)) {
                         $scope.group = new Filter($scope.kvGroupData);
                         $scope.group.typeUpdate = "nothing";

                         if (!$scope.group.DiscountRatio) {
                             $scope.group.DiscountType = DiscountTypes.money;
                             $scope.group.DiscountValue = $scope.group.Discount;
                         }
                         else {
                             $scope.group.DiscountType = DiscountTypes.percent;
                             $scope.group.DiscountValue = $scope.group.DiscountRatio;
                         }
                         $scope.canDelete = true;

                     } else {
                         $scope.group = new Filter();
                         $scope.group.DiscountType = DiscountTypes.money;
                         $scope.canDelete = false;
                     }
                 };

                 $scope.discountTypes = DiscountTypes;
                 //$scope.DiscountType = DiscountTypes.money;
                 $scope.discountTypeChanged = function (type) {
                     $scope.group.DiscountValue = null;
                     $scope.group.Discount = null;
                     $scope.group.DiscountRatio = null;
                 };

                 $scope.discountOnItemChanged = function () {
                     if ($scope.group.DiscountType == DiscountTypes.money) {
                         $scope.group.Discount = $scope.group.DiscountValue;
                         $scope.group.DiscountRatio = null;
                     }
                     else {
                         $scope.group.Discount = null;
                         $scope.group.DiscountValue = $scope.group.DiscountValue > 100 ? 100 : $scope.group.DiscountValue;
                         $scope.group.DiscountRatio = $scope.group.DiscountValue;
                     }

                 }

                 $scope.cancel = function () {
                     $scope.group.DiscountValue = null;
                     $scope.group.DiscountType = null;

                     if (angular.isFunction($scope.kvOnCancel)) {
                         execCb($scope.kvOnCancel);
                     }
                 };

                 $scope.delete = function () {
                     var ivmsg = _msgbox.confirm($filter("stringFormat")(_m.removeCustomerGroup, [$scope.group.Name]), _m.removeCustomerGroupTitle, false, _l.confirmYes, _l.confirmNo, false, true);
                     ivmsg.confirm = function () {
                         service.remove({ groupId: $scope.group.Id, CompareName: $scope.group.Name }, function (data) {
                             //$scope.customerGroupWindow
                             _logger.success(_m.removeCustomerGroupSuccess);
                             
                             if (angular.isFunction($scope.kvOnDelete)) {
                                 $scope.kvOnDelete({ group: data });
                             }
                         }, function (er) {
                             _logger.error(getMessage(er));
                         });
                     };
                 };

                 $scope.Operators = [];

                 for (var i in operatorType) {
                     $scope.Operators.push({ value: i, text: operatorType[i] });
                 }
                 //    new kendo.data.DataSource({
                 //    data: operatorType
                 //});

                 function disposeDatePicker(elem) {
                     var datepicker = elem.data("kendoDatePicker");
                     var popup = datepicker.dateView.popup;
                     var element = popup.wrapper[0] ? popup.wrapper : popup.element;

                     //Move the shared calendar to the body
                     //  kendo.ui.DatePicker.sharedCalendar.element.hide().appendTo(document.body);

                     //remove popup element;
                     element.remove();
                     //unwrap element
                     var input = datepicker.element.show();

                     input.removeClass("k-input").css("width", "auto");
                     input.insertBefore(datepicker.wrapper);

                     datepicker.wrapper.remove();

                     //remove DatePicker object
                     input.removeData("kendoDatePicker");
                 }

                 $scope.changeType = function (index, dataItem, isreset) {

                     //var dataItem = this.item;
                     var items = $scope.filterTypes.data();
                     var item = items.filter(function (data) {
                         return data.Name == dataItem.FieldName;
                     })[0];
                     var name = "input.tdvalue_" + index;
                     var inpt = $(name);
                     if (inpt.data("kendoDatePicker") && item.DataType !== 'date') {
                         disposeDatePicker(inpt);
                     } else if (!inpt.data("kendoDatePicker") && item.DataType === 'date') {
                         inpt.kendoDatePicker();
                     }
                     if (inpt.data("kendoDropDownList") && item.DataType !== 'month') {
                         inpt.kendoDropDownList("destroy");
                     }
                     //else if (!inpt.data("kendoDropDownList") && item.DataType === 'month') {
                     //    inpt.kendoDropDownList({
                     //        dataTextField: "text",
                     //        dataValueField: "value",
                     //        dataSource: [
                     //   { text: "1", value: "1" },
                     //   { text: "2", value: "2" },
                     //   { text: "3", value: "3" },
                     //   { text: "4", value: "4" },
                     //   { text: "5", value: "5" },
                     //   { text: "6", value: "6" },
                     //   { text: "7", value: "7" },
                     //   { text: "8", value: "8" },
                     //   { text: "9", value: "9" },
                     //   { text: "10", value: "10" },
                     //   { text: "11", value: "11" },
                     //   { text: "12", value: "12" }
                     //        ],
                     //        index: 0
                     //    });
                     //}
                     if (inpt.data("autoNumeric") && item.DataType !== 'number') {
                         inpt.autoNumeric("destroy");
                     } else if (!inpt.data("autoNumeric") && item.DataType === 'number') {
                         inpt.autoNumeric({ mDec: 0 });
                     }
                     if (isreset)
                         inpt.val('');
                     //item.Value = "";


                 };
                 $scope.filterTypes = new kendo.data.DataSource({
                     type: 'odata',
                     transport: {
                         read: {
                             url: '/api/customers/group/filter?format=json',
                             dataType: 'json'
                         }
                     },
                     change: function () {
                         buildControl();
                     },
                     schema: {
                         data: 'Data',
                         total: 'Total'
                     }
                 });
                 var buildControl = function () {
                     if ($scope.group.filters) {
                         for (var j = 0; j < $scope.group.filters.length; j++) {
                             $scope.changeType(j, $scope.group.filters[j]);
                         }
                     }
                 };
                 $scope.save = function () {
                     $("#LoadingPanel").show();
                     $scope.group.Filter = JSON.stringify($scope.group.filters);
                     service.save({ CustomerGroup: $scope.group, TypeUpdate: $scope.group.typeUpdate }, function (data) {
                         if ($scope.group.Id > 0) {
                             _logger.success(_m.updateCustomerGroupSuccess);
                         } else {
                             _logger.success(_m.addCustomerGroupSuccess);
                         }
                         $("#LoadingPanel").hide();
                         
                         if (angular.isFunction($scope.kvOnSave)) {
                             $scope.kvOnSave({ group: data });
                         }

                     }, function (er) {
                         $("#LoadingPanel").hide();
                         _logger.error(getMessage(er));
                     });
                 };

                 if ($scope.$parent && $scope.popupName) {
                     $scope.$parent[$scope.popupName] = this;
                 }

                 function Filter(data) {
                     this.Id = data ? data.Id : 0;
                     this.Name = data ? data.Name : "";
                     this.Description = data ? data.Description : "";
                     //this.filters = data && data.filters ? data.filters : [];
                     this.filters = data && data.Filter ? JSON.parse(data.Filter) : [];
                     this.Discount = data ? data.Discount : null;
                     this.DiscountRatio = data ? data.DiscountRatio : null;
                     this.CompareName = data ? data.Name : "";
                     this.CompareDiscount = data ? data.Discount : null;
                     this.CompareDiscountRatio = data ? data.DiscountRatio : null;
                 }

                 Filter.prototype.removeItem = function (index) {
                     this.filters.splice(index, 1);

                 };
                 function filterItem() {
                     this.FieldName = "TotalRevenue";
                     this.Operator = "gt";
                     this.Value = 0;
                     // this.CreatedDate = new Date();
                 }

                 Filter.prototype.addFilter = function () {
                     var filter = new filterItem();
                     this.filters.push(filter);
                     //  this.updateValue();
                     //   refresh($scope);
                     // return found;
                     buildControl();
                 };
             }],
             templateUrl: _session.partialPath('customergroup-form.html')
         };
     }])
    .controller('CustomerFormPopupCtrl', ['$scope', 'logger','$location','CustomerResource',
    function ($scope, _logger, $location,_customerResource) {

        var openWindow = function (customer) {
            $scope.customerWindow.wrapper.find(".addMoreMain .fa").removeClass('fa-minus-square').addClass('fa-plus-square');
            $scope.customerWindow.wrapper.addClass('k-window-customer k-window-masstel');
            $scope.customerWindow.wrapper.find(".addMoreBox").addClass('ng-hide');
            var listeners = {
                onSave: function (customer) {
                    $scope.customerWindow.close();
                    $scope.customers.read();
                },
                onSaveError: function (err) {
                    //_logger.error(err);
                },
                onCancel: function () {
                    $scope.customerWindow.close();
                }
            };

            var title = '';
            if (!customer) {
                customer = {};
                title = $scope._l.customer_AddTitle;
            }
            else {
                $scope.source = customer;
                //make a copy
                customer = angular.copy(customer);
                title = $scope._l.customer + ' ' + customer.Code;
            }


            $scope.customerWindow.title(title);
            $scope.customerForm.setListeners(listeners);
            $scope.customerForm.setCustomer(customer, $scope.selectedGroupId);
            $scope.customerWindow.wrapper.addClass("k-window-poup k-window-fix k-window-customer");
            $scope.customerWindow.center().open();
            refresh($scope);
        };
        $scope.$on(app.events.showCustomerForm, function (evt, data) {
            $scope.selectedGroupId = [];
            if (data && data.Id > 0)
            {
                _customerResource.get({ customerId: data.Id, Includes: ["CustomerGroupDetails", "Location"] }, function (d) {
                    if (d && d.BirthDate) {
                        d.BirthDate = kendo.parseDate(d.BirthDate);
                    }
                    if (d.CustomerGroupDetails && d.CustomerGroupDetails.length>0)
                    {
                       
                        for (var i = 0; i < d.CustomerGroupDetails.length; i++) {
                            $scope.selectedGroupId.push(d.CustomerGroupDetails[i].GroupId);
                        }
                       
                    }
                    openWindow(d);
                });
            } else {
                if (data && data.BirthDate) {
                    data.BirthDate = kendo.parseDate(data.BirthDate);
                }
                openWindow(data);
            }
            
            $scope.customerWindow.onClose = function (e) {
                if ($scope.customerForm) {
                    $scope.customerForm.clearListener();
                }
            };
        });



    }])

    .controller('CustomerFormCtrl', ['$scope', '$routeParams', 'CustomerResource', '$location', function ($scope, $routeParams, _customers, $location) {
        var customer = null;
        if ($routeParams.g) {
            var groupId = parseInt($routeParams.g);
        }

        if ($routeParams.id === 'new') {
            $scope.customer = {};

            //$scope.customerForm.setCustomer(customer);
        } else {
            _customers.get({ customerId: $routeParams.id, Includes: ["CustomerGroupDetails", "Location"] }, function (data) {
                $scope.customer = data;
                if ($scope.customer && $scope.customer.BirthDate) {
                    $scope.customer.BirthDate = kendo.parseDate($scope.customer.BirthDate);
                }
                if ($scope.customerForm) {
                    $scope.customerForm.setCustomer(data, groupId);
                };
            });
        }

        $scope.onFormLoaded = function () {
            $scope.customerForm.setListeners({
                onSave: function () {
                    $location.path('/' + viewUrl.customerList);
                },
                onCancel: function () {
                    $location.path('/' + viewUrl.customerList);
                }
            });
            $scope.customerForm.setCustomer($scope.customer, groupId);
        };
    }])
    .controller('LocationSearchCtrl', ['$scope', 'LocationResource', 'logger', function ($scope, _location, _logger) {
        function search(query) {
            var r = _location.autocomplete({ tearm: query });
            r.$promise.then(function (result) {
                if (result.length > 1 || (result && result[0] && query != result[0].Name)) {
                    $scope.cuslocations = result;
                    $(".autocomplete div:not(.autoNotFound)").removeClass("ng-hide");
                    refresh($scope);
                }

            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
        $scope.cuslocationTermChanged = function () {
            if ($scope.customer && $scope.customer.Location && $scope.customer.Location.Name != "") {
                search($scope.customer.Location.Name);
            }
            $(".autocomplete div:visible").addClass("ng-hide");
        };
        
        $scope.selectCustomerLocation = function (location) {
            $("#customerLocationSearchInput").val(location.Name);
            $scope.customer.LocationId = location.Id;
            $scope.customer.LocationName = location.Name;
            refresh($scope);
        };
    }])
    .controller('BalancePopupCtrl', ['$scope', 'logger', 'CustomerResource', 'CustomerAdjustmentResource', 'kvConfirmBox', '$filter', 'kvMessages', function ($scope, _logger, _customers, _adjustments, _msgBox, $filter, _m) {
        $scope.$on('update-balance', function (evt, customer) {
            $scope.customer = customer;            
            $scope.adjust = {};
            $scope.AdjustmentDate = new Date();
            $scope.balancePopup.title($scope._l.debtAdjust);
            $scope.balancePopup.wrapper.addClass("k-window-poup k-window-poup-thn");
            $scope.balancePopup.center().open();
        });        
        $scope.AdjustmentDate = new Date();
        $scope.maxDate = new Date();
        $scope.maxDate.setHours(23, 59, 59, 999);
        $scope.$on('show-adjustment', function (evt, info, customer) {
            //console.log(customer);
            _adjustments.get({ adjustId: info.id, Includes: ['User'] }, function (data) {
                $scope.customer = customer;
                $scope.adjust = data;
                $scope.CompareAdjustmentDate = data.AdjustmentDate != null && data.AdjustmentDate != undefined ? kendo.parseDate(data.AdjustmentDate) : kendo.parseDate(data.CreatedDate);
                $scope.AdjustmentDate = $scope.CompareAdjustmentDate;
                $scope.balancePopup.title($scope._l.debtAdjust);
                //$scope.dataSource = info.debtList;
                $scope.balancePopup.wrapper.addClass("k-window-poup");
                $scope.balancePopup.center().open();
            });
            
        });

        function refreshDebtorGrid() {
            //refreshSupplierDebtor
            $scope.$parent.$broadcast("refreshCustomer");
            //$scope.customer.debtListDS.read();
        }

        $scope.void = function () {            
            _msgBox.confirm($filter("stringFormat")(_m.balanceAdjustment_MsgDel, [$scope.adjust.Code]), _m.balanceAdjustment_TitleDel, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgBox.onConfirm = function () {
                _customers.deleteAdjustDebt({ Adjustment: $scope.adjust, customerId: $scope.customer.Id, CompareCode: $scope.customer.Code, CompareName: $scope.customer.Name }, function (r) {
                    _logger.success(r.Message);
                    refreshDebtorGrid();
                    $scope.cancel();
                }, function (er) {
                    _logger.error(getMessage(er));
                });
            };
        };

        $scope.update = function () {            
            if ($scope.adjust.Balance !== 0 && !$scope.adjust.Balance) {
                _logger.error($scope._l.customer_MsgErrorUnit);
                return;
            }
            if ($scope.AdjustmentDate > new Date()) {
                _logger.error($scope._l.invalidAdjustmentDate);
                return;
            }
            $scope.adjust.AdjustmentDate = $scope.AdjustmentDate ? $scope.AdjustmentDate : new Date();
            $scope.customer.Debt = $scope.customer.Debt ? $scope.customer.Debt : 0;
            //if (Math.abs($scope.adjust.Balance - $scope.customer.Debt) > 0.0000001) {
                $scope.adjust.Value = $scope.adjust.Balance - $scope.customer.Debt;

                _customers.adjustDebt({ Adjustment: $scope.adjust, customerId: $scope.customer.Id, CompareCode: $scope.customer.Code, CompareName: $scope.customer.Name, CompareBalance: $scope.customer.Debt, CompareAdjustmentDate: $scope.CompareAdjustmentDate, }, function () {
                    _logger.success($scope._m.globalSaveSuccess);
                    refreshDebtorGrid();
                    $scope.cancel();
                }, function (er) {
                    _logger.error(getMessage(er));
                });
            //} else {
            //    _logger.info($scope._l.customer_AccountNoChange);
            //}
        };

        $scope.cancel = function () {
            $scope.balancePopup.close();
        };

        $scope.onClose = function () {
            $scope.customer = null;
            $scope.adjust = null;
            $scope.dataSource = null;
        };
    }]).directive('kvCustomerImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages', '$rootScope',
    function (_session, _logger, $filter, _l, _m, $rootScope) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;
                    //$scope.IsReplaceExisting = true;
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                                _logger.error("Định dạng file không đúng, chỉ hỗ trợ đuôi: xlsx, xls");
                                e.preventDefault();
                            }
                        });
                        e.data = { isUpdateDebt: $scope.IsUpdateDebt };
                        $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
                    };

                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();
                        $scope.IsUpdateDebt = true;
                    };
                    var onSuccessImport = function (e) {
                        var data = e.response.Data;
                        //if ($scope.IsReplaceExisting) {
                        //$scope.$parent.cart.PurchaseOrderDetails = data;
                        //   $scope.$parent.pricebookDetails.dataSource.read();
                        //} else {
                        //    for(var v=0;v<data.length;v++ ){
                        //        $scope.$parent.cart.addDetail(data[v]);
                        //    }
                        //}
                        $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
                        $scope.importWindow.close();
                        $scope.$parent.customers.read();
                        refresh($scope.$parent);
                        //$scope.RefreshGrid();
                    };
                    var onImportError = function (e) {
                        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                            $scope.ImportError = $rootScope._m.sessionExpire;
                        } else {
                            if (e.XMLHttpRequest.responseText) {
                                $scope.ImportError = e.XMLHttpRequest.responseText;
                            } else {
                                $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                            }
                        }
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };

                    var onImportCancel = function (e) {
                    };
                    $scope.showPopup = function (id) {
                        $scope.IsUpdateDebt = true;
                        $scope.importWindow.wrapper.addClass("k-window-poup k-window-masstel k-window-importCustomer");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
                        $scope.importWindow.wrapper.find(".k-upload-status").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,

                        async: {
                            saveUrl: "/Files/ImportCustomer",
                            removeUrl: "/Files/Remove",
                            autoUpload: false
                        },

                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: "Chọn file dữ liệu",
                            uploadSelectedFiles: "Thực hiện",
                            statusUploading: "Đang xử lý dữ liệu...",
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }

                }
            ],
            templateUrl: _session.partialPath('customer-import.html')
        };
    }])
;
;
'use strict'
kvApp.controller('DamageItemCtrl', ['kvSession', '$scope', '$rootScope', 'damageItemStatus', 'damageItemStatusMap', 'kendofilter', '$filter', '$location', '$routeParams', 'logger', 'kvExportToExcel', 'DamageItemResource', 'kvConfirmBox', 'BranchResource', 'paymentMethods', 'paymentStatus','settings',
    function (_session, $scope, $rootScope, _orderStatus, _orderMap, _filter, $filter, $location, $routeParams, _logger, _export, _ordersvc, _msgBox, _branches, _paymentMethods, _paymentStatus, _setting) {
        $scope.pageSizes = pager.pageSizes;
        $scope.pageSize = 10;
        $scope.lblOtherTimeFilter = null;
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };
        //$scope.selectedInvoice = {Code: 'adfsdf'};
        // Init Data

        $scope.hasAdd = $scope._p.has("DamageItem_Create");
        $scope.searchLable = $scope._l.search_damageLbl;


        $scope.edit = function (id) {
            $location.path("/" + viewUrl.damageItems + "/" + id);
        };

        // For Detail View
        if ($("#templDetail").length > 0) {
            $scope.detailTemplate = kendo.template($("#templDetail").html());
        }
        // $scope.Invoicedata = {Code:"ABC"};
        $scope.statusMap = _orderMap;

        $scope.settings = _setting;
        $scope.bindedGrid;
        $scope.griddataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };

        $scope.export = function () {
            var filter = $scope.orders.reader.kvFilter;
            var columns = _export.getGridColumns("grdDamageItems");

            // export full description text
            for (var i = 0; i < columns.length; i++) {
                var col = columns[i];
                if (col.Field == "ShortDescription")
                    col.Field = "Description";
            }

            var type = "DamageItem";
            var fileName = "DanhSachXuatHuy";
            var data = { column: JSON.stringify(columns), req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);
        };
        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;

            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });
            //Order Detail


            //End Order Detail
            var hideTab = function (index) {
                $(tabship.data("kendoTabStrip").items()[index]).attr("style", "display:none");
            };

        };

        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }

        $scope.orderStatus = kvDropbox.orderStatus;
        if (!$scope.orderStatus) {
            $scope.orderStatus = [];
            for (var i in _orderStatus) {
                $scope.orderStatus.push({ key: i, value: _orderStatus[i] });
            }
        }


        //$scope.branchs = _session.branchs;
        $scope.branches = _branches.get({ Permission: 'DamageItem_Read' }, function () {
            $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
        });
        $scope.currentBranchId = _session.branch.Id;

        $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];
        $scope.grvdataBinding = function (arg) {
            if ($scope.branchids && $scope.branchids.length == 1) {
                arg.sender.hideColumn("Branch.Name");
            } else {
                arg.sender.showColumn("Branch.Name");
            }
            //if (!$scope._setting.SellAllowDeposit) {
            //    arg.sender.hideColumn("Status");
            //}
        };

        $scope.dateFilter.TimeRange = (kvDropbox.dateFilter) ? kvDropbox.dateFilter : 'alltime';
        var now = new Date();
        now = now.setHours(0, 0, 0, 0);
        var fromDate = new Date(now);
        var defStart = $scope.dateFilter.TimeRange === 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);

        $scope.dateFilter.StartDate = kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart);
        $scope.dateFilter.EndDate = kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now));

        function filterbyExtention() {
            var para = {};
            para.ProductKey = $scope.filterProduct;
            para.SupplierKey = $scope.filterCustomer;
            para.UserNameKey = $scope.filterUserName;
            para.SerialKey = $scope.filterSerial;
            return para;
        }
        // Bind data for Main Gridview
        $scope.orders = new kendo.data.DataSource({
            type: "odata",
            autoSync: false,
            transport: {
                read: {
                    url: "/api/damageItems?format=json&Includes=TotalQuantity&Includes=User&Includes=Branch",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: filterbyExtention
                }
            },

            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    if (response && response.Data) {
                        for (var i = 0 ; i < response.Data.length ; i++) {
                            var t = response.Data[i];
                            t.StatusValue = t.Status;
                            t.Status = _orderStatus[t.Status];
                            t.ShortDescription = $filter('truncateDesc')(t.Description);
                        }
                    }
                    return response;
                },
                model: {
                    fields: {
                        Code: { type: "string" },
                        TransDate: { type: "date" },
                        BranchName: { type: "string" },
                        Status: { type: "string" },

                    }
                }
            }
        });

        function initFilter() {
            var filter = [];
            $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
            if ($routeParams.Code) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
            }
            else {

                var values = $scope.branchids;
                var condition = [];
                if (values && values.length > 0) {
                    for (var k = 0; k < values.length; k++) {
                        if (parseInt(values[k]) > 0) {
                            condition.push(_filter.newCondition("BranchId", parseInt(values[k]), "eq"));
                        }
                    }
                    filter = _filter.append(filter, condition, "or");
                }

                if ($scope.dateFilter.TimeRange == 'other') {
                    condition = [];
                    if ($scope.dateFilter.StartDate) {

                        var todate = new Date($scope.dateFilter.EndDate);
                        condition.push(_filter.newCondition("TransDate", $scope.dateFilter.StartDate, "ge"));
                        condition.push(_filter.newCondition("TransDate", new Date(todate.DateAdd(1)), "lt"));
                    }
                    filter = _filter.append(filter, condition, "and");
                } else {
                    condition = [
                     _filter.newCondition("TransDate", $scope.dateFilter.TimeRange, "eq")
                    ];
                    filter = _filter.append(filter, condition, "or");
                }
                values = $scope.orderStatus;
                condition = [];
                var count = 0;
                for (var v = 0; v < values.length; v++) {
                    if (values[v].checked && parseInt(values[v].key) > 0) {
                        condition.push(_filter.newCondition("Status", parseInt(values[v].key), "eq"));
                        count++;
                    }
                }
                if (count > 0) {
                    filter = _filter.append(filter, condition, "or");
                }
            }


            return filter;
        }
        // End Detail
        // Function 
        $scope.refresh = function () {
            $scope.orders.pageSize(parseInt($scope.pageSize));
        };

        $scope.filterbyBranch = function () {
            var values = $scope.branchids;
            var condition = [];
            if (values && values.length > 0) {
                for (var k = 0; k < values.length; k++) {
                    if (parseInt(values[k]) > 0) {
                        condition.push(_filter.newCondition("BranchId", parseInt(values[k]), "eq"));
                    }
                }
                _filter.filter($scope.orders, condition, "or");
            } else {
                _filter.remove($scope.orders, "BranchId");
            }
        };

        $scope.filterbyStatus = function () {
            var values = $scope.orderStatus;
            var condition = [];
            var count = 0;
            //if (values.length > 0) {
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) > 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                    count++;
                }
            }
            if (count > 0) {
                _filter.filter($scope.orders, condition, "or");
            } else {
                _filter.remove($scope.orders, "Status");
            }
        };
        $scope.filterbyDescription = function () {
            if ($scope.filterDescription) {
                var condition = [
               _filter.newCondition("Description", $scope.filterDescription, "contains")
                ];
                _filter.filter($scope.orders, condition, "and");
            } else {
                _filter.remove($scope.orders, "Description");
            }
        };
        $scope.filterbyName = function () {
            if ($scope.filterName) {
                var condition = [
               _filter.newCondition("Code", $scope.filterName, "contains")
                ];
                _filter.filter($scope.orders, condition, "and");
            } else {
                _filter.remove($scope.orders, "Code");
            }
        };

        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
            var condition = [];
            if ($scope.dateFilter.StartDate) {
                var todate = new Date($scope.dateFilter.EndDate);
                condition.push(_filter.newCondition("TransDate", $scope.dateFilter.StartDate, "ge"));
                condition.push(_filter.newCondition("TransDate", new Date(todate.DateAdd(1)), "lt"));
            }
            _filter.filter($scope.orders, condition, "and");
            //$("#otherCheck").prettyCheckable("check");
            $scope.dateFilter.TimeRange = 'other';
            //$scope.dateFilterPopup.close();
        };
        $scope.filterbyDate = function () {
            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else {
                var condition = [
                      _filter.newCondition("TransDate", $scope.dateFilter.TimeRange, "eq")
                ];
                _filter.filter($scope.orders, condition, "or");
            }  
        };

        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            //remove any other filter 
            $scope.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
            $scope.refresh();
        }
    }])
.controller('DamageItemUpdateCtrl', ['$scope', 'logger', 'kendofilter', 'DamageItemResource', '$location', '$rootScope', '$routeParams', '$filter', 'kvPaymentDocType', 'kvConfirmBox', 'kvPaymentMethods', 'localCache', 'CommonServices', 'damageItemStatus', 'damageItemStatusMap', 'UserResource', 'BankAccountResource','$compile',    
    function ($scope, _logger, _filter, _orders, $location, $rootScope, $routeParams, $filter, paymentDocType, _msgBox, _paymentMethods, _localCache, common, _orderStatus, _orderMap, _users, _bankAccounts, $compile) {
        // $scope.payments = _paymentMethods;
        $scope.currentDate = new Date();
        $scope.orderMap = _orderMap;

        $scope.goTolist = function () {
            $location.path("/" + viewUrl.damageItems);
            refresh($scope);
        };
        function cancel() {
            _localCache.remove(keyStore, function () {
                $scope.goTolist();
            });
        };
        $scope.goBack = function () {
            if ($scope.cart.DamageDetails.length > 0 || $scope.cart.Code) {
                _msgBox.confirm($scope._l.purchaseorder_SaveChange, $scope._l.purchaseorder_SaveChangeTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo);
                _msgBox.onConfirm = function () {
                    $scope.saveData(false);
                };
                _msgBox.onCancel = function () {
                    cancel();
                };
            } else {
                cancel();
            }
        };
        function loadBuyers() {
            var r = _users.getDamageItemUser();
            r.$promise.then(function (result) {
                $scope.buyers = result;
                $scope.buyerOptions = {
                    dataSource: $scope.buyers.Data,
                    change: $scope.UpdateCart,
                    dataTextField: "GivenName",
                    dataValueField: "Id",
                    dataBound: function (e) {

                    }
                };
            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
        $scope.$on('refreshGridOnChangeBranch', loadBuyers);
        loadBuyers();
        var voidSale = function (isvoidPayment) {
            if ($scope.cart && $scope.cart.Code) {
                _orders.delete({ Id: $scope.cart.Id, IsVoidPayment: isvoidPayment }, function (data) {
                    _localCache.remove(keyStore, function () {
                        _logger.success($filter("stringFormat")($scope._m.voidSaleSuccessfully, [data.Code]));
                        $scope.goTolist();
                    });

                }, function (err) {
                    _logger.error(getMessage(err));
                });
            } else {
                _localCache.remove(keyStore, function () {
                    //_logger.success(data.Code);
                    $scope.goTolist();
                });
            }

        };
        $scope.void = function (item) {

        };
        var itemId = $routeParams.id;
        if (!angular.isNumber(Number(itemId)) && itemId != 'new') {
            $scope.goTolist();
            _logger.error($scope._l.infomationInvalid);
        }
        var keyStore = $filter("stringFormat")("DamageItem_{0}_{1}_{2}", [$scope.currentBranch.Id, $scope.currentUser.id, itemId]);
        // Edit Purchase Order
        $scope.paymentMethods = _paymentMethods;
        initData();

        // Add Product to Cart
        $scope.addProduct = function (data) {

            $scope.cart.addItem(data);
        };
        // Supplier
        $scope.UpdateCart = function () {
            $scope.cart.updateValue();
        };
        $scope.UpdateItemCart = function (item) {
            $scope.cart.updateItemValue(item);
        };
        $scope.UpdatePurchaseDate = function () {
            $scope.cart.PurchaseDate = this.value();
            $scope.cart.updateValue();
        };
        $scope.removeItem = function (id) {
            $scope.cart.removeItem(id);
        };
        $scope.changePayment = function (type) {
            $scope.cart.paymentMedthod = type;
        };
        $scope.saving = false;
        $scope.saveData = function (isComplete) {
            $("#LoadingPanel").show();
            $scope.saving = true;
            //var saveobj = new Cart($scope.cart);
            $scope.cart.UserId = $scope.cart.User.Id;
            _orders.save({ DamageItem: $scope.cart, Complete: isComplete }, function (data) {
                $scope.saving = true;
                _localCache.remove(keyStore, function () {
                    $scope.saving = false;
                    $("#LoadingPanel").hide();
                    _logger.success($filter("stringFormat")($scope._m.updatedSuccess, [$scope._l.damageItem, data.Code]));
                    $scope.goTolist();
                });

            }, function (err) {
                $("#LoadingPanel").hide();
                $scope.saving = false;
                _logger.error(getMessage(err));
            });
        };
        $scope.setCurrentRow = function (e) {
            $scope.currentRow = this.dataItem;

        };

        $scope.showpopup = function (id, idx) {
            var model = "serialModel" + id;
            var source = $scope["popupDS" + id];
            $scope["serialpopup"].showWindow(model, source, function (lst) {
                var currentItems = lst;
                var item = $scope.cart.DamageDetails[idx];
                //console.log(item);
                if (item && currentItems) {
                    item.Quantity = currentItems.length;
                    item.SerialNumbers = "";
                    for (var k = 0; k < currentItems.length ; k++) {
                        item.SerialNumbers += "," + currentItems[k].SerialNumber;
                    }
                    item.SerialNumbers = item.SerialNumbers.substring(1);

                    var multiSelect = $("#serial" + item.ProductId).data("kendoMultiSelect");
                    if (multiSelect) {
                        multiSelect.dataSource.filter({});
                        multiSelect.value(item.SerialNumbers.split(","));
                    }

                    $scope["serialModel" + item.ProductId] = item.SerialNumbers.split(',');

                    // update grid
                    var grid = $('#cartGrid').data('kendoGrid');
                    if (grid && grid.dataSource) {
                        var dataItem = grid.dataSource.data()[idx];
                        if (dataItem) {
                            dataItem.Quantity = currentItems.length;
                        }
                    }

                    var serialList = [];
                    for (var s = 0; s < lst.length; s++) {
                        serialList.push({ "text": lst[s].SerialNumber });
                    }
                    $scope["serials" + item.ProductId] = serialList;
                }

                $scope.cart.updateValue();
            });

        };

        $scope.cartGridoption = {
            dataSource: new kendo.data.DataSource({
                autoSync: false,
                data: $scope.cart.DamageDetails,
                schema: {
                    model: {
                        fields: {
                            ProductId: { type: "number" },
                            ProductName: { type: "string" },
                            Price: { type: "number" },
                            Quantity: { type: "number" },
                            Description: { type: "string" },
                        }
                    }
                },
                pageSize: 10
            }),
            pageable: true,
            columns: [
                        {
                            field: "ProductId",
                            title: " ",
                            headerAttributes: { "class": "tdDel" },
                            attributes: { "class": "txtC tdDel" },
                            template: "<a title=\"Xóa\"  ng-click=\"removeItem(dataItem)\" class=\"icon del\" >Del</a>"
                        },
                        { field: "Product.Code", title: $scope._l.product_Code, headerAttributes: { "class": "nowrap tdCode" }, attributes: { "class": "tdCode" }, format: "{0:c}" },
                        {
                            field: "Product.Name",
                            title: $scope._l.product_Name,
                            template: '#=Product.Name#<a class="txtN txtI fs11 dpb txtGray" href="javascript:void(0)" title="Cập nhật ghi chú" kv-popup-anchor="desTemplate" kv-placement="bottom" ng-click="setCurrentRow($event)"><span class="dpib veaM">{{dataItem.Description?dataItem.Description:"Ghi chú..."}}</span><span class="icon edit"><i class="fa fa-pencil-square-o"></i></span></a>'
                        },
                        {
                            field: "Quantity",
                            title: $scope._l.damageQuantity,
                            attributes: { "class": "tdSSL" },
                            headerAttributes: { "class": "tdSSL txtC" },
                            template: "<input type=\"text\" ng-disabled='dataItem.isSerialProduct' ng-class='dataItem.isSerialProduct?\"w100\":\"\"'  kv-auto-numeric=\"{isQuantity:!dataItem.isSerialProduct,vMin:0}\" ng-change=\"UpdateItemCart(dataItem)\" class=\"iptR txtR iptQty veaM\" ng-model=\"dataItem.Quantity\" />"
                        }

            ],
             dataBound: function (e) {
                $scope.emptyGridFix(e);

                // add serial input
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, row) {
                    //console.log(row);
                    //var popup = '<kv-enter-serial-popup kv-name="serialpopup' + row.ProductId + '" kv-model="serials' + row.ProductId + '" kv-source="ProductSerials' + row.ProductId + '"></kv-enter-serial-popup>';
                    var tagInput1 = angular.element($('<tr class="k-master-serial"><td></td><td colspan="2">' +
                                                        '<select id="serial' + row.ProductId + '" k-auto-close="false" k-filter="\'contains\'" k-data-source="popupDS' + row.ProductId + '" k-data-text-field="\'SerialNumber\'"' +
                                                            'k-data-value-field="\'SerialNumber\'" kendo-multi-select class="w100" ng-model="serials' + row.ProductId + '"' +
                                                            'k-on-change="changeSerials(kendoEvent,' + i + ')"></select>'  +
                                                      '</td><td class="txtR"><a ng-click="showpopup(' + row.ProductId + ', ' + i + ')" class="viewmore">' + $scope._l.viewmore + '</a></td></tr>'));

                    var tagInput = angular.element($('<tr class="k-master-serial"><td></td><td colspan="2">' +
                                                           '<tags-input id="tagRow' + row.ProductId + '" placeholder="Nhập số serial và Enter" ng-model="serials' + row.ProductId + '"' +
                                                                   ' add-from-autocomplete-only="true" on-tag-added="tagAdded($tag,' + i + ',' + row.ProductId + ')" on-tag-removed="tagAdded($tag,' + i + ',' + row.ProductId + ')">' +
                                                                   '<auto-complete has-alt-tag="false" source="popupDS' + row.ProductId + '"></auto-complete>' +
                                                           '</tags-input>' +
                                                           '</td><td class="txtR"><a ng-click="showpopup(' + row.ProductId + ',' + i + ')" class="viewmore">' + $scope._l.viewmore + '</a></td></tr>'));

                    if (row.ProductSerials) {
                        var ds = [];
                        for (var k = 0; k < row.ProductSerials.length; k++) {
                            ds.push({ "text": row.ProductSerials[k].SerialNumber, "SerialNumber": row.ProductSerials[k].SerialNumber });
                        }
                        row.tempProductSerials = ds;
                    }

                    $scope["popupDS" + row.ProductId] = row.tempProductSerials;
                    if (row.SerialNumbers) {
                        $scope["serials" + row.ProductId] = row.SerialNumbers.split(",");
                        $scope["serialModel" + row.ProductId] = row.SerialNumbers.split(",");
                    }

                    var el = $compile(tagInput)($scope);
                    if(row.Product.IsLotSerialControl)
                        $('tr[data-uid="' + row.uid + '"]').after(tagInput).addClass("k-serial");
                });
            },
            dataBinding:function(e){
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, t) {
                    if (t.Product.IsLotSerialControl)
                        t.isSerialProduct = true;
                });
            }
        };

        $scope.tagAdded = function (tag, idx, id) {
            var lst = $scope["serials" + id];
            var currentItems = "";
            for (var k = 0; k < lst.length ; k++) {
                currentItems += "," + lst[k].text;
            }
            if (currentItems.length > 0)
                currentItems = currentItems.substring(1);

            // add to datasource for popup
            $scope["serialModel" + id] = currentItems.split(",");

            $scope.updateSerialTags(currentItems.split(","), idx);
        }

        $scope.updateSerialTags = function (currentItems, idx) {
            var item = $scope.cart.DamageDetails[idx];
            currentItems = currentItems ? currentItems.filter(function (it) { return it.length > 0; }) : [];
            //console.log(item);
            if (item && currentItems) {
                item.Quantity = currentItems.length;
                item.SerialNumbers = "";
                for (var k = 0; k < currentItems.length ; k++) {
                    item.SerialNumbers += "," + currentItems[k];
                }
                item.SerialNumbers = item.SerialNumbers.substring(1);
                item.SelectedSerials = $scope["serials" + item.ProductId];

                // update grid
                var grid = $('#cartGrid').data('kendoGrid');
                if (grid && grid.dataSource) {
                    var dataItem = grid.dataSource.data()[idx];
                    if (dataItem) {
                        dataItem.Quantity = currentItems.length;
                    }
                }
            }

            $scope.cart.updateValue();
        }

        $scope.changeSerials = function (e, idx) {

            if (e.sender)
                var currentItems = e.sender.value();

            $scope.updateSerialTags(currentItems, idx);
        }

        function updateSerialList(updateSerialDS) {
            var items = $scope.cart.DamageDetails;
            for (var idx = 0; idx < items.length; idx++) {
                var itm = items[idx];

                if (itm.ProductSerials && updateSerialDS) {
                    var ss = itm.ProductSerials.split(",");
                    var ds = [];
                    for (var k = 0; k < ss.length; k++) {
                        ds.push({ "SerialNumber": ss[k], "text": ss[k] });
                    }
                    itm.ProductSerials = ds;
                }

                if (itm.Product.IsLotSerialControl && itm.SerialNumbers) {
                    var lst = itm.SerialNumbers.split(",");
                    itm.SelectedSerials = lst;
                }
            }
        }

        // Init Data
        function initData() {
            $scope.cart = new Cart();
            _localCache.get(keyStore, function (data) {
                var obj = !data ? data : JSON.parse(data);
                if (!isNaN(Number(itemId))) {
                    _orders.get({ damageItemId: itemId, Includes: ["DamageDetails", "TotalQuantity","User"] }, function (d) {
                        if (!obj || (!obj.ModifiedDate && !d.ModifiedDate && obj.Code != d.Code) || (obj.ModifiedDate && kendo.parseDate(obj.ModifiedDate).compareDateTime(kendo.parseDate(d.ModifiedDate)) != 0)) {
                            obj = d;
                            _orders.getDetails({ damageItemId: itemId, Includes: ["Product", "Product.ProductSerials"] }, function (detail) {
                                obj.DamageDetails = detail.Data;
                                $scope.cart = new Cart(obj);
                                updateSerialList(true);
                                refresh($scope);
                                if ($scope.cartGridoption) {
                                    $scope.cartGridoption.dataSource.data($scope.cart.DamageDetails);
                                }
                            },
                            function (err) {
                                _logger.error(getMessage(err));
                            });
                        } else {
                            _orders.getDetails({ damageItemId: itemId, Includes: ["Product", "Product.ProductSerials"] }, function (detail) {
                                d.DamageDetails = detail.Data;
                                // $scope.cart = new Cart(obj);
                                _msgBox.confirm($scope._l.purchaseorder_SaveChangeServer, $scope._l.purchaseorder_SaveChangeServerTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo, true);
                                _msgBox.onConfirm = function () {
                                    $scope.cart = new Cart(obj);
                                    updateSerialList(false);
                                    refresh($scope);
                                    if ($scope.cartGridoption) {
                                        $scope.cartGridoption.dataSource.data($scope.cart.DamageDetails);
                                    }
                                };
                                _msgBox.onCancel = function () {
                                    $scope.cart = new Cart(d);
                                    updateSerialList(true);
                                    refresh($scope);
                                    if ($scope.cartGridoption) {
                                        $scope.cartGridoption.dataSource.data($scope.cart.DamageDetails);
                                    }
                                };
                            });
                        }

                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                } else {
                    //        // Add new Purchase Order
                    if (obj && obj.DamageDetails.length > 0) {
                        _msgBox.confirm($scope._l.purchaseorder_SaveChangeServer, $scope._l.purchaseorder_SaveChangeServerCreateTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo, true);
                        _msgBox.onConfirm = function () {
                            $scope.cart = new Cart(obj);
                            $scope.cart.updateValue();
                            updateSerialList(false);

                            refresh($scope);
                            if ($scope.cartGridoption) {
                                $scope.cartGridoption.dataSource.data($scope.cart.DamageDetails);
                            }
                        };
                    }
                }
            });

        }
        function Cart(data) {
            this.Code = data ? data.Code : undefined;
            this.CompareCode = data ? data.Code : undefined;
            this.DamageDetails = (data && data.DamageDetails) ? data.DamageDetails : [];
            this.UserId = data ? data.UserId : $scope.currentUser.id;
            this.CompareUserId = data ? data.UserId : $scope.currentUser.id;
            this.User = data && data.User ? data.User : $scope.currentUser;
            this.TransDate = (data && data.TransDate) ? kendo.parseDate(data.TransDate) : undefined;
            this.CompareTransDate = (data && data.TransDate) ? kendo.parseDate(data.TransDate) : undefined;
            this.ModifiedDate = (data && data.ModifiedDate) ? kendo.parseDate(data.ModifiedDate) : undefined;
            this.Description = data ? data.Description : '';
            this.Branch = data ? data.Branch : $scope.currentBranch;
            this.Status = data ? data.Status : _orderMap.Draft;
            this.CompareStatus = data ? data.Status : _orderMap.Draft;
            this.StatusValue = _orderStatus[this.Status];
            this.Id = data ? data.Id : 0;
            this.TotalQuantity = data ? data.TotalQuantity : 0;

            //this.BalanceDue = data ? data.BalanceDue : 0;

            var cart = this;

            // this.updateValue();

        }
        function cartItem(product) {
            this.ProductId = product.Id;
            this.Product = { Name: product.Name, Code: product.Code, IsLotSerialControl: product.IsLotSerialControl };
            this.ProductName = product.Name;
            this.Description = "";

            if (!product.IsLotSerialControl)
                this.Quantity = 1;
            else
                this.Quantity = 0;

            if (product.ProductSerials) {
                product.ProductSerials = product.ProductSerials.filter(function (s) { return s.Status > 0 })
            }
            this.ProductSerials = product.ProductSerials;
            this.IsLotSerialControl = product.IsLotSerialControl;
        }

        Cart.prototype.updateItemValue = function (item) {
            var index = -1;
            if (item) {
                for (var i = 0; i < this.DamageDetails.length; i++) {
                    if (this.DamageDetails[i].ProductId === item.ProductId) {
                        index = i;
                        break;
                    }
                }
            }

            if (index > -1) {
                this.DamageDetails[index] = item;
            }
            this.updateValue();
        };
        Cart.prototype.updateValue = function () {

            this.SubTotal = 0;
            this.TotalQuantity = 0;
            if (this.DamageDetails) {
                for (var i = 0 ; i < this.DamageDetails.length ; i++) {
                    this.TotalQuantity += this.DamageDetails[i].Quantity;
                }
            }

            refresh($scope);
            //localStorage[keyStore] = JSON.stringify(this);

            // $("#gridCart").data().kendoGrid.refresh();
            var obj = JSON.stringify(this);
            _localCache.set(keyStore, obj);
        };
        Cart.prototype.removeItem = function (item) {
            for (var i = 0; i < this.DamageDetails.length ; i++) {
                if (this.DamageDetails[i].ProductId == item.ProductId) {
                    this.DamageDetails.splice(i, 1);
                    break;
                }
            }

            this.updateValue();
            if ($scope.cartGridoption) {
                $scope.cartGridoption.dataSource.data(this.DamageDetails);
            }
        };
        Cart.prototype.addDetail = function (detail) {
            var found = this.DamageDetails.filter(function (obj) {
                return obj.ProductId === detail.ProductId;
            });
            if (found.length > 0) {

                found[0].Quantity += detail.Quantity;
                //re-position to top 
                // this.DamageDetails.splice(i, 1);
                //  this.DamageDetails.unshift(found);
            } else {
                this.DamageDetails.push(detail);
            }

            this.updateValue();
            return found;
        };
        Cart.prototype.addItem = function (product) {
            var found = null;
            var item;
            for (var i = 0 ; i < this.DamageDetails.length; i++) {
                item = this.DamageDetails[i];
                if (item.ProductId === product.Id) {
                    if(!product.IsLotSerialControl)
                        item.Quantity++;
                    found = item;
                    //re-position to top 
                    this.DamageDetails.splice(i, 1);
                    this.DamageDetails.unshift(found);
                    break;
                }
            }
            if (!found) {
                item = new cartItem(product);
                this.DamageDetails.unshift(item);
                found = item;
            }

            this.updateValue();
            if ($scope.cartGridoption) {
                $scope.cartGridoption.dataSource.data(this.DamageDetails);
            }
            return found;
        };

        $scope.selectedDesChanged = function (item) {
            $scope.selectedItem = item;
            //check discount type 
        };

    }
]).directive('damageItemForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'UserResource', 'DamageItemResource', 'damageItemStatusMap', 'PrivilegeHelper','$compile','$timeout',
    function (_session, _l, emptyGridFix, _usersvc, _orders, _status, _p, $compile, $timeout) {
        return {
            restrict: 'E',
            scope: { dataSelectedProduct: '=kvDataSelectedProduct', dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {

                function loadDetail() {
                    scope.sellers = _usersvc.getDamageItemUser({ BranchId: scope.dataItem.BranchId });
                    scope.disabled = (scope.dataItem.StatusValue === _status.Cancel) || scope.noteditable || !(_p.has('DamageItem_Update') || (_p.has('DamageItem_Create') && scope.dataItem.StatusValue === _status.Draft));
                    scope.hasVoid = _p.has('DamageItem_Delete') && (scope.dataItem.StatusValue !== _status.Cancel);
                    scope.hasFinish = (scope.dataItem.StatusValue !== _status.Complete && scope.dataItem.StatusValue !== _status.Cancel) && (_p.has('DamageItem_Update') || _p.has('DamageItem_Create'));

                    var orderDetaildb = new kendo.data.DataSource(
                    {
                        type: "odata",
                        autoSync: true,
                        transport: {
                            read: {
                                url: "/api/damageitems/" + scope.dataItem.Id + "/details?format=json&Includes=Product",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        change: function (ob) {
                            scope.dataItem.DamageDetails = ob.items;
                        },                       
                        serverPaging: false,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            parse: function (response) {
                                //do not display negative discount value 
                                angular.forEach(response.Data, function (r) {
                                    r.Description = r.Description ? r.Description : '';
                                });
                                return response;
                            }
                        }
                    });

                    elem.find("#tblsub").empty();
                    elem.find("#tblsub").kendoGrid({
                        dataSource: orderDetaildb,
                        //pageable: { "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": _l.pagerInfo + _l.invenroty_Text } },
                        pageable:false,
                        dataBinding: emptyGridFix,
                        columns: [
                            { field: "Product.Code", title: _l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                            { field: "Product.FullName", title: _l.product_Name, headerAttributes: { "class": "tdNoneSub" }, attributes: { "class": "tdNoneSub" } },

                            { field: "Quantity", title: "SL Hủy", format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
                            //{ field: "Discount", title: $scope._l.discount, format: "{0:n0}", headerAttributes: { "class": "tdPhone txtC" }, attributes: { "class": "tdPhone txtC" } },
                            { field: "Description", title: _l.note }
                        ],
                        dataBound: function (e) {
                            // add serial input
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    scope["serials" + row.Id] = row.SerialNumbers.split(",");
                                    scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",");

                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    if (row.SerialNumbers.split(",").length > maxShow)
                                        scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",").slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')">' + scope._l.viewmore + '</a><kv-view-serial-popup kv-name="serialpopup' + row.Id + '" kv-source="serials' + row.Id + '"></kv-view-serial-popup>';
                                    var tags = angular.element($('<tr class="row-serial"><td colspan="4"><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag}}</li></ul>' + popup + '</td></tr>'));
                                    var el = $compile(tags)(scope);
                                
                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }

                                if (scope.dataSelectedProduct) {
                                    for (var j = 0; j < scope.dataSelectedProduct.length; j++) {
                                        if (row.ProductId == scope.dataSelectedProduct[j]) {
                                            $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                        }
                                    }
                                }
                            });
                            if ($('tr').hasClass('tr-currentSelected')) {
                                e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                            }
                        },
                    });
                }

                scope.showpopup = function (id) {
                    scope["serialpopup" + id].showWindow();
                }

                if (scope.dataItem) {
                    loadDetail();
                } else {
                    scope.$watch('dataItem.Id', function (val) {
                        if (val) {
                            //scope.itemData.Id = val;
                            loadDetail();
                        }
                    });
                }
            },
            controller: [
                '$scope', '$rootScope', 'kvMessages', 'DamageItemResource', 'logger', '$filter', 'kvConfirmBox', 'kvExportToExcel', 'kvPrinter', 'damageItemStatusMap', 'printTypeMap', '$location', 'settings',
                function ($scope, $rootScope, _m, _ordersvc, _logger, $filter, _msgbox, _export, _print, _map, _printTypeMap, $location, _setting) {
                    $scope._l = _l;
                    $scope.viewUrl = viewUrl;
                    $scope.statusMap = _map;
                    $scope.settings = _setting;

                    var voidSale = function () {


                        _ordersvc.delete({ Id: $scope.dataItem.Id, CompareDamageItemCode: $scope.dataItem.Code, CompareStatus: $scope.dataItem.StatusValue }, function (data) {
                            _logger.success($filter("stringFormat")(_m.damageItem_MsgDelSuccessfully, [data.Code]));
                            execCb($scope.onSave, $scope.dataItem);

                        }, function (err) {
                            _logger.error(getMessage(err));
                        });


                    };
                    $scope.voidOrder = function (item) {

                        var ivmsg = _msgbox.confirm($filter("stringFormat")($scope._l.damageItem_MsgDel, [item.Code]), $scope._l.titleVoidDamageItem, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        ivmsg.confirm = function () {
                            voidSale();
                        };


                    };
                    $scope.edit = function () {
                        $location.path("/" + viewUrl.damageItems + "/" + $scope.dataItem.Id);
                    };

                    $scope.finishOrder = function () {
                        _ordersvc.save({ DamageItem: { Id: $scope.dataItem.Id }, Complete: true }, function (data) {
                            _logger.success($filter("stringFormat")(_m.orderCompleted, [data.Code]));
                            execCb($scope.onSave, $scope.dataItem);
                        }, function (err) {
                            _logger.error(getMessage(err));
                        });
                    };
                    $scope.exportDetail = function () {
                        var id = $scope.dataItem.Id;
                        var type = "DamageDetail";
                        var fileName = "ChiTietXuatHuy_" + $scope.dataItem.Code.replace(/\>/g, ' ');
                        var data = { req: id };
                        _export.toExcel(type, fileName, data);
                    };
                    $scope.printContent = function () {                    
                        _print.printfromtype("DamageItem", $scope.dataItem);
                    };
                    $scope.update = function () {
                        save();
                    };
                    function save() {
                        var obj = $scope.dataItem;
                        //  obj.Status = obj.StatusValue;
                        var r = _ordersvc.save({ DamageItem: obj, ListUpdate: true });
                        r.$promise.then(callbackSuccess, callbackFail);
                    }

                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.damageItem, data.Code]));
                        execCb($scope.onSave, $scope.dataItem);
                    }

                }
            ],
            templateUrl: _session.partialPath('damageitem-form.html')
        };
    }])
.directive('kvDamageItemPopup', ['kvSession', '$rootScope', 'logger', 'UserResource', 'DamageItemResource', 'kvConfirmBox', '$filter', 'kvLabel', 'kvMessages', 'damageItemStatus', '$location',
    function (_session, $rootScope, _logger, _usersvc, _invoicesvc, _msgbox, $filter, _l, _m, _status, $location) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;

                    $scope.window = {
                        openDetail: function (data) {
                            $scope.wdPurchaseOrder.title($filter("stringFormat")("{0}", [_l.damageItem_Unit]));
                            $scope.dataItem = data;
                            $scope.wdPurchaseOrder.wrapper.addClass("k-window-poup k-window-fix k-window-purchaseOrderDetail");
                            $scope.wdPurchaseOrder.center().open();

                            //refresh($scope);
                        }
                    };
                 
                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.invoice, data.Code]));
                        //$scope.refreshData();
                        execCb($scope.onSave);
                        $scope.wdInvoiceDetail.close();


                    }
                   
                    $scope.dispose = function () {
                        $scope.dataItem = null;
                        //$scope.cursellers = null;
                        $scope.invoices = null;
                        $scope.onSave = null;
                        $scope.selectedProduct = null;
                    };

                    this.showInvoice = function (id, selectedProduct, onSaveHandler) {
                        $scope.onSave = onSaveHandler;
                        $scope.selectedProduct = selectedProduct;
                        //Includes=Branch&Includes=Total&Includes=SubTotal&Includes=Supplier&Includes=User
                        var inv = _invoicesvc.get({ damageItemId: id, Includes: ["Branch", "TotalQuantity", "User"] });

                        inv.$promise.then(function (data) {
                            //  $scope.hasPayment = (data.PaymentCode != null);
                            //console.log('c0 ' + data.CreatedBy + ' code = ' + data.Code + ' id = ' + data.Id);
                            data.CreatedDate = kendo.parseDate(data.CreatedDate);
                            data.Status = _status[data.Status];
                            $scope.window.openDetail(data);
                           


                        });

                        $scope.loadRowDetail(id);
                    };


                    //inject to parent 
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }

                }
            ],
            templateUrl: _session.partialPath('damageItem-popup.html')
        };
    }])
;;
'use strict'
kvApp.controller('DashBoardCtrl', [
    '$scope', '$rootScope', 'logger', 'StreamResource', 'InvoiceResource', 'ReturnResource', 'kendofilter', 'kvSession', 'invoiceStatusMap', 'ChartHelper', 'CommonServices', '$filter', '$location', 'UserResource', '$timeout', 'RetailerResource',
    function($scope, $rootScope, _logger, _stream, _invoices, _returns, _filter, _session, _invoiceStatusMap, _chartHelper, _common, $filter, $location, _users, $timeout, _retailer) {
        // get ads banner in website
        $scope.AdsArticle = '';
        $.get('/Home/GetAdsArticle', function(res) {
            $scope.AdsArticle = res.result;
        });

        // check dashboard permission
        $scope.hasDashboardPermission = $scope._p.has("DashBoard_Read");

        var renderMoment = function() {
            if ($scope.activities && $scope.activities.length > 0 && $scope.currentTime) {
                angular.forEach($scope.activities, function(a) {
                    var ts = $filter('parseDate')(a.Timestamp);
                    a.fromNow = moment(ts).from($scope.currentTime);
                });
            }
        }

        $scope.viewEmployee = function(userId) {
            if (_session.user.id == userId) {
                //$location.url('/' + viewUrl.account );
                $rootScope.$broadcast(app.events.showAccountForm);
            } else {
                //$location.url('/' + viewUrl.employeeList + '/' + userId);
                _users.get({ userId: userId }, function(data) {
                    $rootScope.$broadcast(app.events.showViewUserForm, data);
                })
            }
        }

        $scope.activities = _stream.query(renderMoment);
        $scope.stats = {}

        function getFilterParam(startDate, endDate) {
            var filters = [];
            _filter.append(filters, [_filter.newCondition('BranchId', _session.branch.id, 'eq')], 'and');
            _filter.append(filters, [_filter.newCondition('Status', parseInt(_invoiceStatusMap.Issued, 10), 'eq'), _filter.newCondition('Status', parseInt(_invoiceStatusMap.Pending, 10), 'eq')], 'or');

            var condition = [];
            condition.push(_filter.newCondition("PurchaseDate", startDate.IgnoreTime(), "gte"));
            condition.push(_filter.newCondition("PurchaseDate", endDate.IgnoreTime().DateAdd(1), "lt"));
            _filter.append(filters, condition, 'and');
            return _filter.toOdataFilter({ filters: filters, logic: 'and' });
        }

        function getReturnFilterParam(startDate, endDate) {
            var filters = [];
            _filter.append(filters, [_filter.newCondition('BranchId', _session.branch.id, 'eq')], 'and');
            _filter.append(filters, [_filter.newCondition('Status', parseInt(_invoiceStatusMap.Issued, 10), 'eq')], 'and');

            var condition = [];
            condition.push(_filter.newCondition("ReturnDate", startDate.IgnoreTime(), "gte"));
            condition.push(_filter.newCondition("ReturnDate", endDate.IgnoreTime().DateAdd(1), "lt"));
            _filter.append(filters, condition, 'and');

            condition.push(_filter.newCondition("ReturnDate", endDate.IgnoreTime().DateAdd(1), "lt"));
            _filter.append(filters, condition, 'and');
            return _filter.toOdataFilter({ filters: filters, logic: 'and' });
        }

        function getSaleToday(onDone) {
            _invoices.get({
                '$filter': getFilterParam($scope.today, $scope.today),
                TotalValueOnly: true
            }, function(result) {
                $scope.stats.saleToday = result.Total1Value - result.Total3Value;
                $scope.stats.saleCountToday = result.Total;
                execCb(onDone);
            }, onDone);
        }

        function getSaleYesterday(onDone) {
            if ($scope.stats.saleToday) {
                _invoices.get({
                    '$filter': getFilterParam($scope.today.DateAdd(-1), $scope.today.DateAdd(-1)),
                    TotalValueOnly: true
                }, function(result) {
                    var r = result.Total1Value - result.Total3Value;
                    if (r && $scope.stats.saleToday) {
                        $scope.stats.saleYesterday = (($scope.stats.saleToday - r) / r) * 100;
                    }
                    execCb(onDone);
                }, onDone)
            } else {
                execCb(onDone);
            }
        }

        function getSaleThisMonth(onDone) {
            _invoices.get({
                '$filter': getFilterParam($scope.today.GetfirstDayOfMonth(), $scope.today),
                TotalValueOnly: true
            }, function(result) {
                $scope.stats.saleThisMonth = result.Total1Value - result.Total3Value;
                execCb(onDone);
            }, onDone)
        }

        function getSaleLastMonth(onDone) {
            if ($scope.stats.saleThisMonth) {
                var d = $scope.today.MonthAdd(-1);
                _invoices.get({
                    '$filter': getFilterParam(d.GetfirstDayOfMonth(), d),
                    TotalValueOnly: true
                }, function(result) {
                    //$scope.stats.saleLastMonth = result.TotalValue; 
                    if (result.Total1Value && $scope.stats.saleThisMonth) {
                        $scope.stats.saleLastMonth = (($scope.stats.saleThisMonth - result.Total1Value) / result.Total1Value) * 100;
                    }
                    execCb(onDone);
                }, onDone);
            } else {
                execCb(onDone);
            }
        }

        function getReturnToday(onDone) {
            _returns.get({
                '$filter': getReturnFilterParam($scope.today, $scope.today),
                ForSummaryRow: true,
                Includes: ['TotalPayment']
            }, function(result) {
                $scope.stats.returnToday = result.Data[0].TotalReturn - result.Data[0].ReturnDiscount;
                $scope.stats.returnCountToday = result.Total;
                execCb(onDone);
            }, onDone);
        }

        _common.getTime(function (today) {
            $scope.today = today.IgnoreTime();
            $scope.currentTime = today;
            executeSerially([getSaleToday, getSaleYesterday, getSaleThisMonth, getSaleLastMonth, getReturnToday], null, null);
            renderMoment();
        }, function () {

        });

        //time range
        $scope.RevenueOptions = [
            { "value": "today", "text": $scope._l.report_sortDay },
            { "value": "yesterday", "text": $scope._l.report_sortYesterday },
            { "value": "7day", "text": $scope._l.report_sort7Day },
            { "value": "month", "text": $scope._l.report_sortMonth },
            { "value": "lastmonth", "text": $scope._l.report_sortMonthBefore }
        ];

        // chart options
        function loadChartTime() {
            try {
                var defaultRange = 'month';
                $scope.revenueTime = localStorage.getItem("dashBoardRevenue") ? localStorage.getItem("dashBoardRevenue") : defaultRange;
                $scope.revenueBranchTime = localStorage.getItem("dashBoardRevenueBranch") ? localStorage.getItem("dashBoardRevenueBranch") : defaultRange;
                $scope.topProductTime = localStorage.getItem("dashBoardTopProduct") ? localStorage.getItem("dashBoardTopProduct") : defaultRange;
            } catch (ex) {
                // browser does not support local storage - ignore
            }
        }

        loadChartTime();

        /* RevenueChart */
        var options = _chartHelper.getSaleColOptions();
        options.dataBound = function(e) {
            var totalValue7 = 0;
            var srs = e.sender.options.series;
            if (srs.length > 0) {
                var srData = srs[0].data;
                for (var k = 0; k < srData.length; k++) {
                    totalValue7 += srData[k].Total ? srData[k].Total : 0;
                }
            }
            $('#TotalValue7').text(kendo.toString(totalValue7, 'n0'));
        }
        options.series = [
            {
                type: "column",
                field: "Value",
                name: "#= group.value #"
            }
        ];
        options.legend = {
            position: "bottom"
        };
        //CUONGTL: fix for load only one time chart
        options.autoBind = false;
        $scope.saleByDayCols = options;

        function getRevenueChartParams() {
            var params = {
                //BranchIds: [_session.branch.Id],
                TimeRange: $scope.revenueTime,
                timeStamp: new Date()
            };
            return { Filter: JSON.stringify(params) };
        }

        $scope.getSaleChartParseFunc = function(chartObj) {
            return function(response) {
                var max = 0;
                // var series = [], max = 0, seriesKey = {};
                var positiveMax = 0, negativeMax = 0;

                angular.forEach(response, function(r) {

                    var temp = 0, ts = $filter('parseDate')(r.Subject);
                    var tempPos = 0, tempNeg = 0;

                    r.Subject = ts && r.Subject.indexOf("/") > -1 ? $filter('date')(ts, "dd/MM") : r.Subject;
                    r.Date = ts;


                    temp = Math.abs(r.Value);


                    if (r.Total > 0)
                        tempPos += r.Total;
                    else
                        tempNeg += Math.abs(r.Total);

                    //console.log(r.ts);
                    max = max > temp ? max : temp;

                    positiveMax = positiveMax > tempPos ? positiveMax : tempPos;
                    negativeMax = negativeMax > tempNeg ? negativeMax : tempNeg;

                });


                //update major unit 

                var chart = typeof (chartObj) == 'function' ? chartObj.call(null) : chartObj;
                var maxval = _chartHelper.caliberateMax(positiveMax);
                var minval = -_chartHelper.caliberateMax(negativeMax, max);
                var unit = _chartHelper.caliberate(maxval);
                if (chart) {
                    chart.setOptions({
                        valueAxis: {
                            max: maxval,
                            min: minval,
                            majorUnit: unit
                        },
                        RangeMax: max,
                        PosMax: positiveMax,
                        NegMax: negativeMax
                    });
                } else {
                    //$scope.saleByDayCols
                    $scope.saleByDayCols.valueAxis.min = minval;
                    $scope.saleByDayCols.valueAxis.max = maxval;
                    $scope.saleByDayCols.valueAxis.majorUnit = unit;
                    $scope.saleByDayCols.RangeMax = max;
                    $scope.saleByDayCols.PosMaxmax = positiveMax;
                    $scope.saleByDayCols.NegMax = negativeMax;
                }


                //sort response 
                //if (response && response.length > 0 && response[0].ts)
                //  response.sort(function (a, b) { return a.ts - b.ts; });
                //console.log(response);
                return response;
            }
        }
        var RevenueDs = {
            transport: {
                read: {
                    url: "/api/charts/sale/?format=json&IsDashboard=true&viewType=PurchaseDate",
                    dataType: "json",
                    data: getRevenueChartParams
                }
            },
            schema: {
                parse: function(response) {
                    if (!$scope.saleDayChart) {
                        $timeout(function() {}, 100);
                    }
                    $scope.getSaleChartParseFunc($scope.saleDayChart).call(this, response);
                    return response;
                }
            },
            sort: {
                field: "Date",
                dir: "asc"
            },
            group: {
                field: "Group"
            }
        };
        if (!$scope.saleDayChart) {
            options.dataSource = new kendo.data.DataSource(RevenueDs);
        }

        $scope.refreshRevenueChart = function() {
            try {
                for (var i = 0; i < $scope.RevenueOptions.length; i++) {
                    if ($scope.RevenueOptions[i].value == $scope.revenueTime) {
                        $('#RevenueTitle').text($scope._l.dashboard_Today + " " + $scope.RevenueOptions[i].text);
                        break;
                    }
                }
                localStorage.setItem("dashBoardRevenue", $scope.revenueTime);
            } catch (ex) {
            }
            $scope.saleByDayCols.dataSource.read();
        }
        $scope.refreshRevenueChart();

        /* BranchChart */
        var pieOptions = _chartHelper.getBranchChartOptions();
        pieOptions.dataBound = function(e) {
            var totalValueBranch = 0;
            var srs = e.sender.options.series;
            if (srs.length > 0) {
                var srData = srs[0].data;
                for (var k = 0; k < srData.length; k++) {
                    if (srData[k].hide != true) {
                        totalValueBranch += srData[k].Value ? srData[k].Value : 0;
                    }
                }
            }
            $('#TotalValueBranch').text(kendo.toString(totalValueBranch, 'n0'));
        }
        pieOptions.legend = {
            position: "bottom"
        };

        //CUONGTL: fix for load only one time chart
        pieOptions.autoBind = false;
        pieOptions.legendItemClick = function (e) {
            try {
                var idx = e.pointIndex;
                var srs = e.sender.options.series;
                if (srs.length > 0) {
                    var srData = srs[0].data;
                    if (srData[idx].visible == false)
                        srData[idx].hide = false; // change to show
                    else
                        srData[idx].hide = true; // change to hide 
                }
                //refresh
                e.sender.refresh();
            } catch (err) {
                console.log(err);
            }
        };

        function getBranchChartParams() {
            var params = {
                //BranchIds: [_session.branch.Id],
                TimeRange: $scope.revenueBranchTime,
                timeStamp: new Date()
            };
            return { Filter: JSON.stringify(params) };
        }

        $scope.branchPie = pieOptions;
        var BranchDs = {
            transport: {
                read: {
                    url: "/api/charts/sale/?format=json&IsDashboard=true&viewType=Branch",
                    dataType: "json",
                    data: getBranchChartParams
                }
            },
            //requestEnd: function (e) {
            //    if (e.response.length <= 0) {
            //        $("#divBranchPie").hide();
            //    } else {
            //        $("#divBranchPie").show();
            //    }
            //},
            sort: {
                field: "Subject",
                dir: "asc"
            }
        };
        pieOptions.dataSource = new kendo.data.DataSource(BranchDs);

        $scope.refreshRevenueBranchChart = function() {
            try {
                for (var i = 0; i < $scope.RevenueOptions.length; i++) {
                    if ($scope.RevenueOptions[i].value == $scope.revenueBranchTime) {
                        $('#RevenueBranchTitle').text($scope._l.report_RevenueBranch + " " + $scope.RevenueOptions[i].text);
                        break;
                    }
                }
                localStorage.setItem("dashBoardRevenueBranch", $scope.revenueBranchTime);
            } catch (ex) {
            }
            $scope.branchPie.dataSource.read();
        }
        $scope.refreshRevenueBranchChart();

        /* TopProductChart */
        var topProductOptions = _chartHelper.getTopProductOptions();
        topProductOptions.series = [
            {
                field: "Value",
                name: "Subject"
            }
        ];
        //CUONGTL: fix for load only one time chart
        topProductOptions.autoBind = false;
        //topProductOptions.series = [
        //    {
        //        type: "bar",
        //        field: "Value",
        //        name: "#= group.value #"
        //    }
        //];
        function getProductChartParams() {
            var params = {
                //BranchIds: [_session.branch.Id],
                TimeRange: $scope.topProductTime,
                timeStamp: new Date()
            };
            return { Filter: JSON.stringify(params) };
        }

        function getResponseHandler(chart) {
            return function(response) {

                var max = response.reduce(function(ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                chart = typeof chart === 'function' ? chart.call(null) : chart;
                var unit = _chartHelper.caliberate(max);
                var maxval = _chartHelper.caliberateMax(max);
                maxval = maxval <= max ? max + unit : maxval;
                if (chart) {

                    chart.setOptions({
                        valueAxis: {
                            max: maxval,
                            majorUnit: unit
                        }
                    });
                } else {
                    $scope.topProductChartOptions.valueAxis.max = maxval;
                    $scope.topProductChartOptions.valueAxis.majorUnit = unit;
                }

                return response;
            }
        }

        var ProductDs = {
            transport: {
                read: {
                    url: "/api/charts/product/?format=json&IsDashboard=true&viewType=ProductBySale",
                    dataType: "json",
                    data: getProductChartParams
                }
            },
            schema: {
                parse: function(response) {
                    if (!$scope.topProductChart) {
                        $timeout(function() {}, 100);
                    }
                    getResponseHandler($scope.topProductChart).call(this, response);
                    return response;
                }
            },
            sort: {
                field: "Value",
                dir: "desc"
            },
            group: {
                field: "Group"
            }
        };
        $scope.topProductChartOptions = topProductOptions;
        topProductOptions.dataSource = new kendo.data.DataSource(ProductDs);

        $scope.refreshTopProductChart = function() {
            try {
                for (var i = 0; i < $scope.RevenueOptions.length; i++) {
                    if ($scope.RevenueOptions[i].value == $scope.topProductTime) {
                        $('#topProductTitle').text($scope._l.dashboard_Top20Month + " " + $scope.RevenueOptions[i].text);
                        break;
                    }
                }
                localStorage.setItem("dashBoardTopProduct", $scope.topProductTime);
            } catch (ex) {
            }
            $scope.topProductChartOptions.dataSource.read();
        }
        $scope.refreshTopProductChart();

        $scope.refer = {
            CustomerName: "",
            CustomerPhone: ""
        };

        $scope.showReferPopup = function() {
            $scope.wdReferalCustomer.wrapper.addClass('k-window-poup k-window-masstel k-window-referal');
            $scope.wdReferalCustomer.open().center();
        };

        $scope.submitReferInfo = function () {
            
            if (!$scope.refer.CustomerName || $scope.refer.CustomerName.length === 0 || !$scope.refer.CustomerPhone || $scope.refer.CustomerPhone.length === 0) {
                _logger.error("Vui lòng nhập đầy đủ thông tin trước khi giới thiệu");
                return;
            }

            //if (!(/^\s*(?:\+?(\d{1,3}))?([-. (]*(\d{3})[-. )]*)?((\d{3})[-. ]*(\d{2,4})(?:[-.x ]*(\d+))?)\s*$/mg.test($scope.refer.CustomerPhone))) {
            //    _logger.error("Số điện thoại nhập vào không chính xác");
            //    return;
            //}

            _retailer.referralCustomer($scope.refer, function (resp) {
                $scope.refer = {
                    CustomerName: "",
                    CustomerPhone: ""
                };
                _logger.success(resp.Message);
                $scope.wdReferalCustomer.close();
            }, function (err) {
                _logger.error(getMessage(err));
            });
        };
    }
]);;
'use strict';
//#region DeliveryPartnerCtrl
kvApp.controller('DeliveryPartnerCtrl', ['$scope', 'logger', 'kvMessages', 'kendofilter', '$location', '$rootScope', '$routeParams', '$filter', 'kvConfirmBox', 'kvExportToExcel', 'kvSession', 'PartnerDeliveryResource', 'invoiceStatus', 'kvPaymentDocType', "$kWindow", "PartnerDeliveryGroupResource",
    function ($scope, _logger, _m, _filter, $location, $rootScope, $routeParams, $filter, _msgBox, _export, _session, _partnerDeliveryResource, _invoiceStatus, paymentDocType, $kWindow, PartnerDeliveryGroupResource) {
        //#region Group functions
        $scope.RefreshGrid = function (isall) {
            if (isall) {
                $scope.comboGroup.dataSource.read();
            }
            $scope.dpDataSource.read();
        };
        $scope.onChange = function (e) {
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedGroup = dataItem;
            $scope.RefreshGrid();
        };
        $scope.onCascade = function (e) {
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedGroup = dataItem;
            $scope.selectedGroupId = dataItem.Id;
        };

        $scope.selectedGroupId = 0;
        $scope.comboGroup = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                transport: {
                    read: {
                        url: "/api/partnerdelivery/group?IsFilter=true",
                        dataType: "json"
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total"
                }
            }),
            placeholder: $scope._l.deliveryPartner_ChooseGroup + " ...",
            dataTextField: "Name",
            dataValueField: "Id",
            valuePrimitive: true,
            change: $scope.onChange,
            cascade: $scope.onCascade
        };
        $scope.AddGroup = function () {

            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: $scope._l.deliveryPartner_GroupAddTitle,
                    resizable: false,
                    draggable: true,
                    pinned: true,
                    width: 560,
                    position: {
                        top: 100
                    },
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-masstel k-window-deliveryPartner");
                        this.center();
                    }
                },
                template: '<kv-partner-delivery-group-form kv-on-save="onSave(group)" kv-on-cancel="onCancel()"></kv-partner-delivery-group-form>',
                controller: ["$scope", "$windowInstance",  function ($scope, $windowInstance) {

                    $scope.onSave = function (group) {
                        $windowInstance.close(group);
                    };

                    $scope.onCancel = function () {
                        $windowInstance.close(false);
                    };
                }]
            });

            wdInstance.result.then(function (resp) {
                if (angular.isObject(resp) && resp) {
                    //fix for add
                    delete resp.$resolve;
                    delete resp.$resolved;
                    delete resp.$promise;

                    $scope.ddlSelectGroup.dataSource.add(resp);
                    $scope.selectedGroup = resp;
                    $scope.selectedGroupId = resp.Id;
                    $scope.RefreshGrid(true);
                }
            });
        };

        $scope.EditGroup = function () {
            if ($scope.selectedGroupId > 0) {
                PartnerDeliveryGroupResource.get({ groupId: $scope.selectedGroupId }, function (data) {
                    var wdInstance = $kWindow.open({
                        options: {
                            modal: true,
                            title: $scope._l.customer_GroupEditTitle,
                            resizable: false,
                            draggable: true,
                            pinned: true,
                            width: 560,
                            visible: false,
                            open: function () {
                                this.wrapper.addClass("k-window-poup");
                            }
                        },
                        template: '<kv-partner-delivery-group-form kv-group-data="groupData" kv-on-save="onSave(group)" kv-on-delete="onDelete(group)" kv-on-cancel="onCancel()"></kv-partner-delivery-group-form>',
                        resolve: {
                            deliveryPartnerGroupData: function () {
                                return data;
                            }
                        },
                        controller: ["$scope", "$windowInstance", "deliveryPartnerGroupData", function ($scope, $windowInstance, deliveryPartnerGroupData) {

                            init();

                            function init() {
                                $scope.groupData = deliveryPartnerGroupData;
                            };

                            $scope.onSave = function (group) {
                                $windowInstance.close(group);
                            };

                            $scope.onCancel = function () {
                                $windowInstance.close(false);
                            };

                            $scope.onDelete = function (group) {
                                group.Id = 0;
                                $windowInstance.close(group);
                            };
                        }]
                    });

                    wdInstance.result.then(function (resp) {
                        if (angular.isObject(resp) && resp) {
                            $scope.selectedGroup = resp;
                            $scope.selectedGroupId = resp.Id;
                            $scope.RefreshGrid(true);
                        }
                    });
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            }
            else {
                _logger.error($scope._l.deliveryPartner_msgErrorInfo);
            }
        };
        function updateViewOnDebtChanged() {
            setTimeout(function () { $scope.dpDataSource.read(); }, 500);
        }
        //#endregion

        //#region Config pageSize
        $scope.pageSize = pager.defaultList;
        $scope.pageSizes = pager.pageSizes;
        //#endregion

        //#region Assign Permission
        var rights = window.rights = $scope.rights = {};
        
        $scope.$on('$destroy', function () {
            //detach those variable from window obj
            window.rights = null;
            
        });
        rights.canUpdate = $scope._p.has('PartnerDelivery_Update');
        rights.canImport = $scope._p.has('PartnerDelivery_Import');
        rights.canExport = $scope._p.has('PartnerDelivery_Export');
        rights.canCreate = $scope._p.has('PartnerDelivery_Create');
        rights.canDelete = $scope._p.has('PartnerDelivery_Delete');
        rights.canViewInvoice = $scope._p.has('Invoice_Read')
            || $scope._p.has('PartnerDelivery_Read')
            || $scope._p.has('PartnerDelivery_Export')
            || $scope._p.has('PartnerDelivery_Import')
            || $scope._p.has('PartnerDelivery_Create')
            || $scope._p.has('PartnerDelivery_Update');
        rights.canViewDebt = $scope._p.has('DeliveryAdjustment_Read') || $scope._p.has('PartnerDelivery_Export');
        rights.canAdjustDebt = $scope._p.has('DeliveryAdjustment_Create');
        rights.canCreatePayment = $scope._p.has('DeliveryAdjustment_Create');
        
        //#endregion

        //#reigon Helper
        $scope.showInvoiceDetail = function (data) {
            $location.url('/' + viewUrl.invoiceList + '?code=' + data.code);
            //$scope.invoicePopup.showInvoice(data.id);
        };
        $scope.refresh = function () {
            $scope.dpDataSource.pageSize(parseInt($scope.pageSize));
        };
        $scope.invStateList = [];
        var ivs;
        for (ivs in _invoiceStatus) {
            if (_invoiceStatus.hasOwnProperty(ivs)) {
                $scope.invStateList.push({ Id: ivs, Name: _invoiceStatus[ivs] });
            }
        }      
        //#endregion

        //#region Add, Import, Export
        $scope.addDeliveryPartner = function () {
            $rootScope.$broadcast(app.events.showDeliveryPartnerForm, null);
        };
        $scope.import = function () {
            $scope.importDeliveryPartnerPopup.showPopup();
        };
        $scope.export = function () {
            var filter = $scope.dpDataSource.reader.kvFilter;
            filter.EndDate = kendo.parseDate(filter.EndDate);
            filter.StartDate = kendo.parseDate(filter.StartDate);
            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;
            var type = "PartnerDelivery";
            var fileName = "DanhSachDoiTacGiaoHang";
            var data = { req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);
        };
        //#endregion

        //#region dynamic column
        $scope.bindedGrid;
        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };
        //#endregion

        //#region Filter
        //init
        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };

        $scope.dpFilter = { dateRange: 'all' };
        //var now = new Date();
        //now = now.setHours(0, 0, 0, 0);
        //var fromDate = new Date(now);
        //var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);
        //$scope.dateFilterRange = {
        //    fromDate: kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart),
        //    toDate: kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now))
        //};
        
        var initFilter = function () {
            if ($routeParams.Code || $routeParams.code) {
                $scope.dpFilter.Code = $routeParams.Code || $routeParams.code;
                return [_filter.newCondition('Code', $scope.dpFilter.Code, 'contains')];
            }
            return [];
        };
        var getDeliveryPartnerId = function(id) {
            var param = {};
            param.DeliveryPartnerId = id;
            param.DateFilterType = $scope.dateFilter.TimeRange;
            if (param.DateFilterType === 'other') {
                if ($scope.dateFilter.StartDate) {
                    param.StartDate = $scope.dateFilter.StartDate.toISOString();
                }
                if ($scope.dateFilter.EndDate) {
                    param.EndDate = $scope.dateFilter.EndDate;
                    param.EndDate = new Date(param.EndDate.DateAdd(1)).toISOString();
                }
            }
            return param;
        };
        var getAdditionalParam = function () {
            var costFilter = $scope.dpFilter.TotalCost;
            var weightFilter = $scope.dpFilter.TotalWeight;
            var invoicesFilter = $scope.dpFilter.TotalInvoices;
            var debtFilter = $scope.dpFilter.Debt;
            var param = {};
            if (costFilter) {
                if (costFilter.From === 0 || costFilter.From) {
                    param.FromTotalCost = costFilter.From;
                }
                if (costFilter.To === 0 || costFilter.To) {
                    param.ToTotalCost = costFilter.To;
                }
            }
            if (weightFilter) {
                if (weightFilter.From === 0 || weightFilter.From) {
                    param.FromTotalWeight = weightFilter.From;
                }
                if (weightFilter.To === 0 || weightFilter.To) {
                    param.ToTotalWeight = weightFilter.To;
                }
            }
            if (invoicesFilter) {
                if (invoicesFilter.From === 0 || invoicesFilter.From) {
                    param.FromTotalInvoices = invoicesFilter.From;
                }
                if (invoicesFilter.To === 0 || invoicesFilter.To) {
                    param.ToTotalInvoices = invoicesFilter.To;
                }
            }
            if (debtFilter) {
                if (debtFilter.From === 0 || debtFilter.From) {
                    param.FromTotalDebt = debtFilter.From;
                }
                if (debtFilter.To === 0 || debtFilter.To) {
                    param.ToTotalDebt = debtFilter.To;
                }
            }
            param.GroupId = $scope.selectedGroupId;
            param.DateFilterType = $scope.dateFilter.TimeRange;
            if (param.DateFilterType === 'other') {
                if ($scope.dateFilter.StartDate) {
                    param.StartDate = $scope.dateFilter.StartDate.toISOString();
                }
                if ($scope.dateFilter.EndDate) {
                    param.EndDate = $scope.dateFilter.EndDate;
                    param.EndDate = new Date(param.EndDate.DateAdd(1)).toISOString();
                }
            }
            return param;
        };
        // event
        $scope.filterByCode = function () {
            var filter = [];
            if ($scope.dpFilter.Code && $scope.dpFilter.Code.length >= 1) {
                var cond = [];
                cond.push(_filter.newCondition('Code', $scope.dpFilter.Code, 'contains'));
                cond.push(_filter.newCondition('ContactNumber', $scope.dpFilter.Code, 'contains'));
                cond.push(_filter.newCondition('Name', $scope.dpFilter.Code, 'contains'));
                filter = _filter.append(filter, cond, "or");
                _filter.addfilter($scope.dpDataSource, filter);
            } else if (!$scope.dpFilter.Code) {
                filter = $scope.dpDataSource.filter();
                if (!filter) return;
                filter = _filter.detach(filter, 'Code');
                filter = _filter.detach(filter, 'ContactNumber');
                filter = _filter.detach(filter, 'Name');
                $scope.dpDataSource.filter(filter);
            }
        };
        $scope.filterByTotalWeight = function () {
            //force reload
            $scope.dpDataSource.read();
        };
        $scope.filterByDateRange = function () {
            $scope.dpDataSource.read();
        };
        $scope.filterByCustomDateRange = function () {
            //$scope.lblOtherTimeFilter = ($scope.dateFilterRange.fromDate ? $filter('date')($scope.dateFilterRange.fromDate, 'dd/MM/yyyy') : '') + " - " + ($scope.dateFilterRange.toDate ? $filter('date')($scope.dateFilterRange.toDate, 'dd/MM/yyyy') : '');
            //$scope.dpFilter.dateRange = 'other';
            //$scope.dateFilterPopup.close();
            $scope.dpDataSource.read();
        };
        $scope.filterByTotalCost = function () {
            $scope.dpDataSource.read();
        };
        $scope.filterByTotalInvoices = function () {
            $scope.dpDataSource.read();
        };
        $scope.filterByDebt = function () {
            $scope.dpDataSource.read();
        }
        $scope.showDocumentDetail = function (data, delivery) {

            if (data.type == paymentDocType.values.Buy) {
                $scope.invoicePopup.showInvoice(data.id);
            }
            else {
                if (data.type == paymentDocType.values.Payment) {
                    $scope.paymentPopup.showPayment(data.code, function () {
                        $scope.dpDataSource.read();
                    });
                } else if (data.type == paymentDocType.values.ClosingLoanBook) {
                    $scope.$broadcast('delivery-show-adjustment', data, delivery);
                }
                else if (data.type == paymentDocType.values.PaymentViaCashflow) {
                    $location.url('/' + viewUrl.cashflow + '?Code=' + data.code);
                }
                else if (data.type == paymentDocType.values.Sell) {
                    $scope.invoiceFormPopup.showInvoice(data.id);
                }
            }

        };
        //#endregion
        
        //#region delivery partner grid datasource
        $scope.dpDataSource = new kendo.data.DataSource({
            type: "odata",
            transport: {
                read: {
                    url: ("/api/partnerdelivery?format=json" + (($scope.rights.canViewInvoice || $scope.rights.canViewDebt) ? "&Includes=TotalWeight,TotalCost,TotalInvoices,TotalDebt" : "") + "&ForSummaryRow=true"),
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: getAdditionalParam
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response) {                        
                        if (response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        var hasSummary = false;
                        angular.forEach(response.Data, function (r) {
                            r.GroupsText = r.Groups ? r.Groups.replace(/\|/g, ", ") : "";
                            if (r.Id == -1) {
                                hasSummary = true;
                                if (!$scope.rights.canViewInvoice) {
                                    r.TotalInvoices = "";
                                    r.TotalCost = "";
                                    r.TotalWeight = "";
                                }
                                if (!$scope.rights.canViewDebt) {
                                    r.ToTotalDebt = "";
                                }
                            } else {
                                r.CompareCode = r.Code;
                                r.CompareName = r.Name;
                            }
                        });
                        if (hasSummary)
                            this.hasSummaryRow = true;
                    }
                    return response;
                },
                model: {
                    fields: {
                        Name: { type: "string" },
                        ContactNumber: { type: "string" },
                        Email: { type: "string" }
                    }
                }
            }
        });
        $scope.$on("refreshDeliveryDebtor", updateViewOnDebtChanged);
        $scope.grdColumns = [
            { field: "Code", title: $scope._l.deliveryPartnerCode, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
            { field: "Name", title: $scope._l.deliveryPartner_Name, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
            { field: "ContactNumber", title: $scope._l.contactNo, headerAttributes: { "class": "tdPhone" }, attributes: { "class": "tdPhone" } },
            { field: "Email", title: $scope._l.email, headerAttributes: { "class": "tdDebt" }, attributes: { "class": "tdDebt" }, hidden: true },
            { field: "TotalInvoices", title: $scope._l.totalInvoices, format: "{0:n0}", headerAttributes: { "class": "tdSLC txtR" }, attributes: { "class": "tdSLC txtR" }, isNumber: true },
            { field: "TotalWeight", title: $scope._l.totalWeight, format: "{0:#,#.###}", headerAttributes: { "class": "tdSSL txtR" }, attributes: { "class": "tdSSL txtR" }, isNumber: true, hidden: true },
            { field: "TotalDebt", title: $scope._l.deliveryPartner_Debt, format: "{0:n0}", headerAttributes: { "class": "tdSSL txtR" }, attributes: { "class": "tdSSL txtR" }, isNumber: true },
            { field: "TotalCost", title: $scope._l.totalCost, format: "{0:n0}", headerAttributes: { "class": "tdStatus txtR" }, attributes: { "class": "tdStatus txtR" }, isNumber: true }
        ];
        $scope.detailTemplate = kendo.template($('#dpDetailTmpl').html());
        //#endregion
        
        //#region grid detail
        $scope.editDeliveryPartner = function (deliveryPartner) {            
            $rootScope.$broadcast(app.events.showDeliveryPartnerForm, deliveryPartner);
        };
        $scope.deleteDeliveryPartner = function (deliveryPartner) {            
            _msgBox.confirm($filter("stringFormat")($scope._l.deliveryPartner_MsgDel, [deliveryPartner.Code]), $scope._l.deliverypartner_TitleDel, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgBox.onConfirm = function () {
                _partnerDeliveryResource.remove({ partnerdeliveryId: deliveryPartner.Id, CompareCode: deliveryPartner.Code, CompareName: deliveryPartner.Name }, function () {
                    _logger.success($scope._m.globalDeleteSuccess);
                    $scope.dpDataSource.read();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };
        };
        //#endregion
        $scope.updateBalance = function (delivery) {
            $scope.$broadcast('delivery-update-balance', delivery);
        };

        $scope.makePayment = function (delivery) {

            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: $scope._l.payment,
                    resizable: false,
                    draggable: true,
                    pinned: true,
                    width: 900,
                    open: function () {
                        this.wrapper.addClass("k-window-fix k-window-poup");
                        this.center();
                    }
                },
                template: '<kv-delivery-purchase-payment-form kv-delivery="delivery" kv-listeners="listeners" kv-on-save="closeWindow()" kv-on-cancel="closeWindow()"></kv-delivery-purchase-payment-form>',
                resolve: {
                    delivery: function() {
                        return delivery;
                    },
                    listeners: function() {
                        return {
                            onSave: function() {
                                $scope.$parent.$broadcast("refreshDeliveryDebtor");
                            }
                        };
                    }
                },
                controller: ["$scope", "$windowInstance", "delivery", "listeners", function ($scope, $windowInstance, delivery, listeners) {

                    $scope.delivery = delivery;
                    $scope.listeners = listeners;

                    $scope.closeWindow = function () {
                        $windowInstance.close(false);
                    };
                }]
            });

            //$scope.paymentFormPopup.showPaymentForDelivery(delivery, {
            //    onSave: function () {
            //        $scope.$parent.$broadcast("refreshDeliveryDebtor");
            //    }
            //});
        };

        //#region check permission
        
        for (var i = 0; i < $scope.grdColumns.length; i++) {
            if (!$scope.rights.canViewInvoice && ($scope.grdColumns[i].field == 'TotalInvoiced' || $scope.grdColumns[i].field == 'TotalWeight' || $scope.grdColumns[i].field == 'TotalCost')) {
                $scope.grdColumns.splice(i, 1);
            }
            if (!$scope.rights.canViewDebt && $scope.grdColumns[i].field == 'TotalDebt') {
                $scope.grdColumns.splice(i, 1);
            }
        }
        
        //#endregion

        //#region init gridview Detail
        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;
            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });
            var hideTab = function (index) {
                $(tabship.data("kendoTabStrip").items()[index]).attr("style", "display:none");
            };
            if ($scope.rights.canViewInvoice) {
                var deliveryPartnerInvoiceList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/invoicesdelivery?format=json',
                            dataType: 'json',
                            data: getDeliveryPartnerId(e.data.Id)
                        }
                    },
                    pageSize: 5,
                    change: function () {
                        if (this._total == 0) {
                            hideTab(1);
                        }
                    },
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    //filter: initInvoiceFilter,
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        parse: function (response) {
                            if (response) {
                                if (response.Filter) {
                                    this.kvFilter = response.Filter;
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                PurchaseDate: { type: "date" },
                                TotalPrice: { type: "number" },
                                Price: { type: "number" },
                                Id: { type: "number" },
                                Status: { type: "number" }
                            }
                        }
                    }
                });
                detailRow.find('.deliveryPartnerInvoiceList').kendoGrid({
                    dataSource: deliveryPartnerInvoiceList,
                    pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.customer_invoiceHistoryPaging } },
                    dataBinding: function () {
                        e.data.invoiceCount = this.dataSource._total;
                        $scope.emptyGridFix.apply(this, arguments);
                    },
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.invoiceCode").click(function () {
                            var data = $(this).data();
                            scope.invoiceFormPopup.showInvoice(data.id);
                            refresh($scope);
                        });

                        this.wrapper.find('.inputSelectorPrice').autoNumeric('init', { mDec: 0 });

                        this.wrapper.find("a.updateInvoiceDelivery").click(function () {
                            var isUpdate = false;
                            var data = $(this).data();
                            var newPrice = parseFloat($(this).parents().eq(1).find('.inputSelectorPrice').val().replace(/,/g, ''));
                            var newStatus = $(this).parents().eq(1).find('#ddl' + data.id).data("kendoDropDownList");
                            if (parseInt(newStatus.value()) === 2 || parseInt(newStatus.value()) === 5) {
                                var msg = "";
                                if (parseInt(newStatus.value()) === 2) {
                                    _msgBox.confirm($filter("stringFormat")(_m.voidSaleInvoiceConfirm, [data.code, "Đã hủy"]), $scope._l.deliverypartner_TitleUpdateStatus, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                } else {
                                    _msgBox.confirm($filter("stringFormat")($scope._l.deliveryPartner_MsgUpdateStatus2, [data.code, "Không giao được"]), $scope._l.deliverypartner_TitleUpdateStatus, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                }
                                _msgBox.onConfirm = function () {
                                    if (data.price !== newPrice) {
                                        isUpdate = true;
                                    } else {
                                        newPrice = data.price;
                                    }
                                    if (data.status !== parseInt(newStatus.value())) {
                                        isUpdate = true;
                                        newStatus = parseInt(newStatus.value());
                                    } else {
                                        newStatus = data.status;
                                    }
                                    if (isUpdate) {
                                        $("#LoadingPanel").show();
                                        _partnerDeliveryResource.invoicesdelivery({ InvoiceId: data.id, Price: newPrice, Status: newStatus }, function (data) {
                                            $("#LoadingPanel").hide();
                                            _logger.success(data.Message);
                                        }, function (er) {
                                            $("#LoadingPanel").hide();
                                            _logger.error(getMessage(er));
                                        });
                                        $scope.dpDataSource.read();
                                    }
                                };
                            } else {
                                if (data.price !== newPrice) {
                                    isUpdate = true;
                                } else {
                                    newPrice = data.price;
                                }
                                if (data.status !== parseInt(newStatus.value())) {
                                    isUpdate = true;
                                    newStatus = parseInt(newStatus.value());
                                } else {
                                    newStatus = data.status;
                                }
                                if (isUpdate) {
                                    $("#LoadingPanel").show();
                                    _partnerDeliveryResource.invoicesdelivery({ InvoiceId: data.id, Price: newPrice, Status: newStatus }, function (data) {
                                        $("#LoadingPanel").hide();
                                        _logger.success(data.Message);
                                        $scope.dpDataSource.read();
                                    }, function (er) {
                                        $("#LoadingPanel").hide();
                                        _logger.error(getMessage(er));
                                    });
                                }
                            }
                        });
                        if ($scope.invStateList && $scope.invStateList.length > 0) {
                            this.wrapper.find(".customize-ddl").kendoDropDownList({
                                animation: false,
                                dataSource: $scope.invStateList,
                                dataTextField: "Name",
                                dataValueField: "Id"
                            });
                        } else {
                            var parThis = this;
                            var testds = new kendo.data.DataSource({
                                transport: {
                                    read: {
                                        url: "/api/invoicestatelist?format=json",
                                        dataType: "json"
                                    }
                                }
                            });
                            testds.fetch(function () {
                                var data = testds.data();
                                var ds = [];
                                for (var i = 0; i < data.length; i++) {
                                    ds.push({ Id: data[i].Id, Name: data[i].Name });
                                }
                                $scope.invStateList = ds;
                                parThis.wrapper.find(".customize-ddl").kendoDropDownList({
                                    animation: false
                                    , dataSource: ds
                                    , dataTextField: "Name"
                                    , dataValueField: "Id"
                                });
                            });
                        }
                    },
                    columns: [
                        {
                            "field": "Code"
                            , "title": $scope._l.invoiceCode
                            , template: '<a href="javascript:void(0)" class="invoiceCode" data-code="#=Code#" data-id="#=Id#">#=Code#</a>'
                            , headerAttributes: { "class": "tdCodeDel" }
                            , attributes: { "class": "tdCodeDel" }
                        },
                        { "field": "PurchaseDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy}", headerAttributes: { "class": "tdDate" }, attributes: { "class": "tdDate" } },
                        { "field": "TotalPrice", "title": $scope._l.invoiceValues, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
                        {
                            "field": "Price"
                            , "title": $scope._l.deliveryCost
                            , format: "{0:n0}"
                            , headerAttributes: { "class": "tdDateTime" }
                            , attributes: { "class": "tdDateTime fr" }
                            , template: "#if (Status == 2 || Status == 5 || Status == 1) {# <div class='txtR'>#= kendo.toString(Price, 'n0') #</div> #} else  {# <input type='text' class='iptSL iptR txtR w100 inputSelectorPrice' k-min='0' value='#=Price#' /> #}#"
                        },
                        {
                            "field": "Status"
                            , "title": $scope._l.status
                            , format: "{0:n0}"
                            , headerAttributes: { "class": "tdDebt" }
                            , attributes: { "class": "tdDebt" }
                            , template: "#if (Status == 1) {# <div class='dp-div-status'><span class='hoan-thanh'>#=StatusName#</span></div> #} else if (Status == 2) {# <div class='dp-div-status'><span class='da-huy'>#=StatusName#</span></div> #}  else if (Status == 5) {# <div class='dp-div-status'><span class='khong-giao-duoc'>#=StatusName#</span></div> #}  else if (Status == 3) {# <input value='#=Status#' id='ddl#=Id#' class='customize-ddl chua-giao-hang' /> #} else {# <input value='#=Status#' id='ddl#=Id#' class='customize-ddl dang-giao-hang' /> #}#"

                        },
                        {
                            "field": "Id"
                            , "title": " "
                            , headerAttributes: { "class": "tdDel" }
                            , attributes: { "class": "tdDel" }
                            , template: '#if (Status != 2 && Status != 5 && Status != 1) {# <a href="javascript:void(0)" class="updateInvoiceDelivery" data-code="#=Code#" data-id="#=Id#" data-price="#=Price#" data-status="#=Status#"><i class="fa fa-floppy-o lnk-update-ivd" title="Lưu dữ liệu"></i></a> #}#'
                        }
                    ]
                });

                $scope.exportDeliveryPartnerInvoice = function () {
                    var filter = deliveryPartnerInvoiceList.reader.kvFilter;
                    var type = "InvoiceDelivery";
                    var fileName = "DanhSachHoaDonGiaoHang";
                    var data = { req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);
                };
            }

            if ($scope.rights.canViewDebt) {

                var deliveryDebtList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/partnerdelivery/' + e.data.Id + '/debt?format=json&GroupCode=true',
                            dataType: 'json'
                        }
                    },
                    pageSize: 5,
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        model: {
                            fields: {
                                DocumentCode: { type: "string" },
                                TransDate: { type: 'date' },
                                TypeStr: { type: "string" },
                                Value: { type: "string" },
                                Balance: { type: "string" }
                            }
                        },
                        parse: function (response) {
                            if (response.Filter) {
                                this.kvFilter = response.Filter;
                            }
                            angular.forEach(response.Data, function (r, i) {
                                r.Value = -r.Value;
                                r.Balance = -r.Balance;
                                r.TypeStr = r.DocumentType == 3 ? $scope._l.deliveryCost : paymentDocType.labels[r.DocumentType];
                                r.Value = $filter('balSheetFormat')(r.Value);
                                r.Balance = $filter('balSheetFormat')(r.Balance);
                            });
                            return response;
                        }
                    }
                });

                detailRow.find('.deliveryDebtList').kendoGrid({
                    dataSource: deliveryDebtList,
                    pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.supplier_DebtPaging } },
                    dataBinding: function (arg) {
                        e.data.recordCount = this.dataSource._total;
                        $scope.emptyGridFix(arg);
                    },
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.documentCode").click(function () {
                            var data = $(this).data();
                            var delivery = scope.dataItem;
                            if (data && delivery) {
                                scope.showDocumentDetail(data, delivery);
                                refresh($scope);
                            }
                        });
                    },
                    columns: [
                        {
                            field: "DocumentCode", title: $scope._l.supplier_CodeDebt,
                            template: '#if(DocumentType!=' + paymentDocType.values.PaymentViaCashflow + '){#' +
                                '<a href="javascript:void(0)" class="documentCode" data-id="#=DocumentId#" data-code="#=DocumentCode#" data-type="#=DocumentType#">#=DocumentCode#</a>' +
                                '#}else{# ' + '<a href="\\#/' + viewUrl.cashflow + '?Code=#=DocumentCode#" target="_blank">#=DocumentCode#</a>' +
                                '#}#', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" }
                        },
                        { field: 'TransDate', title: $scope._l.lblTime, format: "{0:dd/MM/yyyy H:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { field: 'TypeStr', title: $scope._l.supplier_Type },
                        { field: "Value", title: $scope._l.supplier_Value, headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } },
                        { field: "Balance", title: $scope._l.deliveryDebtS, headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" } }
                    ]
                });
                $scope.exportDPDebt = function () {
                    var filter = { "PartnerdeliveryId": e.data.Id , "GroupCode":true};
                    var col = $('.deliveryDebtList').data("kendoGrid").options.columns;
                    var arrcol = [];
                    for (var idx = 0; idx < col.length; idx++) {
                        arrcol.push({
                            Field: col[idx].field, Title: col[idx].title,
                            Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                            Width: col[idx].width
                        });
                    }
                    var type = "CustomerDebt";
                    var fileName = "LichSuThanhĐTGH";
                    var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);

                };
            } else {
                hideTab(2);
            }
        };
            
}])  
.directive('kvDeliveryPartnerFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
        },
        controller: ['$scope', function ($scope) {
        }],
        templateUrl: _session.partialPath('delivery-partner-filter.html')
    };
}])
//#endregion
//#region kvPartnerDeliveryGroupForm
.directive('kvPartnerDeliveryGroupForm', ['kvSession', 'logger', 'PrivilegeHelper', 'kvLabel', '$filter', 'kvMessages', function (_session, _logger, _p, _l, $filter, _m) {
    return {
        restrict: 'E',
        scope: {
             popupName: "@kvName",
             kvOnSave: "&",
             kvOnDelete: "&",
             kvOnCancel: "&",
             kvGroupData: "="
        },
        link: function (scope, elem) {
            scope._l = _l;
            scope.canCreate = _p.has('PartnerDelivery_Create');
            scope.canDelete = _p.has('PartnerDelivery_Delete') && angular.isObject(scope.kvGroupData);
            scope.canUpdate = _p.has('PartnerDelivery_Update');
            elem.on('$destroy', function () {
                if (scope.$parent && scope.popupName) {
                    delete scope.$parent[scope.popupName];
                }
            });
        },
        controller: ['$scope', 'PartnerDeliveryGroupResource', 'kvConfirmBox', 'operatorType', function ($scope, service, _msgbox, operatorType) {

            init();

            function init() {
                $scope.tabType = "1";
                if (angular.isObject($scope.kvGroupData)) {
                    $scope.group = new filter($scope.kvGroupData);
                    $scope.canDelete = true;
                } else {
                    $scope.group = new filter();                    
                    $scope.canDelete = false;
                }
            }

            function filter(data) {
                this.Id = data ? data.Id : 0;
                this.Name = data ? data.Name : "";
                this.Description = data ? data.Description : "";
            }

            //this.showPopup = function (id, calback) {
            //    $scope.callback = calback;
            //    $scope.tabType = "1";
            //    if (id) {
            //        service.get({ groupId: id }, function (data) {
            //            $scope.group = new filter(data);
            //            $scope.deliveryPartnerGroupWindow.title($scope._l.deliveryPartner_GroupEditTitle);
            //            $scope.deliveryPartnerGroupWindow.wrapper.addClass("k-window-poup");
            //            $scope.deliveryPartnerGroupWindow.center().open();
            //            $scope.canDelete = true;
            //        }, function (err) {
            //            _logger.error(getMessage(err));
            //        });
            //    } else {
            //        $scope.deliveryPartnerGroupWindow.title($scope._l.deliveryPartner_GroupAddTitle);
            //        $scope.deliveryPartnerGroupWindow.wrapper.addClass("k-window-poup");
            //        $scope.deliveryPartnerGroupWindow.center().open();
            //        $scope.group = new filter();                    
            //        $scope.canDelete = false;
            //    }
            //};

            $scope.cancel = function () {
                if (angular.isFunction($scope.kvOnCancel)) {
                    $scope.kvOnCancel();
                }
            };

            $scope.delete = function () {
                var ivmsg = _msgbox.confirm($filter("stringFormat")(_m.removeDiliveryPartnerGroup, [$scope.group.Name]), _m.removeDiliveryPartnerGroupSuccess, false, _l.confirmYes, _l.confirmNo, false, true);
                ivmsg.confirm = function () {
                    service.remove({ groupId: $scope.group.Id }, function (data) {                        
                        _logger.success(_m.removeDiliveryPartnerGroupSuccess);
                        if (angular.isFunction($scope.kvOnDelete)) {
                            $scope.kvOnDelete({ group: data });
                        }
                    }, function (er) {
                        _logger.error(getMessage(er));
                    });
                };
            };

            $scope.save = function () {
                $("#LoadingPanel").show();
                $scope.group.Filter = JSON.stringify($scope.group.filters);
                service.save({ PartnerDeliveryGroup: $scope.group }, function (data) {
                    if ($scope.group.Id > 0) {
                        _logger.success(_m.updateDiliveryPartnerGroupSuccess);
                    } else {
                        _logger.success(_m.addDiliveryPartnerGroupSuccess);
                    }
                    $("#LoadingPanel").hide();
                    if (angular.isFunction($scope.kvOnSave)) {
                        $scope.kvOnSave({ group: data });
                    }
                }, function (er) {
                    $("#LoadingPanel").hide();
                    _logger.error(getMessage(er));
                });
            };

            if ($scope.$parent && $scope.popupName) {
                $scope.$parent[$scope.popupName] = this;
            }
        }],
        templateUrl: _session.partialPath('deliverypartnergroup-form.html')
    };
}])
//#endregion
//#region DeliveryPartnerFormPopupCtrl
.controller('DeliveryPartnerFormPopupCtrl', ['$scope', 'logger', '$location', 'PartnerDeliveryResource',
    function ($scope, _logger, $location, _partnerDeliveryResource) {
        var openWindow = function (dp) {
            var listeners = {
                onSave: function (dp) {
                    $scope.deliveryPartnerWindow.close();
                    $scope.dpDataSource.read();
                },
                onSaveError: function (err) {                    
                },
                onCancel: function () {
                    $scope.deliveryPartnerWindow.close();
                }
            };
            var title = '';
            if (!dp) {
                dp = {};
                title = $scope._l.deliveryPartner_AddTitle; 
            }
            else {
                $scope.source = dp;
                //make a copy
                dp = angular.copy(dp);
                title = $scope._l.delivery_partner + ' ' + dp.Code;
            }
            $scope.deliveryPartnerWindow.title(title);
            $scope.deliverPartnerForm.setListeners(listeners);
            $scope.deliverPartnerForm.setDeliveryPartner(dp, $scope.selectedGroupId);
            $scope.deliveryPartnerWindow.wrapper.addClass("k-window-poup k-window-fix");
            $scope.deliveryPartnerWindow.center().open();
            refresh($scope);
        };
        $scope.$on(app.events.showDeliveryPartnerForm, function (evt, data) {
            $scope.selectedGroupId = [];
            if (data && data.Id > 0) {
                _partnerDeliveryResource.get({ partnerdeliveryId: data.Id, Includes: ["PartnerDeliveryGroupDetails"] }, function (d) {                    
                    if (d.PartnerDeliveryGroupDetails && d.PartnerDeliveryGroupDetails.length > 0) {
                        for (var i = 0; i < d.PartnerDeliveryGroupDetails.length; i++) {
                            $scope.selectedGroupId.push(d.PartnerDeliveryGroupDetails[i].Id);
                        }
                    }
                    openWindow(d);
                });
            } else {
                openWindow(data);
            }
            $scope.deliveryPartnerWindow.onClose = function (e) {
                if ($scope.deliverPartnerForm) {
                    $scope.deliverPartnerForm.clearListener();
                }
            };
        });
    }])
//#endregion
//#region kvPartnerDeliveryImportPopup
.controller('DeliveryBalancePopupCtrl', ['$scope', 'logger', 'PartnerDeliveryResource', 'DeliveryAdjustmentResource', 'kvConfirmBox', '$filter', 'kvMessages', function ($scope, _logger, _delivery, _adjustments, _msgBox, $filter, _m) {
    $scope.$on('delivery-update-balance', function (evt, delivery) {
        $scope.delivery = delivery;
        $scope.adjust = {};
        $scope.AdjustmentDate = new Date();
        $scope.balancePopup.title($scope._l.debtAdjust);
        $scope.balancePopup.wrapper.addClass("k-window-poup k-window-poup-thn");
        $scope.balancePopup.center().open();
    });
    $scope.AdjustmentDate = new Date();
    $scope.maxDate = new Date();
    $scope.maxDate.setHours(23, 59, 59, 999);
    function refreshDebtorGrid() {
        $scope.$parent.$broadcast("refreshDeliveryDebtor");
    }
    $scope.$on('delivery-show-adjustment', function (evt, info, delivery) {
        $scope.adjust = _adjustments.get({ adjustId: info.id, Includes: ['User'] }, function () {
            if ($scope.adjust && $scope.adjust.Balance) {
                $scope.adjust.Balance *= -1;
            }
            $scope.CompareAdjustmentDate = $scope.adjust.AdjustmentDate != null && $scope.adjust.AdjustmentDate != undefined ? kendo.parseDate($scope.adjust.AdjustmentDate) : kendo.parseDate($scope.adjust.CreatedDate);
            $scope.AdjustmentDate = $scope.CompareAdjustmentDate;
        });
        $scope.balancePopup.title($scope._l.debtAdjust);
        $scope.balancePopup.wrapper.addClass("k-window-poup");
        $scope.balancePopup.center().open();
        $scope.delivery = delivery;
    });
    $scope.void = function () {
        _msgBox.confirm($filter("stringFormat")(_m.balanceAdjustment_MsgDel, [$scope.adjust.Code]), _m.balanceAdjustment_TitleDel, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgBox.onConfirm = function () {
            _delivery.deleteAdjustDebt({ Adjustment: $scope.adjust, partnerdeliveryId: $scope.delivery.Id, CompareCode: $scope.delivery.Code, CompareName: $scope.delivery.Name }, function (r) {
                _logger.success(r.Message);
                refreshDebtorGrid();
                $scope.cancel();
            }, function (er) {
                _logger.error(getMessage(er));
            });
        };
    };
    $scope.update = function () {
        $scope.adjust.Value = $scope.adjust.Balance - $scope.delivery.Debt;
        $scope.adjust.AdjustmentDate = $scope.AdjustmentDate ? $scope.AdjustmentDate : new Date();
        _delivery.adjustDebt({ Adjustment: $scope.adjust, partnerdeliveryId: $scope.delivery.Id, CompareCode: $scope.delivery.Code, CompareName: $scope.delivery.Name, CompareBalance: $scope.delivery.Debt, CompareAdjustmentDate: $scope.CompareAdjustmentDate }, function () {
            _logger.success($scope._m.globalSaveSuccess);

            //$scope.delivery.deliveryDebtList.read();
            refreshDebtorGrid();

            $scope.cancel();
            
        }, function (er) {
            _logger.error(getMessage(er));
        });
    };

    $scope.cancel = function () {
        $scope.balancePopup.close();
    };

    $scope.onClose = function () {
        $scope.supplier = null;
        $scope.adjust = null;
        $scope.dataSource = null;
    };
}])
.directive('kvPartnerDeliveryImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages', '$rootScope',
    function (_session, _logger, $filter, _l, _m, $rootScope) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;                    
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                                _logger.error("Định dạng file không đúng, chỉ hỗ trợ đuôi: xlsx, xls");
                                e.preventDefault();
                            }
                        });
                        $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
                    };
                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();
                    };
                    var onSuccessImport = function (e) {
                        var data = e.response.Data;                        
                        $scope.importWindow.close();
                        $scope.$parent.dpDataSource.read();
                        refresh($scope.$parent);                        
                    };
                    var onImportError = function (e) {
                        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                            $scope.ImportError = $rootScope._m.sessionExpire;
                        } else {
                            if (e.XMLHttpRequest.responseText) {
                                $scope.ImportError = e.XMLHttpRequest.responseText;
                            } else {
                                $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                            }
                        }
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };

                    var onImportCancel = function (e) {
                    };
                    $scope.showPopup = function (id) {
                        $scope.importWindow.wrapper.addClass("k-window-poup");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
                        $scope.importWindow.wrapper.find(".k-upload-status").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,

                        async: {
                            saveUrl: "/Files/ImportPartnerDelivery",
                            removeUrl: "/Files/Remove",
                            autoUpload: false
                        },

                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: "Chọn file dữ liệu",
                            uploadSelectedFiles: "Thực hiện",
                            statusUploading: "Đang xử lý dữ liệu...",
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }
                }
            ],
            templateUrl: _session.partialPath('delivery-partner-import.html')
        };
    }])
//#endregion
;;
'use strict'
kvApp.controller('InvoiceListCtrl', ['$scope', 'BranchResource', 'kvSession', 'kendofilter', '$routeParams', 'invoiceStatus', 'invoiceColumns', 'refundStatus', 'kvExportToExcel', 'paymentMethods', 'paymentStatus', 'logger', '$filter', 'invoiceStatusMap', '$timeout', 'localCache', 'settings', 'PrivilegeHelper', 'PartnerDeliveryResource','SurchargeResource',
function ($scope, _branches, _session, _filter, $routeParams, _invoiceStatus, invoiceColumns, _refundStatus, _export, _paymentMethod, _paymentStatus, _logger, $filter, _status, $timeout, _localCache, _setting, _p, _delivery,_surcharge) {


    //$scope.branchDefaults = [_session.branch];
        $scope.branchids = $scope.currentBranch.Id ? [$scope.currentBranch.Id] : [];
        $scope.branches = _branches.get({ Permission: 'Invoice_Read' }, function () {
            $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];
        });
        $scope.pageSizes = pager.pageSizes;
        $scope.pageSize = pager.defaultList;
        $scope.detailTemplate = kendo.template($("#templDetail").html());
        $scope.invoiceStatus = [];
        $scope.rights = {};
        $scope.rights.canAdd = $scope._p.has('Invoice_Create');
        $scope.rights.canViewReturn = $scope._p.has('Return_Read');
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };
        for (var idx in _invoiceStatus) {
            if (idx != _status.Void)
                $scope.invoiceStatus.push({ key: idx, value: _invoiceStatus[idx], checked: true });
            else
                $scope.invoiceStatus.push({ key: idx, value: _invoiceStatus[idx], checked: false });
            //$scope.invoiceStatus.push({ key: idx, value: _invoiceStatus[idx]});
        }
        $scope.currentBranchId = _session.branch.Id;
        var kvDropbox = {};
        //$scope.filter.branchids = [_session.branch.Id];
        //$scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];

        //$scope.branchdatabound = function () {
        //    if (this.value().length == 0 && $scope.currentBranchId > 0)
        //        this.value([$scope.currentBranchId]);
        //    //console.log(this.value());
        //};

        $scope.settings = _setting;
        $scope._p = _p;
        $scope.deliveryIds = [];
        $scope.SelectedPriceBookId = [];
        $scope.surchargeIds = [];

        $scope.isDisplayed = function (item) {
            if (!$scope.settings.UseCod) {                
                if (parseInt(item.key) === 1 || parseInt(item.key) === 2) {
                    return true;
                } else {
                    return false;
                }
            }
            return true;
        }
        
        $scope.invoiceGrid;
        $scope.grvdataBinding = function (arg) {

            /*
            if ($scope.branchids && $scope.branchids.length == 1) {
                arg.sender.hideColumn("BranchName");
            } else {
                arg.sender.showColumn("BranchName");
            }
            */
            //if (!$scope._setting.SellAllowDeposit) {
            //    arg.sender.hideColumn("Status");
            //}

            $scope.invoiceGrid = arg.sender;
            $scope.$apply();
        };
        $scope.refresh = function () {
           $scope.invoices.pageSize(parseInt($scope.pageSize));
        };
        var r = _delivery.get({ Permission: 'PartnerDelivery_Read' });
        r.$promise.then(function (dp) {
            $scope.deliveries = dp.Data;
            refresh($scope);
        });

        var r2 = _surcharge.get({ Permission: 'Surcharge_Read', ForManage: true });
        r2.$promise.then(function (dp) {
            $scope.surcharges = dp.Data;
            refresh($scope);
        });

        $scope.comboPriceBook = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                //autoSync: true,
                transport: {
                    read: {
                        url: "/api/pricebook/getall?includeAll=true&Includes=PriceBookBranches&Includes=PriceBookCustomerGroups&Includes=PriceBookUsers",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        fields: {
                            CreatedDate: { type: "date" },
                            EndDate: { type: "date" },
                            StartDate: { type: "date" },
                        }
                    },
                }
            }),
            dataTextField: "Name",
            dataValueField: "Id"
        };
        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            $scope.dateFilter.TimeRange = '';
            $scope.branchids = [];
            $scope.dateFilter.TimeRange = ''
            $scope.currentBranchId = 0;
            if ($scope.invoiceStatus && $scope.invoiceStatus.length > 0) {
                for (var i = 0; i < $scope.invoiceStatus.length; i++) {
                    $scope.invoiceStatus[i].checked = false;
                }
            }
        }
        function initFilter() {

            var filter = [];

            if ($scope.filterName) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filterName, 'contains')], 'and');
            }
            if ($scope.filterDescription) {
                filter = _filter.append(filter, [_filter.newCondition('Description', $scope.filterDescription, 'contains')], 'and');
            }
            var values = $scope.branchids;
            var condition = [];
            if (values && values.length > 0) {
                for (var i = 0; i < values.length; i++) {
                    if (parseInt(values[i]) > 0) {
                        condition.push(_filter.newCondition("BranchId", parseInt(values[i]), "eq"));
                    }
                }
                filter = _filter.append(filter, condition, "or");
            }
           
            var priceBookFilter = $scope.SelectedPriceBookId;
            var priceBookCondition = [];
            if (priceBookFilter && priceBookFilter.length > 0) {
                for (var i = 0; i < priceBookFilter.length; i++) {
                    if (parseInt(priceBookFilter[i].Id) > 0) {
                        priceBookCondition.push(_filter.newCondition("PriceBookId", parseInt(priceBookFilter[i].Id), "eq"));
                    }else if (parseInt(priceBookFilter[i].Id) == 0) {
                        priceBookCondition.push(_filter.newCondition("PriceBookId", null, "eq"));
                    }
                }
                filter = _filter.append(filter, priceBookCondition, "or");
            }

            if ($scope.dateFilter.TimeRange == 'other') {
                condition = [];
                if ($scope.dateFilter.StartDate) {

                    var todate = new Date($scope.dateFilter.EndDate);
                    condition.push(_filter.newCondition("PurchaseDate", $scope.dateFilter.StartDate, "ge"));
                    condition.push(_filter.newCondition("PurchaseDate", todate.DateAdd(1), "lt"));
                }
                filter = _filter.append(filter, condition, "and");
            } else if ($scope.dateFilter.TimeRange != '') {
                condition = [
                    _filter.newCondition("PurchaseDate", $scope.dateFilter.TimeRange, "eq")
                ];
                filter = _filter.append(filter, condition, "or");
            }
            values = $scope.invoiceStatus;
            condition = [];
            for (var k = 0; k < values.length; k++) {
                if ($scope.isDisplayed(values[k]) && values[k].checked && parseInt(values[k].key) > 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                }
            }
            if (condition.length > 0) {
                filter = _filter.append(filter, condition, "or");
            }


            return filter;
        }


        function filterbyExtention() {
            var para = {};
            var d = [];
            para.ProductKey = $scope.filterProduct;
            para.CustomerKey = $scope.filterCustomer;
            para.UserNameKey = $scope.filterUserName;
            para.SerialKey = $scope.filterSerial;
            
            para.DeliveryCode = $scope.filterDeliveryCode;
            angular.forEach($scope.deliveryIds, function (value) {
                d.push(value.Id);
            });
            if(d.length > 0)
                para.DeliveryIds = JSON.stringify(d);

            d = [];
            angular.forEach($scope.surchargeIds, function (value) {
                d.push(value.Id);
            });
            if (d.length > 0)
                para.SurchargeIds = JSON.stringify(d);

            return para;
        }

        $scope.invoices = new kendo.data.DataSource({
            type: "odata",
            transport: {
                read: {
                    url: "/api/invoices?format=json&Includes=BranchName&Includes=Branch&Includes=InvoiceDeliveries&Includes=TableAndRoom&Includes=Customer&Includes=Payments&Includes=SoldBy&Includes=InvoiceOrderSurcharges&ForSummaryRow=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests               
                    //tranditional: true 
                    data: filterbyExtention
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    //if (response && response.Total1Value) {
                        //this.totalValue = "<span id='spTotalPayment'>" + kendo.toString(response.Total2Value, "n0") + "</span><span id='spTotal' class='dpib' style='width:98px'>" + kendo.toString(response.Total1Value, "n0") + "</span>";
                        this.hasSummaryRow = true;
                    //}
                    if (response && response.Data) {
                        for (var i = 0 ; i < response.Data.length ; i++) {
                            var t = response.Data[i];
                            //console.log(t);
                            t.PurchaseDate = $filter('parseDate')(t.PurchaseDate);
                            t.ModifiedDate = $filter('parseDate')(t.ModifiedDate);
                            t.Customer = t.Customer ? t.Customer : { Name: $scope._l.guest };
                            t.StatusValue = t.Status;
                            t.Status = _invoiceStatus[t.Status];

                            if (t.StatusValue == 1) t.classStatus = "hoan-thanh";
                            else if (t.StatusValue == 2) t.classStatus = "da-huy";
                            else if (t.StatusValue == 3) t.classStatus = "chua-giao-hang";
                            else if (t.StatusValue == 4) t.classStatus = "dang-giao-hang";
                            else t.classStatus = "khong-giao-duoc";

                            t.PaidAmount = t.TotalPayment;
                            if (t.Payments && t.Payments.length > 0) {
                                t.PaymentMethod = _paymentMethod[t.Payments[0].Method];
                            }
                            t.Branch = t.Branch ? t.Branch : { Name: '' };
                            t.SoldBy = t.SoldBy ? t.SoldBy : { GivenName: '' };
                            if (!t.Discount)
                                t.Discount = 0;

                            // Summary row
                            if (t.Id < 0) {
                                t.PurchaseDate = "";
                                t.Customer = "";
                                //t.SubTotal = "";
                                //t.Discount = "";
                            }

                            // surcharge name
                            if (!t.Surcharge)
                                t.Surcharge = 0;

                            if ($scope.surcharges) {
                                angular.forEach(t.InvoiceOrderSurcharges, function (s) {
                                    for (var k = 0; k < $scope.surcharges.length ; k++) {
                                        if (s.SurchargeId == $scope.surcharges[k].Id) {
                                            s.Name = $scope.surcharges[k].Name;
                                            break;
                                        }
                                    }
                                })
                            }

                            if (t.SurchargeDetails)
                                t.TotalAfterDiscount = t.Total - parseFloat(t.SurchargeDetails.replace(",","."));
                            else
                                t.TotalAfterDiscount = t.Total - (t.Surcharge ? t.Surcharge : 0);

                            if (t.Discount && t.Discount > 0)
                                t.SubTotal = t.TotalAfterDiscount + t.Discount;
                            else
                                t.SubTotal = t.TotalAfterDiscount;

                            t.NewInvoiceTotal = (t.NewInvoiceTotal !== undefined) ? t.NewInvoiceTotal : t.Total;

                            if (Math.abs(t.NewInvoiceTotal - t.TotalPayment) > 0.00001) {
                                t.isWarning = true;
                            }
                        }
                        // for highlight the diff payment
                        this.hasCustomStyle = true;
                        this.warnColumnIndex = 16;
                        if (!$scope.settings.UseSurcharge) {
                            this.warnColumnIndex = 14;
                        }
                    }
                    return response;
                },
                model: {
                    fields: {
                        PurchaseDate: { type: "date" },
                        BranchName: { type: "string" },
                        Status: { type: "string" },

                    }
                }
            }
        });

        $scope.grdColumns = invoiceColumns;
        if (!$scope.settings.UseSurcharge)
        {
            $scope.grdColumns = $scope.grdColumns.filter(function (c) {
                return (c.field !== "Surcharge" && c.field !== "TotalAfterDiscount");
            });
        }

        $scope.export = function () {
            var filter = $scope.invoices.reader.kvFilter;
            var columns = [];

            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            var obj = $("#grdInvoices").data("kendoGrid").options.columns;
            try {
                if (localStorage.getItem("grdInvoices")) {
                    obj = JSON.parse(localStorage.getItem("grdInvoices"));
                }
            } catch (ex) {  }

            if (obj) {
                for (var i = 0; i < obj.length; i++) {
                    var col = obj[i];
                    if (!col.hidden) {
                        columns.push({ "Title": col.title, "Field": col.field, "IsNumber": col.isNumber, "IsDate": col.isDate });
                    }
                }
            }

            var type = "Invoice";
            var fileName = "DanhSachHoaDon";
            var data = { req: JSON.stringify(filter), column: JSON.stringify(columns)};
            _export.toExcel(type, fileName, data);
        };

        $scope.exportDetail = function () {
            var filter = $scope.invoices.reader.kvFilter;
            var columns = [];
            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;
            var type = "InvoiceWithDetail";
            var fileName = "DanhSachChiTietHoaDon";
            var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
            _export.toExcel(type, fileName, data);
        };

        //function updateDateRange() {
        //    var fromDate = new Date().IgnoreTime();
        //    var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);
            
        //    $scope.dateFilter.StartDate = defStart;
        //    $scope.dateFilter.EndDate = new Date().IgnoreTime();
        //}

        //updateDateRange();
        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
            //$("#otherCheck").prettyCheckable("check");
            $scope.dateFilter.TimeRange = 'other';
            $scope.filterUpdated();
            //$scope.dateFilterPopup.close();
        };

        $scope.dateFilterUpdated = function () {
            //if ($scope.dateFilter.TimeRange != 'other') {
            //    updateDateRange();
            //}

            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else {
                $scope.filterUpdated();
            }
        };

        $scope.filterUpdated = function () {
            $scope.invoices.filter(initFilter());
        };

        $scope.branchFilterUpdated = function () {
            $scope.filterUpdated();
        };
        $scope.priceBookFilterUpdated = function() {
            $scope.filterUpdated();
        };
        $scope.deliveryFilterUpdated = function () {
            $scope.filterUpdated();
        };
        var paymentColumns = [
             { "field": "Code", template: '<a href="javascript:void(0)" name="paymentItem" data="#=Code#">#=Code#</a>', "title": $scope._l.paymentCode, headerAttributes: { "class": "tdCode18" }, attributes: { "class": "tdCode18" } },
                        { "field": "TransDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { "field": "User", "title": $scope._l.employeeSale, format: "{0:n0}", sortable: false, headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
                        { "field": "Method", "title": $scope._l.order_InvoiceMethod, headerAttributes: { "class": "tdCodeTT" }, attributes: { "class": "tdCodeTT" } },
                        { "field": "Status", "title": $scope._l.status, headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" } },
                        { "field": "Amount", "title": $scope._l.order_InvoicePay, format: "{0:n0}", headerAttributes: { "class": "txtR tdPrice" }, attributes: { "class": "txtR tdPrice" } }

        ];
        var refundColumns = [
                    { "field": "Code", template: '<a href="\\#/#=viewUrl.returnList#?code=#=Code#" tartdPriceget="_blank">#=Code#</a>', "title": $scope._l.refund_Code, headerAttributes: { "class": "tdCode16" }, attributes: { "class": "tdCode16" } },
                    { "field": "ReturnDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                    { "field": "Username", "title": $scope._l.employeeSale, format: "{0:n0}", sortable: false, headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
                    { "field": "TotalReturn", "title": $scope._l.total, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdTotal txtR" }, attributes: { "class": "tdTotal txtR" } },
                    { "field": "Status", "title": $scope._l.status, headerAttributes: { "class": "tdSSL" }, attributes: { "class": "tdSSL" } }
        ];
        
        var deliveryColumns = [
                        { "field": "CreatedDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { "field": "UserName", "title": $scope._l.order_InvoiceCreatedBy, format: "{0:n0}", sortable: false, headerAttributes: { "class": "" }, attributes: { "class": "" } },
                        { "field": "StatusValue", "title": $scope._l.status, headerAttributes: { "class": "tdSSL" }, attributes: { "class": "tdSSL" } }
        ];

        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;
            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });

            var hideTab = function (index) {
                $(tabship.data("kendoTabStrip").items()[index]).attr("style", "display:none");
            };
            if ($scope.rights.canViewReturn) {

                var refunds = new kendo.data.DataSource({
                    type: "odata",
                    transport: {
                        read: {
                            url: "/api/returns?format=json&Includes=User&Includes=TotalReturn&InvoiceId=" + e.data.Id,
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests               
                            //tranditional: true 
                        }
                    },
                    change: function () {
                        if (this._total == 0) {
                            hideTab(1);
                        }
                    },
                    pageSize: $scope.pageSize,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true,
                    //filter: initFilter(),
                    schema: {
                        data: "Data",
                        total: "Total",
                        parse: function (response) {
                            if (response && response.Data) {
                                
                                for (var i = 0; i < response.Data.length; i++) {
                                    var t = response.Data[i];
                                    t.StatusValue = t.Status;
                                    t.Status = _refundStatus[t.Status];

                                    t.Username = t.User ? t.User.GivenName : "";
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                ReturnDate: { type: "date" },
                                //'Branch.Name': { type: "string" }
                            }
                        }
                    }
                });

                detailRow.find('.returnList').kendoGrid({
                    dataSource: refunds,
                    dataBinding: $scope.emptyGridFix,
                    columns: refundColumns
                });
            }
            else {
                hideTab(1);
            }

            var paymentDb = new kendo.data.DataSource({
                type: "odata",
                transport: {
                    read: {
                        url: "/api/payments?InvoiceId=" + e.data.Id + "&format=json&Includes=User&Includes=CustomerName&Includes=Invoice&GroupCode=true",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                change: function () {
                    if (this._total == 0) {
                        hideTab(2);
                    }
                },
                serverPaging: false,
                serverFiltering: false,
                serverSorting: true,
                schema: {
                    data: "Data",
                    total: "Total",
                    parse: function (response) {
                        if (response && response.Data) {
                            for (var j = 0; j < response.Data.length; j++) {
                                var t = response.Data[j];
                                t.Method = _paymentMethod[t.Method];
                                t.Status = _paymentStatus[t.Status];
                                //UserName is set by the api if GroupCode param is set to True
                                t.User = t.User ? t.User.GivenName : t.UserName;
                            }
                        }
                        return response;
                    },
                    model: {
                        fields: {
                            Code: { type: "string" },
                            CreatedDate: { type: "date" },
                            TransDate: { type: "date" }
                        }
                    }
                }
            });



            detailRow.find('.paymentList').kendoGrid({
                dataSource: paymentDb,
                dataBinding: $scope.emptyGridFix,
                columns: paymentColumns,
                dataBound: function () {
                    var scope = angular.element(this.wrapper).scope();
                    this.wrapper.find("a[name=paymentItem]").click(function () {
                        var code = $(this).attr("data");
                        scope.paymentDetail(code, function () {
                            scope.invoices.read();
                        });
                    });
                },
            });
            // Need to add permission to show this info
            var deliveryDb = new kendo.data.DataSource({
                type: "odata",
                transport: {
                    read: {
                        url: "/api/deliverytracking?InvoiceId=" + e.data.Id + "&format=json",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                change: function () {
                    if (this._total == 0) {
                        hideTab(3);
                    }
                },
                serverPaging: false,
                serverFiltering: false,
                serverSorting: true,
                schema: {
                    data: "Data",
                    total: "Total",
                    parse: function (response) {
                        return response;
                    },
                    model: {
                        fields: {
                            Code: { type: "string" },
                            CreatedDate: { type: "date" },
                            TransDate: { type: "date" }
                        }
                    }
                }
            });

            detailRow.find('.deliveryList').kendoGrid({
                dataSource: deliveryDb,
                dataBinding: $scope.emptyGridFix,
                columns: deliveryColumns,
                dataBound: function () {
                },
            });
            //end of deliveryList
        };

        $scope.returnDetail = function (id) {
            //$scope.$broadcast('showReturnDetail', id);
            $scope.returnPopup.showReturn(id, function () {
                //on save success
                $scope.refundDb.read();
            });
        };
        $scope.paymentDetail = function (code, callback) {
            //$scope.$broadcast('showPaymentDetail', code);
            $scope.paymentPopup.showPayment(code, callback);
        };
    }])
.directive('kvInvoicePopup', ['kvSession', '$rootScope', 'logger', 'InvoiceResource', 'kvConfirmBox', '$filter', 'kvLabel', 'settings', 'invoiceDeliveryType', 'SurchargeResource', 
    function (_session, $rootScope, _logger, _invoicesvc, _msgbox, $filter, _l, _setting, _invoiceDeliveryType, _surcharge) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];                       
                    }
                });
            },
            controller: [
                '$scope', 'invoiceStatus', function ($scope, _invoiceStatus) {
                    //
                    //t.StatusValue = t.Status;
                    //t.Status = _invoiceStatus[t.Status];
                    $scope._l = _l;
                    //$scope._m = _m;

                    $scope.window = {
                        openDetail: function () {
                            //$scope.dataItem = data;
                            $scope.wdInvoiceDetail.wrapper.addClass("k-window-poup k-window-fix k-window-masstel k-window-invoiceDetail");
                            $scope.wdInvoiceDetail.center().open();
                        }
                    };

                    $scope.dispose = function () {
                        $scope.dataItem = null;
                        //$scope.cursellers = null;
                        $scope.invoices = null;
                        $scope.onSave = null;
                        $scope.selectedProduct = null;
                    };

                    var r2 = _surcharge.get({ Permission: 'Surcharge_Read', ForManage: true });
                    r2.$promise.then(function (dp) {
                        $scope.surcharges = dp.Data;
                        refresh($scope);
                    });

                    this.showInvoice = function (id, selectedProduct, onSaveHandler) {
                        $scope.onSave = function (arg) {
                            $scope.wdInvoiceDetail.close();
                            execCb(onSaveHandler, arg);
                        };
                        $scope.selectedProduct = selectedProduct;
                        $scope.invoice = _invoicesvc.get({ invoiceId: id, Includes: ["TotalQuantity", "Branch", "Order", "Customer", "User", "SoldBy", "InvoiceOrderSurcharges", "Return"] });
                        $scope.invoice.$promise.then(function (data) {
                            $scope.invoice = data;
                            $scope.invoice.StatusValue = $scope.invoice.Status;
                            $scope.invoice.Status = _invoiceStatus[$scope.invoice.Status];

                            if ($scope.surcharges) {
                                angular.forEach($scope.invoice.InvoiceOrderSurcharges, function (s) {
                                    for (var k = 0; k < $scope.surcharges.length ; k++) {
                                        if (s.SurchargeId == $scope.surcharges[k].Id) {
                                            s.Name = $scope.surcharges[k].Name;
                                            break;
                                        }
                                    }
                                })
                            }

                            $scope.invoice.return = data.Return;
                            $scope.invoice.NewInvoiceTotal = $scope.invoice.NewInvoiceTotal !== undefined ? $scope.invoice.NewInvoiceTotal : $scope.invoice.Total;
                            $scope.invoice.ReturnTotal = data.Return ? data.Return.ReturnTotal : 0;

                            /*if (_setting.UseCod) {
                                if (data.InvoiceDelivery) {
                                    $scope.invoice.DeliveryDetail = data.InvoiceDelivery;
                                    for (var idx in _invoiceDeliveryType) {
                                        if (_invoiceDeliveryType.hasOwnProperty(idx)) {
                                            if (data.InvoiceDelivery && data.InvoiceDelivery.Type !== undefined) {
                                                if (data.InvoiceDelivery.Type == idx) {
                                                    $scope.invoice.DeliveryDetail.TypeName = _invoiceDeliveryType[idx];
                                                }
                                            }
                                        }
                                    }
                                }
                            }*/
                            $scope.wdInvoiceDetail.title($scope._l.invoice);
                        });
                        $scope.window.openDetail();
                        //$scope.loadRowDetail(id);
                    };
                    //inject to parent 
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }

                }
            ],
            templateUrl: _session.partialPath('invoice-popup.html')
        };
    }])
.directive('invoiceForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'UserResource', 'InvoiceResource', 'invoiceStatusMap', 'PrivilegeHelper', '$compile', '$timeout', 'settings', 'PartnerDeliveryResource', 'LocationResource', 'invoiceStatus', 'invoiceDeliveryType','$window', 
    function (_session, _l, emptyGridFix, _usersvc, _invoicesvc, _status, _p, $compile, $timeout, _setting, _partnerDeliveryResource, _locationResource, _invoiceStatus, _invoiceDeliveryType,$window) {
        var detailColumns = [
            { field: "ProductCode", title: _l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
            { field: "ProductName", title: _l.product_Name, template: '#=ProductName#<span class="txtN txtI dpb fs11 txtGray">#=Note#</span>', headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
            { field: "Price", title: _l.price, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
            { field: "Quantity", title: _l.quantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtC" }, attributes: { "class": "tdSLB txtC" } },
            { field: "Discount", title: _l.discount, format: "{0:n0}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
            { field: "SubTotal", title: _l.subTotalDetail, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal txtB" } }
        ];

        return {
            restrict: 'E',
            scope: { dataSelectedProduct: '=kvDataSelectedProduct', dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {

                function loadDetail(invoiceId) {
                    scope.disabled = (scope.dataItem.StatusValue == _status.Void) || (scope.dataItem.StatusValue == _status.Failed) || scope.noteditable || !_p.has('Invoice_Update');
                    scope.lockSeller = scope.disabled || !_p.has('Invoice_ModifySeller');
                    scope.hasVoid = _p.has('Invoice_Delete') && (scope.dataItem.StatusValue != _status.Void) && (scope.dataItem.StatusValue != _status.Failed);
                    scope.hasIssued = scope.dataItem.StatusValue == _status.Issued;
                    scope.order = scope.dataItem.Order;                    
                    scope.showCopy = (_p.isadmin() || _p.has('Invoice_CopyInvoice')) && !_session.retailer.isCoffee;
                    if (!scope.dataItem.TotalQuantity) {
                        scope.invoice = _invoicesvc.get({ invoiceId: invoiceId, Includes: ["TotalQuantity", "Order", "User", "SoldBy", "Return"] }, function (data) {
                            
                            scope.dataItem.TotalQuantity = data.TotalQuantity;
                            scope.dataItem.Order = data.Order;
                            scope.return = data.Return;
                            scope.dataItem.return = data.Return;
                            scope.dataItem.User = data.User;
                            scope.dataItem.SoldBy = data.SoldBy;
                            scope.order = data.Order;
                            scope.dataItem.CustomerDebt = data.CustomerDebt;
                            scope.dataItem.CustomerOldDebt = data.CustomerOldDebt;
                            scope.dataItem.selectedBook = data.PriceBookId ? data.PriceBookId : 0;
                            //scope.isUseCod = data.InvoiceDelivery ? true : false;
                            scope.isUseCod = scope.dataItem.UsingCod === 1 ? true : false;
                            scope.invStatus = [];
                            for (var idx in _invoiceStatus) {
                                if (_invoiceStatus.hasOwnProperty(idx)) {
                                    if (idx == _status.Void) continue;
                                    scope.invStatus.push({ Id: parseInt(idx), Name: _invoiceStatus[idx] });
                                }
                            }
                            if (scope.isUseCod || _setting.UseCod) {
                                scope.dataItem.DeliveryDetail = {};
                                scope.deliveryType = [];
                                for (var idx in _invoiceDeliveryType) {
                                    if (_invoiceDeliveryType.hasOwnProperty(idx)) {
                                        scope.deliveryType.push({ Id: parseInt(idx), Name: _invoiceDeliveryType[idx] });
                                    }
                                }
                                if (!data.InvoiceDelivery) {
                                    scope.dataItem.DeliveryDetail.Type = scope.deliveryType[0].Id;
                                } else {
                                    scope.dataItem.DeliveryDetail = data.InvoiceDelivery;
                                    
                                    if(typeof scope.dataItem.DeliveryDetail.deliverySearchParam === "undefined")
                                        scope.dataItem.DeliveryDetail.deliverySearchParam = scope.dataItem.DeliveryDetail.PartnerDelivery ? scope.dataItem.DeliveryDetail.PartnerDelivery.Name : "";
                                    if (typeof scope.dataItem.DeliveryDetail.locationSearchParam === "undefined")
                                        scope.dataItem.DeliveryDetail.locationSearchParam = scope.dataItem.DeliveryDetail.Location ? scope.dataItem.DeliveryDetail.Location.Name : "";
                                    for (var idx in _invoiceDeliveryType) {
                                        if (data.InvoiceDelivery && data.InvoiceDelivery.Type !== undefined) {
                                            if (data.InvoiceDelivery.Type == idx) {
                                                scope.dataItem.DeliveryDetail.TypeName = _invoiceDeliveryType[idx];
                                            }
                                        }
                                    }
                                }
                            }

                            if (data.Order)
                                scope.dataItem.OrderCode = data.Order.Code;


                            scope.dataItem.NewInvoiceTotal = scope.dataItem.NewInvoiceTotal !== undefined ? scope.dataItem.NewInvoiceTotal : scope.dataItem.Total;
                            scope.dataItem.ReturnTotal = data.Return ? data.Return.ReturnTotal : 0;
                        });
                    }

                    var ds = new kendo.data.DataSource({
                        type: "odata",
                        transport: {
                            read: {
                                url: "/api/invoices/" + invoiceId + "/details?format=json&Includes=ProductName&Includes=ProductSName&Includes=ProductCode&&Includes=SubTotal&Includes=Product&ForSale=true",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        change: function (ob) {
                            scope.dataItem.InvoiceDetails = ob.items;
                        },
                        serverPaging: false,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            parse: function (response) {
                                //do not display negative discount value
                                var subTotal = 0;                                
                                angular.forEach(response.Data, function (r) {
                                    //console.log(r);
                                    if (r.Discount && r.Discount < -0.0000001) {
                                        r.Price -= r.Discount;
                                        r.Discount = null;
                                    }
                                    r.Note = r.Note ? r.Note : '';
                                    r.Description = r.Product.Description ? r.Product.Description : '';
                                    r.Unit = r.Product.Unit ? r.Product.Unit : '';
                                    // get product name without unit in brackets
                                    //#2896 Fix ProductNameNoUnit
                                    //r.ProductNameNoUnit = r.ProductName.replace(/ *\([^)]*\) */g, "");
                                    r.BasePrice = r.Product.BasePrice;
                                    subTotal += r.Price ? (r.Price - (r.Discount ? r.Discount : 0)) * r.Quantity : 0;                                    
                                });                                
                                scope.dataItem.SubTotal = subTotal;
                                return response;
                            }
                        }                        
                    });
                    scope.showpopup = function (id) {
                        scope["serialpopup" + id].showWindow();
                    }
                    
                    elem.find(".invoiceDetail").empty();
                    elem.find('.invoiceDetail').kendoGrid({
                        dataSource: ds,
                        dataBinding: emptyGridFix,
                        columns: detailColumns,
                        dataBound: function (e) {
                            // add serial input
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    scope["serials" + row.Id] = row.SerialNumbers.split(",");
                                    scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",");

                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    if (row.SerialNumbers.split(",").length > maxShow)
                                        scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",").slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + scope._l.viewmore + '</a><kv-view-serial-popup kv-name="serialpopup' + row.Id + '" kv-source="serials' + row.Id + '"></kv-view-serial-popup>';

                                    var tags = angular.element($('<tr class="row-serial"><td colspan="6"><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag}}</li></ul>' + popup + ' </td></tr>'));
                                    var el = $compile(tags)(scope);
                                    
                                   

                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }

                                if (scope.dataSelectedProduct) {
                                    for (var j = 0; j < scope.dataSelectedProduct.length; j++) {
                                        if (row.Product.Id == scope.dataSelectedProduct[j]) {
                                            $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                        }
                                    }
                                }
                            });
                            if ($('tr').hasClass('tr-currentSelected')) {
                                e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                            }
                        }
                    });                    

                    scope.sellers = _usersvc.getSellers({ BranchId: scope.dataItem.BranchId });
                    
                }
                
                if (scope.dataItem) {
                    if (scope.dataItem.NewInvoiceId > 0)
                        loadDetail(scope.dataItem.NewInvoiceId);
                    else
                        loadDetail(scope.dataItem.Id);
                } else {
                    scope.$watch('dataItem.Id', function (val) {
                        if (val) {
                            loadDetail(val);
                        }
                    });
                }
            },
            controller: [
                '$scope', 'kvMessages', 'InvoiceResource', 'logger', '$filter', 'kvConfirmBox', 'kvExportToExcel', 'printTypeMap', 'kvPrinter', 'settings', 'PrivilegeHelper', 
                function ($scope, _m, _invoicesvc, _logger, $filter, _msgbox, _export, _printTypeMap, _print, _setting, _p) {
                    $scope._l = _l;
                    $scope.viewUrl = viewUrl;                    
                    $scope.settings = _setting;
                    var hasVoidPayment = _p.has("Payment_Delete");
                    var hasUpdatePayment = _p.has("Payment_Update");

                    
                    $scope.cancel = function () {
                        var msg = $filter("stringFormat")(_m.voidSaleInvoiceConfirm, [$scope.dataItem.Code]);
                        if($scope.dataItem.ReturnId)
                            msg = $filter("stringFormat")(_l.voidNewInvoiceConfirm, [$scope.dataItem.Code,$scope.return.Code]);

                        var ivmsg = _msgbox.confirm(msg , _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);

                        ivmsg.confirm = function () {
                            var hasPayment = $scope.dataItem.TotalPayment > 0;
                            if ($scope.dataItem.ReturnId)
                                hasPayment = true;

                            if (hasPayment && hasVoidPayment) {
                                var pmmsg = _msgbox.confirm($scope._l.invoice_MsgDelPurchaseOrder, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                pmmsg.confirm = function () {
                                    voidSale(true);
                                };
                                pmmsg.cancel = function () {
                                    voidSale(false);
                                };
                            } else {
                                voidSale(false);
                            }
                        };

                        //_msgbox.onConfirm = function () {

                        //  _msgbox.confirm($scope._l.invoice_MsgDelPurchaseOrder, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        //_msgbox.onConfirm = function () {
                        //  voidSale(true);
                        //};
                        //_msgbox.onCancel = function () {
                        //  voidSale(false);
                        //};
                        //};
                    };

                    function voidSale(voidpayment) {
                        _invoicesvc.remove({ invoiceId: $scope.dataItem.Id, IsVoidPayment: voidpayment, CompareCode: $scope.dataItem.Code }, function () {
                            _logger.success($filter("stringFormat")(_m.voidSaleSuccessfully, [$scope.dataItem.Code]));
                            refreshGrid();
                        }, callbackFail);
                    }

                    function refreshGrid() {
                        execCb($scope.onSave, $scope.dataItem);
                    }
                    $scope.printContent = function () {
                        
                        if ($scope.dataItem.Customer && $scope.dataItem.Customer.Debt)
                            $scope.dataItem.Customer.OldDebt = $scope.dataItem.Customer.Debt;

                        $scope.dataItem.Discount = $scope.dataItem.Discount ? $scope.dataItem.Discount : 0;
                        $scope.dataItem.retailerInfo = {
                            "name": _session.retailer.name,
                            "address": _session.retailer.address,
                            "phone": _session.retailer.phone,
                            "logo": _session.retailer.logo
                        };
                        _print.printfromtype(_printTypeMap.Invoice, $scope.dataItem);
                    };
                    $scope.exportDetail = function () {
                        var id = $scope.dataItem.Id;
                        var type = "InvoiceDetail";
                        var fileName = "ChiTietHoaDon_" + $scope.dataItem.Code;
                        var data = { req: id };
                        _export.toExcel(type, fileName, data);
                    };
                    $scope.saveProcess = function() {
                        if ($scope.dataItem.TotalPayment && hasUpdatePayment) {
                            var savebox = _msgbox.confirm(_l.msgWarningUpdate, _l.titleUpdateInvoice);
                            savebox.confirm = function () {
                                save(true);
                            };
                            savebox.cancel = function () {
                                save(false);
                            };
                        } else {
                            save(false);
                        }
                    };
                    $scope.update = function () {
                        if ($scope.settings.UseCod) {
                            if ($scope.dataItem.StatusValue == _status.Void || $scope.dataItem.StatusValue == _status.Failed) {
                                if ($scope.dataItem.StatusValue == _status.Void) {
                                    $scope.cancel();
                                }
                                if ($scope.dataItem.StatusValue == _status.Failed) {
                                    var ivmsg = _msgbox.confirm($filter("stringFormat")($scope._l.deliveryPartner_MsgUpdateStatus1, [$scope.dataItem.Code, "Không giao được"]), $scope._l.deliverypartner_TitleUpdateStatus, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                    ivmsg.confirm = function () {
                                        $scope.saveProcess();
                                    };
                                }
                            } else {
                                if ($scope.dataItem.DeliveryDetail && $scope.dataItem.DeliveryDetail.Location && $scope.dataItem.DeliveryDetail.Location.Name == "") {
                                    delete $scope.dataItem.DeliveryDetail.Location;
                                    $scope.dataItem.DeliveryDetail.LocationId = null;
                                }
                                if ($scope.dataItem.DeliveryDetail && $scope.dataItem.DeliveryDetail.PartnerDelivery && $scope.dataItem.DeliveryDetail.PartnerDelivery.Name == "") {
                                    delete $scope.dataItem.DeliveryDetail.PartnerDelivery;
                                    $scope.dataItem.DeliveryDetail.DeliveryBy = null;
                                }
                                $scope.saveProcess();
                            }
                        } else {
                            $scope.saveProcess();
                        }
                    };

                    function save(isUpdatePayment) {
                        if ($scope.locked) {
                            console.error($scope._l.invoice_MsgLockedClickTooMany);
                            return;
                        }
                        $scope.locked = true;
                        // revert status
                        $scope.dataItem.Status = $scope.dataItem.StatusValue;
                        _invoicesvc.save({ Invoice: $scope.dataItem, IsUpdatePayment: isUpdatePayment }, callbackSuccess, callbackFail);
                    }

                    function callbackFail(err) {
                        $scope.locked = false;
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        $scope.locked = false;
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.invoice, data.Code]));
                        execCb($scope.onSave, $scope.dataItem);
                    }

                    $scope.cloneInvoice = function () {
                        $window.open('/' + viewUrl.sale + '/#/?invoice=' + $scope.dataItem.Id);
                    };
                }
            ],
            templateUrl: _session.partialPath('invoice-form.html')
        };
    }])
.directive('newInvoiceForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'UserResource', 'InvoiceResource', 'invoiceStatusMap', 'PrivilegeHelper', '$compile', '$timeout', 'settings', 'PartnerDeliveryResource', 'LocationResource', 'invoiceStatus', 'invoiceDeliveryType','$filter','SurchargeResource',
    function (_session, _l, emptyGridFix, _usersvc, _invoicesvc, _status, _p, $compile, $timeout, _setting, _partnerDeliveryResource, _locationResource, _invoiceStatus, _invoiceDeliveryType, $filter,_surcharge) {
        var detailColumns = [
            { field: "ProductCode", title: _l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
            { field: "ProductName", title: _l.product_Name, template: '#=ProductName#<span class="txtN txtI dpb fs11 txtGray">#=Note#</span>' },
            { field: "Price", title: _l.price, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
            { field: "Quantity", title: _l.quantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtC" }, attributes: { "class": "tdSLB txtC" } },
            { field: "Discount", title: _l.discount, format: "{0:n0}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
            { field: "SubTotal", title: _l.subTotalDetail, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal txtB" } }
        ];

        return {
            restrict: 'E',
            scope: { dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {

                function loadDetail(invoiceId) {
                   
                    scope.lockSeller = scope.disabled || !_p.has('Invoice_ModifySeller');
                    scope.invoice = _invoicesvc.get({ invoiceId: invoiceId, Includes: ["TotalQuantity", "User", "SoldBy","PaymentCode","InvoiceOrderSurcharges","Return"] }, function (data) {
                        scope.dataItem2 = data;
                        
                        if (scope.dataItem2) {
                            // for printing
                            scope.return = data.Return;
                            scope.dataItem.TotalInvoice = scope.dataItem2.Total;
                            scope.dataItem.Discount2 = scope.dataItem2.Discount;
                            scope.dataItem.FinalReturn = scope.dataItem.TotalReturn - (scope.dataItem.ReturnFee ? scope.dataItem.ReturnFee : 0) - (scope.dataItem.ReturnDiscount ? scope.dataItem.ReturnDiscount : 0);
                            scope.dataItem.SumTotal = Math.abs(scope.dataItem.FinalReturn - scope.dataItem.TotalInvoice);
                            scope.dataItem.ReturnSumTotal = scope.dataItem.FinalReturn > scope.dataItem.TotalInvoice ? Math.abs(scope.dataItem.FinalReturn - scope.dataItem.TotalInvoice) : 0;
                            scope.dataItem.PayingAmount = Math.abs(scope.dataItem.TotalPayment - scope.dataItem2.TotalPayment);
                            scope.dataItem.selectedBook = scope.dataItem2.PriceBookId ? scope.dataItem2.PriceBookId : 0;
                            if (scope.dataItem.FinalReturn  > scope.dataItem.TotalInvoice)
                                scope.dataItem.txtPay = "Tiền trả khách";
                            else {
                                scope.dataItem.txtPay = "Tiền khách trả";
                                scope.dataItem.isCustomerPay = true;
                            }

                            // tab invoice
                            if (scope.dataItem.Branch)
                                scope.dataItem.BranchName = scope.dataItem.Branch.Name;

                            scope.dataItem2.PurchaseDate = $filter('parseDate')(scope.dataItem2.PurchaseDate);
                            scope.dataItem2.StatusValue = scope.dataItem2.Status;
                            scope.dataItem2.Status = _invoiceStatus[scope.dataItem2.Status];

                            scope.hasVoid = _p.has('Invoice_Delete') && (scope.dataItem2.StatusValue != _status.Void);
                            scope.disabled = (scope.dataItem2.StatusValue == _status.Void) || (scope.dataItem2.StatusValue == _status.Failed) || scope.noteditable || !_p.has('Invoice_Update');
                            scope.hasIssued = scope.dataItem2.StatusValue == _status.Issued;

                            // du no sau doi tra hang
                            scope.dataItem.CustomerDebt = data.CustomerDebt;
                            if (scope.dataItem.surcharges) {
                                angular.forEach(scope.dataItem2.InvoiceOrderSurcharges, function (s) {
                                    for (var k = 0; k < scope.dataItem.surcharges.length ; k++) {
                                        if (s.SurchargeId == scope.dataItem.surcharges[k].Id) {
                                            s.Name = scope.dataItem.surcharges[k].Name;
                                            break;
                                        }
                                    }
                                })
                            }

                            scope.dataItem.InvoiceOrderSurcharges = scope.dataItem2.InvoiceOrderSurcharges;

                            scope.dataItem2.NewInvoiceTotal = scope.dataItem2.NewInvoiceTotal !== undefined ? scope.dataItem2.NewInvoiceTotal : scope.dataItem2.Total;
                            scope.dataItem2.ReturnTotal = data.Return ? data.Return.ReturnTotal : 0;
                        }
                    });
                    

                    var ds = new kendo.data.DataSource({
                        type: "odata",
                        transport: {
                            read: {
                                url: "/api/invoices/" + invoiceId + "/details?format=json&Includes=Product&Includes=ProductName&Includes=ProductSName&Includes=ProductCode&&Includes=SubTotal&ForSale=true",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        change: function (ob) {
                            scope.dataItem.InvoiceDetails = ob.items;
                        },
                        serverPaging: false,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            parse: function (response) {
                                var subTotal = 0;
                                //do not display negative discount value 
                                angular.forEach(response.Data, function (r) {
                                    //console.log(r);
                                    if (r.Discount && r.Discount < -0.0000001) {
                                        r.Price -= r.Discount;
                                        r.Discount = null;
                                    }
                                    r.Note = r.Note ? r.Note : '';
                                    r.BasePrice = r.Product.BasePrice;
                                    subTotal += r.Price ? (r.Price - (r.Discount ? r.Discount : 0)) * r.Quantity : 0;
                                });
                                scope.dataItem.NewSubTotal = subTotal;
                                return response;
                            }
                        }
                    });
                    scope.showpopup = function (id) {
                        scope["serialpopup" + id].showWindow();
                    }

                    elem.find(".invoiceDetail").empty();
                    elem.find('.invoiceDetail').kendoGrid({
                        dataSource: ds,
                        dataBinding: emptyGridFix,
                        columns: detailColumns,
                        dataBound: function (e) {
                            // add serial input
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    scope["serials" + row.Id] = row.SerialNumbers.split(",");
                                    scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",");

                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    if (row.SerialNumbers.split(",").length > maxShow)
                                        scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",").slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + scope._l.viewmore + '</a><kv-view-serial-popup kv-name="serialpopup' + row.Id + '" kv-source="serials' + row.Id + '"></kv-view-serial-popup>';

                                    var tags = angular.element($('<tr class="row-serial"><td colspan="6"><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag}}</li></ul>' + popup + ' </td></tr>'));
                                    var el = $compile(tags)(scope);



                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }
                            });
                        }
                    });
                    scope.sellers = _usersvc.getSellers({ BranchId: scope.dataItem.BranchId });

                }

                if (scope.dataItem) {
                    if (scope.dataItem.NewInvoiceId > 0)
                        loadDetail(scope.dataItem.NewInvoiceId);
                } else {
                    scope.$watch('dataItem.Id', function (val) {
                        if (val) {
                            loadDetail(val);
                        }
                    });
                }
            },
            controller: [
                '$scope', 'kvMessages', 'InvoiceResource', 'logger', '$filter', 'kvConfirmBox', 'kvExportToExcel', 'printTypeMap', 'kvPrinter', 'settings', 'PrivilegeHelper',
                function ($scope, _m, _invoicesvc, _logger, $filter, _msgbox, _export, _printTypeMap, _print, _setting, _p) {
                    $scope._l = _l;
                    $scope.viewUrl = viewUrl;
                    $scope.settings = _setting;
                    var hasVoidPayment = _p.has("Payment_Delete");
                    var hasUpdatePayment = _p.has("Payment_Update");

                    function refreshGrid() {
                        execCb($scope.onSave, $scope.dataItem2);
                    }
                    $scope.printContent = function () {
                       
                        $scope.dataItem.retailerInfo = {
                            "name": _session.retailer.name,
                            "address": _session.retailer.address,
                            "phone": _session.retailer.phone,
                            "logo": _session.retailer.logo
                        };
                        _print.printfromtype(_printTypeMap.NewRefund, $scope.dataItem);
                    };
                    $scope.exportDetail = function () {
                        var id = $scope.dataItem2.Id;
                        var type = "InvoiceDetail";
                        var fileName = "ChiTietHoaDon_" + $scope.dataItem2.Code;
                        var data = { req: id };
                        _export.toExcel(type, fileName, data);
                    };
                    $scope.paymentDetail = function (code) {
                        
                        $scope.invoicepaymentPopup.showPayment(code, function () {
                           
                        });
                    };
                    $scope.saveProcess = function () {
                        if ($scope.dataItem2.TotalPayment && hasUpdatePayment) {
                            var savebox = _msgbox.confirm(_l.msgWarningUpdate, _l.titleUpdateInvoice);
                            savebox.confirm = function () {
                                save(true);
                            };
                            savebox.cancel = function () {
                                save(false);
                            };
                        } else {
                            save(false);
                        }
                    };
                    function save(isUpdatePayment) {
                        if ($scope.locked) {
                            console.error($scope._l.invoice_MsgLockedClickTooMany);
                            return;
                        }
                        $scope.locked = true;
                        // revert status
                        $scope.dataItem2.Status = $scope.dataItem2.StatusValue;
                        _invoicesvc.save({ Invoice: $scope.dataItem2, IsUpdatePayment: isUpdatePayment }, callbackSuccess, callbackFail);
                    }

                    $scope.cancel = function () {

                        var msg = $filter("stringFormat")(_m.voidSaleInvoiceConfirm, [$scope.dataItem2.Code]);
                        if ($scope.dataItem2.ReturnId)
                            msg = $filter("stringFormat")(_l.voidNewInvoiceConfirm, [$scope.dataItem2.Code, $scope.return ? $scope.return.Code : '']);

                        var ivmsg = _msgbox.confirm(msg, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);

                        //var ivmsg = _msgbox.confirm($filter("stringFormat")(_m.voidSaleInvoiceConfirm, [$scope.dataItem2.Code]), _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);

                        ivmsg.confirm = function () {
                            if ($scope.dataItem2.TotalPayment && hasVoidPayment) {
                                var pmmsg = _msgbox.confirm($scope._l.invoice_MsgDelPurchaseOrder, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                pmmsg.confirm = function () {
                                    voidSale(true);
                                };
                                pmmsg.cancel = function () {
                                    voidSale(false);
                                };
                            } else {
                                voidSale(false);
                            }
                        };
                    };
                    function voidSale(voidpayment) {
                        _invoicesvc.remove({ invoiceId: $scope.dataItem2.Id, IsVoidPayment: voidpayment, CompareCode: $scope.dataItem2.Code }, function () {
                            _logger.success($filter("stringFormat")(_m.voidSaleSuccessfully, [$scope.dataItem2.Code]));
                            refreshGrid();
                        }, callbackFail);
                    }

                    function callbackFail(err) {
                        $scope.locked = false;
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        $scope.locked = false;
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.invoice, data.Code]));
                        execCb($scope.onSave, $scope.dataItem2);
                    }
                }
            ],
            templateUrl: _session.partialPath('new-invoice-form.html')
        };
    }])
.factory('invoiceColumns', ['kvLabel', function (_l) {
    return [{ "field": "Code", "title": _l.invoiceCode, headerAttributes: { "class": "tdCode18" }, attributes: { "class": "tdCode18" } },
        { "field": "PurchaseDate", "title": _l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true },
        { "field": "ModifiedDate", "title": "Ngày cập nhật",  format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true, hidden:true },
        { "field": "Customer.Name", "title": _l.customer, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
        { "field": "Customer.ContactNumber", "title": _l.print_Phone, headerAttributes: { "class": "tdPhone" }, attributes: { "class": "tdPhone" }, hidden: true },
        { "field": "Customer.Address", "title": _l.address, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" }, hidden: true },
        { "field": "Branch.Name", "title": _l.branch,hidden:true, headerAttributes: { "class": "tdBranch" }, attributes: { "class": "tdBranch" } },
        { "field": "SoldBy.GivenName", "title": _l.employeeSale, hidden: true, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" } },
        { "field": "Description", "title": _l.note, hidden: true, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" }, template: "{{dataItem.Description|truncateDesc}}" },
        { "field": "SubTotal", "title": _l.subTotal, hidden: false, format: "{0:n0}", headerAttributes: { "class": "tdSSL txtR" }, attributes: { "class": "tdSSL txtR" }, isNumber: true, sortable: false },
        { "field": "Discount", "title": _l.discount, hidden: true, format: "{0:n0}", headerAttributes: { "class": "tdCodeTT txtR" }, attributes: { "class": "tdCodeTT txtR" }, isNumber: true },
        { "field": "TotalAfterDiscount", "title": _l.subTotalAfterDiscount, hidden: true, format: "{0:n0}", headerAttributes: { "class": "tdTotalPro txtR" }, attributes: { "class": "tdTotalPro txtR" }, isNumber: true, sortable: false },
        { "field": "Surcharge", "title": _l.surcharge, hidden: true, format: "{0:n0}", headerAttributes: { "class": "tdSSLP txtR" }, attributes: { "class": "tdSSLP txtR" }, isNumber: true },
        { "field": "NewInvoiceTotal", "title": _l.paidCustomer, format: "{0:n0}", headerAttributes: { "class": "tdSSLP txtR" }, attributes: { "class": "tdSSLP txtR" }, isNumber: true },
        { "field": "TotalPayment", "title": _l.paidAmount, format: "{0:n0}", headerAttributes: { "class": "tdSSLP txtR" }, attributes: { "class": "tdSSLP txtR" }, isNumber: true },
        { "field": "Status", template: '<span class="#=classStatus#">#=Status#</span>', "title": _l.status, headerAttributes: { "class": "tdStatusST" }, attributes: { "class": "tdStatusST" } }
    ];
}]);
'use strict'
kvApp.controller('BranchUpdateCtrl', ['$scope', 'BranchResource', 'branchType', 'branchTypeMap', '$location', 'BranchResource', 'logger', '$routeParams', 'CommonServices', '$route', 'SettingResource', 'UserResource',
function ($scope, _branches, _branchType, _branchTypeMap, $location, _branch, _logger, $routeParams, _commonServ, $route, _settings, _user) {

    var openWindow = function (branch) {

        var listeners = {
            onSave: function (data) {
                _logger.success($scope._m.branchSaveSuccess);
                $scope.branchWindow.close();
                $scope.branches.read();
            },
            onSaveError: function (err) {
                _logger.error(err);
            },
            onCancel: function () {
                $scope.branchWindow.close();
            },
            onUpdatePermision: function () {
                //   $location.path("/" + viewUrl.branchList);
                location.reload();
            }
        };
        if (!branch)
            branch = {};
        else {
            $scope.source = branch;
            //make a copy
            branch = angular.copy(branch);
        }


        $scope.branchWindow.title($scope._l.branch);

        $scope.branchForm.setListeners(listeners);
        $scope.branchForm.setBranch(branch);
        $scope.branchWindow.wrapper.addClass("k-window-poup k-window-poup-bt k-window-masstel k-window-branch");
        $scope.branchWindow.center().open();
        refresh($scope);
    };
    $scope.$on(app.events.showBranchForm, function (evt, data) {
        openWindow(data);
        $scope.branchWindow.onClose = function (e) {
            if ($scope.branchForm) {
                $scope.branchForm.clearListener();
            }
        };
    });
}]).controller('BranchListCtrl', ['$scope', 'BranchResource', 'kendofilter', '$filter', 'branchType', 'branchTypeMap', '$location', 'kvConfirmBox', 'logger', '$route', 'CommonServices',
function ($scope, _branches, _filter, $filter, _branchType, _branchTypeMap, $location, _msgbox, _logger, $route, _commonServ) {
    $scope.Permissions = [];
    $scope.rights = {}
    $scope.rights.canAdd = $scope._p.has('Branch_Create');
    $scope.rights.canDelete = $scope._p.has('Branch_Delete');
    $scope.rights.canUpdate = $scope._p.has('Branch_Update');
    init();

    function showPopup(data) {

        $scope.$broadcast(app.events.showBranchForm, data);
    }
    $scope.redirectToAdd = function () {
        showPopup(null);
    };

    $scope.updateBranch = function (data) {
        showPopup(data);
    };

    $scope.removeUser = function (e) {
        var userId = e.dataItem.Id;
        _msgbox.confirm($scope._l.user_MsgDel, $scope._l.user_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgbox.onConfirm = function () {
            //remove user from branch
        }
    };

    $scope.editUser = function () {
        $scope.branchEditUserRolePopup.showPopup();
    };

    $scope.deleteBranch = function (branchId, branchName) {
        _msgbox.confirm($scope._l.branch_MsgDel, $scope._l.branch_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgbox.onConfirm = function () {
            _branches.deleteBranch({
                Id: branchId,
                CompareBranchName: branchName
            }, function (result) {
                _logger.success(result.Message);
                $scope.branches.read();
                updateBranchList();
            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
    };

    $scope.grvDetailInit = function (e) {
        var detailRow = e.detailRow;
        var branchId = e.data.Id;


        var tabship = detailRow.find(".tabstrip").kendoTabStrip({
            animation: false
        });

        grid(branchId, detailRow);
    };

    $scope.bindedGrid;
    $scope.grvdataBinding = function (arg) {
        $scope.bindedGrid = arg.sender;
        $scope.$apply();
    };

    function grid(branchId, detailRow) {
        $scope.users = new kendo.data.DataSource({
            type: "odata",
            autoSync: true,
            transport: {
                read: {
                    url: "/api/branchs/" + branchId + "/permissions?Includes=User&Includes=Role&format=json",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests                
                    //tranditional: true 
                }
            },
            pageSize: 5,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    fields: {
                    }
                }
            }
        });

        detailRow.find("#tblsub").kendoGrid({
            type: "odata",
            autoSync: true,
            dataSource: $scope.users,
            dataBinding: $scope.emptyGridFix,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            pageable: { pageSize: 10, refresh: false, pageSizes: false, buttonCount: 5, messages: { display: $scope._l.pagerInfo } },
            columns: [
                {
                    field: "User.GivenName",
                    title: $scope._l.branch_User,
                    hidden: false,
                    attributes: { "class": "" },
                    headerAttributes: { "class": "" },
                    template: "<a href='/\\#/Users?Code=#=User.UserName#' target=\"_blank\">#=User.GivenName#</a>"
                },
                {
                    field: "User.UserName",
                    title: $scope._l.branch_UserName,
                    headerAttributes: { "class": "tdBranch" },
                    attributes: { "class": "tdBranch" }
                },
                {
                    field: "Role.Name",
                    title: $scope._l.branch_UserRole,
                    headerAttributes: { "class": "tdBranch" },
                    attributes: { "class": "tdBranch" }
                }
            ]
        });
    }

    //Main grid
    $scope.branches = new kendo.data.DataSource({
        type: "odata",
        autoSync: true,
        transport: {
            read: {
                url: "/api/branchs?format=json&Includes=Permissions",
                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests                
                //tranditional: true 
            }
        },
        pageSize: $scope.pageSize,
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true,
        filter: initFilter(),
        schema: {
            data: "Data",
            total: "Total",
            parse: function(response) {
                if (response) {
                    angular.forEach(response.Data, function (r) {
                        r.CompareBranchName = r.Name;
                    });
                }
                return response;
            },
            model: {
                fields: {
                    Name: { type: "string" },
                    ContactNumber: { type: "string" },
                    Address: { type: "string" },
                    TotalUser: { type: "string" },
                    Email: { type: "string" }
                }
            }
        }
    });

    $scope.filterByName = function () {
        if ($scope.filterName) {
            var condition = [_filter.newCondition("Name", $scope.filterName, "contains")];
            _filter.filter($scope.branches, condition, "and");
        } else {
            _filter.remove($scope.branches, "Name");
        }
    };

    $scope.filterByPageSize = function () {
        $scope.branches.pageSize(parseInt($scope.pageSize));
    };

    function updateBranchList() {
        _commonServ.updatePermission(function () {
            location.reload();
        });
    }

    function init() {
        if ($("#templDetail").length > 0) {
            $scope.detailTemplate = kendo.template($("#templDetail").html());
        }

        $scope.pageSizes = pager.pageSizes;
        $scope.pageSize = pager.defaultList;
    }

    function initFilter() {
        var filter = [];
        var condition = [];


        return filter;
    }

}])
.directive('kvBranchFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('branch-filter.html')
    };
}])
.directive('kvBranchForm', ['kvSession', 'BranchResource', 'branchType', 'branchTypeMap', '$location', 'BranchResource', 'logger', '$routeParams', 'CommonServices', '$route', 'SettingResource', 'UserResource', 'PrivilegeHelper', 'kvLabel', 'kvMessages',
function (_session, _branches, _branchType, _branchTypeMap, $location, _branch, _logger, $routeParams, _commonServ, $route, _settings, _user, _privilege, _label, _messages) {
    return {
        restrict: 'E',
        scope: { formName: '@formName' },
        controller: ['$scope', function ($scope) {
            $scope._p = _privilege;
            $scope._m = _messages;
            $scope._l = _label;
            $scope.Branch = {};
            $scope.Permissions = [];
            $scope.Roles = _settings.getRoles({ IncludePrivileges: true });
            $scope.rights = {}
            $scope.listeners = {}
            $scope.rights.canAdd = $scope._p.has('Branch_Create');
            $scope.rights.canDelete = $scope._p.has('Branch_Delete');
            $scope.rights.canUpdate = $scope._p.has('Branch_Update');
            $scope.searchTermChanged = function () {
                search($scope.userSearchTerm);
            };

            function search(query) {
                var r = _user.autocomplete({ term: query });
                r.$promise.then(function (result) {
                    $scope.users = result;
                    refresh($scope);
                }, function (err) {
                });
            };

            $scope.userClicked = function (clickedUser) {
                $scope.Permissions.push({ UserId: clickedUser.Id, RoleId: 0, User: { GivenName: clickedUser.GivenName } });
            };

            $scope.addPermission = function () {
                $scope.Permissions.push({ UserId: 0, RoleId: 0 });
            };

            $scope.removePermission = function (index) {
                $scope.Permissions.splice(index, 1);
            };

            $scope.userAutoComplete = {
                dataSource: new kendo.data.DataSource({
                    type: "odata",
                    serverFiltering: true,
                    transport: {
                        read: {
                            url: "/api/users/suggest?format=json",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    },
                    filter: null
                }),
                ignoreCase: false,
                dataTextField: "GivenName",
                dataValueField: "Id",
                filter: "contains",
                minLength: 1
            };

            $scope.suggestionChange = function (e) {
                var dataItem = this.dataItem(e.item.index());
                var index = this.wrapper.find(".k-input").attr("uid");
                $scope.Permissions[index].UserId = dataItem.Id;
            }

            $scope.saveBranch = function () {
                var i = 1;
                _branch.saveBranch({
                    Branch: $scope.Branch
                    //Permissions: $scope.Permissions
                }, function (data) {
                    //      $scope.redirectToList();
                    if ($scope.listeners.onSave) {
                        execCb($scope.listeners.onSave);
                    }
                    // _logger.success($scope._m.branchSaveSuccess);
                    updateBranchList();
                }, function (err) {
                    if ($scope.listeners.onSaveError) {
                        execCb($scope.listeners.onSaveError, getMessage(err));
                    }

                });
            };
            $scope.cancel = function () {
                if ($scope.listeners.onCancel) {
                    execCb($scope.listeners.onCancel);
                }
            }
            //$scope.redirectToList = function () {
            //    $location.path("/" + viewUrl.branchList);
            //};

            this.setListeners = function (listener) {
                $scope.listeners = listener;
            }
            this.clearListener = function () {
                $scope.listeners = {};
            }

            function updateBranchList() {
                _commonServ.updatePermission(function () {
                    if ($scope.listeners.onUpdatePermision) {
                        execCb($scope.listeners.onUpdatePermision);
                    }
                });
            }
            this.setBranch = function (data) {
                $scope.Branch = data;
            }
            if (!$scope.$parent[$scope.formName]) {
                $scope.$parent[$scope.formName] = this;
            }

        }],

        link: function (scope, elem, attrs, ctrl) {
            elem.on('$destroy', function () {
                ctrl.clearListener();
                if (scope.formName && scope.$parent)
                    delete scope.$parent[scope.formName];
            });
        },
        templateUrl: _session.partialPath('branch-form.html')
    };
}]);

'use strict'
//#region CashflowCtrl
kvApp.controller('CashflowCtrl', ['$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'BranchResource', 'kendofilter', '$location', 'CashGroupResource', 'UserResource', 'CashflowResource', 'PaymentResource', 'PurchasePaymentResource', 'kvPrinter', 'BankAccountResource', 'PrivilegeHelper', '$routeParams', 'kvExportToExcel', 'printTypeMap', 'paymentMethods',
function ($scope, _session, _logger, $filter, _common, _branches, _filter, $location, _cashgroup, _users, _cashflow, _payments, _purchasePayments, _print, _banks, _p, $routeParams, _export, _printTypeMap, _paymentValues) {
    var CASH = $scope.CASH = 1, BANK = $scope.BANK = 2, TOTALFUNDS = $scope.TOTALFUNDS = 3;
    if ($location.$$search.method == 'bank') {
        $scope.CashFlowType = BANK;
    }
    else if ($location.$$search.method == 'totalfunds') {
        $scope.CashFlowType = TOTALFUNDS;
    }
    else {
        $scope.CashFlowType = CASH;
    }
    $scope.currentDate = new Date();
    $scope.pageSizes = pager.pageSizes;
    $scope.pageSize = pager.defaultList;
    $scope.userIds = [];

    $scope.branches = _branches.get({ Permission: 'CashFlow_Read' }, function () {
        if (!$routeParams.Code) {
            var defaultItem = $scope.branches.Data.kvfind($scope.currentBranch, function (a, b) {
                return a.Id === b.Id;
            });
            $scope.branchIds = [defaultItem];
        }
    });

    $scope.users = _users.getUser(function (data) {

    }
    );
    // init ddlPartnerType
    $scope.dsPartnerType = [
        { Value: "A", Name: $scope._l.cashflow_PartnerType_A },
        { Value: "C", Name: $scope._l.cashflow_lblCustomer },
        { Value: "S", Name: $scope._l.cashflow_lblSupplier },
        { Value: "U", Name: $scope._l.cashflow_lblUser },
        { Value: "D", Name: $scope._l.cashflow_lblDelivery },
        { Value: "O", Name: $scope._l.cashflow_lblOther }
    ];

    $scope.parentType = { Value: "A", Name: $scope._l.cashflow_PartnerType_A };

    $scope.filterByPartnerType = function () {
        $scope.filterUpdated();
    };
    $scope.filter = {};

    var rights = $scope.rights = {};
    rights.canAdd = _p.has('CashFlow_Create');
    rights.canUpdate = _p.has('CashFlow_Update');
    function loadBankAccounts() {
        _banks.get({}, function (result) {
            var temp = result.Data;
            temp.unshift({ Account: "---Chọn---", Id: -1 });
            $scope.accounts = temp;

            if (!$scope.filter.bankAcctId) {
                $scope.filter.bankAcctId = {
                    Account: "---Chọn---",
                    Id: -1
                };
            }
        });
    }
    loadBankAccounts();
    $scope.bankAccountChanged = function () {
        if ($scope.CashFlowType === BANK || $scope.CashFlowType === TOTALFUNDS) {
            $scope.filterUpdated();
        }

        var ddl = $('#ddlBankAccount');
        var currentAcc = $scope.filter.bankAcctId;
        ddl.prop('title', currentAcc ? currentAcc.Bank : "");
    }
    $scope.customOptions = {
        // using {{angular}} templates:
        template: '<span><b>{{dataItem.Account}}</b><p ng-show={{dataItem.Bank!=null}}>{{dataItem.Bank}}</p></span>',
        valueTemplate: '{{dataItem.Account}}'
    };
    $scope.updateBankAccount = function () {
        if (!$scope.filter.bankAcctId.Id && parseInt( $scope.filter.bankAcctId.Id) === -1)
            return;
        if ($scope.accounts)
            for (var i = 0; i < $scope.accounts.length; i++) {
                var ac = $scope.accounts[i];
                if (ac.Id == parseInt($scope.filter.bankAcctId.Id)) {
                    $scope.bankAccountPopup.openWindow(ac, function (updated) {

                        if (angular.isUndefined(updated))
                            $scope.filter.bankAcctId = {
                                Account: "---Chọn---",
                                Id: -1
                            };

                        loadBankAccounts();
                    });
                    break;
                }
            }
    };

    $scope.addBankAccount = function () {
        $scope.bankAccountPopup.openWindow({}, function (updated) {
            $scope.filter.bankAcctId = updated;
            loadBankAccounts();
        });
    };


    $scope.dateFilterRange = {};
    $scope.dateFilter = {
        typeFilter: 'common',
        StartDate: new Date(),
        EndDate: new Date(),
        TimeRange: 'thismonth'
    };
    $scope.financialFilter = 'all';
    var PAYMENT_CASHGROUP = -1,
        PURCHASEPAYMENT_CASHGROUP = -2;

    $scope.cashflowType = [
        { value: 'ge', label: $scope._l.cashflow_SearchlblPayment, checked: false },
        { value: 'lt', label: $scope._l.cashflow_SearchlblPurchasePayment, checked: false }
    ];

    function reloadGroup() {
        $scope.groupIds = [];
        var typeFilter = null, flowTypes = $scope.cashflowType;
        if ((flowTypes[0].checked && !flowTypes[1].checked) || (!flowTypes[0].checked && flowTypes[1].checked)) {
            typeFilter = flowTypes[0].checked ? 'in' : 'out';
        }

        $scope.groups = _cashgroup.get({ Type: typeFilter }, function (result) {
            //insert default filter
            var val = { Id: PAYMENT_CASHGROUP, Name: $scope._l.cashflow_Money }
            var val2 = { Id: null, Name: "Thu chi khác" }

            result.Data.unshift(val);
            result.Data.unshift(val2);

        });

    }


    reloadGroup();
    //$scope.branches = _session.branchs;

    var getAdditionalParam = function () {

        var obj = {};
        if ($scope.CashFlowType === BANK || $scope.CashFlowType === TOTALFUNDS) {
            obj.IncludeAccount = true;
        }

        return obj;
    };
    //$scope.bindedGrid;
    $scope.grvdataBinding = function (arg) {
        //if (!$scope._setting.SellAllowDeposit) {
        //    arg.sender.hideColumn("Status");
        //}
        var grid = arg.sender;

        // get column list
        var ds = [];
        for (var i = 0; i < grid.columns.length; i++) {
            if (grid.columns[i].field == "Id" || ($scope.CashFlowType === CASH && grid.columns[i].field == "Account") || (($scope.CashFlowType === CASH || $scope.CashFlowType === BANK) && grid.columns[i].field == "CashBookType"))
                continue;

            ds.push({
                encoded: false,
                text: "<label class='quickaction_chk dpb'><input type='checkbox' checked='checked' " +
                      " class='check_row' data-field='" + grid.columns[i].field +
                      "'/><span></span>" + grid.columns[i].title + "</label>"
            });
        }

        $("#columnSelection").kendoMenu({
            dataSource: [{
                text: "",
                items: ds
            }],
            openOnClick: true,
            closeOnClick: false,
            open: function () {
                var selector;
                $.each(grid.columns, function () {
                    if (this.hidden) {
                        selector = "input[data-field='" + this.field + "']";
                        $(selector).prop("checked", false);
                    }
                });
            },
            select: function (e) {
                // don't show/hide for menu button
                if ($(e.item).parent().filter("div").length) return;

                var input = $(e.item).find("input.check_row");
                var field = $(input).data("field");
                if ($(input).is(":checked")) {
                    grid.showColumn(field);
                } else {
                    grid.hideColumn(field);
                }

                saveColumnsCookie(grid);
            }
        });
    };

    $scope.grvdataBound = function (arg) {
        $scope.emptyGridFix(arg);

        if ($scope.CashFlowType === CASH || $scope.filter.bankAcctId) {
            arg.sender.hideColumn("Account");
        }
        if ($scope.CashFlowType === CASH || $scope.CashFlowType === BANK) {
            arg.sender.hideColumn("CashBookType");
        }
        //
        try {
            var gridId = $scope.CashFlowType === CASH ? "CashGrid" : ($scope.CashFlowType === BANK ? "BankGrid" : "TotalFundsGrid");
            if (gridId && localStorage.getItem(gridId)) {
                var obj = JSON.parse(localStorage.getItem(gridId));
                if (obj) {
                    for (var i = 0; i < obj.length; i++) {
                        var col = obj[i];
                        if (col.hidden) {
                            arg.sender.hideColumn(col.field);
                        } else
                            arg.sender.showColumn(col.field);
                    }
                }
            }
        } catch (ex) {
            // if browser doesn't support local storage -> ignore
        }
    };

    function saveColumnsCookie(grid) {
        //saves the current column information into a local storage
        try {
            var obj = kendo.stringify(grid.columns);
            if ($scope.CashFlowType === CASH) {
                localStorage.setItem("CashGrid", obj);
            }
            else if ($scope.CashFlowType === BANK) {
                localStorage.setItem("BankGrid", obj);
            }
            else {
                localStorage.setItem("TotalFundsGrid", obj);
            }
        } catch (ex) {
            //it fails when the grid isn't initialized - we can just ignore that
        }
    }

    $scope.export = function () {
        var filter = $scope.grdCashflow.reader.kvFilter;
        var columns = [];
        var gridId = $scope.CashFlowType === CASH ? "CashGrid" : ($scope.CashFlowType === BANK ? "BankGrid" : "TotalFundsGrid");
        columns = _export.getGridColumns(gridId);


        if (columns.length == 0) {
            var obj = $("#grdCashflow").data("kendoGrid").options.columns;

            if (obj) {
                for (var i = 0; i < obj.length; i++) {
                    var col = obj[i];
                    if (col.field == "Account" && $scope.CashFlowType === CASH || (($scope.CashFlowType === CASH || $scope.CashFlowType === BANK) && col.field == "CashBookType")) continue;
                    if (!col.hidden && col.field != "Id") {
                        columns.push({ "Title": col.title, "Field": col.field, "IsNumber": col.isNumber, "IsDate": col.isDate });
                    }
                }
            }
        }

        var type = "CashFlow";
        var fileName = "SoQuy";
        var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
        _export.toExcel(type, fileName, data);
    };

    if ($routeParams.Code) {
        $scope.filter.keywordParam = $routeParams.Code;
        $scope.filter.exactCode = true;
        $scope.branchIds = [];
        $scope.userIds = [];
        $scope.dateFilter = '';
    }
    else {
        $scope.branchIds = $scope.branchIds ? $scope.branchIds : [$scope.currentBranch];
    }

    var initFilter = function () {
        var cond = [], filter = [], flowTypes = $scope.cashflowType;

        if ($routeParams.code) {
            filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.code, 'eq')], 'and');
        } else {
            if ((flowTypes[0].checked && !flowTypes[1].checked) || (!flowTypes[0].checked && flowTypes[1].checked)) {
                var op = flowTypes.filter(function (r) { return r.checked; })[0].value;
                cond.push(_filter.newCondition('Amount', 0, op));
                filter = _filter.append(filter, cond, "or");
            }
            cond = [];
            var cashobj = { Id: PAYMENT_CASHGROUP, Name: $scope._l.cashflow_Money };
            var caspurchasehobj = { Id: PURCHASEPAYMENT_CASHGROUP, Name: $scope._l.cashflow_Money };

            if ($scope.groupIds && $scope.groupIds.length > 0) {
                var idx = $scope.groupIds.kvfindIndex(cashobj, function (a, b) {
                    return a.Id === b.Id;
                });
                if (idx > -1) {
                    $scope.groupIds.push(caspurchasehobj);
                }
                for (var i = 0; i < $scope.groupIds.length; i++) {
                    //cond.push(_filter.newCondition('CashFlowGroupId', parseInt($scope.groupIds[i].Id), 'eq'));
                    cond.push(_filter.newCondition('CashFlowGroupId', $scope.groupIds[i].Id ? parseInt($scope.groupIds[i].Id) : null, 'eq'));

                }
                filter = _filter.append(filter, cond, 'or');
            }
            cond = [];
            if ($scope.branchIds && $scope.branchIds.length > 0) {
                for (var i = 0; i < $scope.branchIds.length; i++) {
                    cond.push(_filter.newCondition('BranchId', parseInt($scope.branchIds[i].Id), 'eq'));
                }
                filter = _filter.append(filter, cond, 'or');
            }
            cond = [];
            if ($scope.userIds && $scope.userIds.length > 0) {
                for (var i = 0; i < $scope.userIds.length; i++) {
                    cond.push(_filter.newCondition('CreatedBy', parseInt($scope.userIds[i].Id), 'eq'));
                }
                filter = _filter.append(filter, cond, 'or');
            }
            if ($scope.filter.keywordParam && $scope.filter.keywordParam.length > 0) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filter.keywordParam, 'contains')], 'and');
            }
            // _filter.remove($scope.grdStockTakeOption.dataSource, "CreatedDate");
            if ($scope.dateFilter && $scope.dateFilter.TimeRange == 'other') {
                cond = [];
                if ($scope.dateFilter.StartDate) {
                    var fromDate = new Date($scope.dateFilter.StartDate);
                    cond.push(_filter.newCondition("TransDate", fromDate, "ge"));
                }
                if ($scope.dateFilter.EndDate) {
                    var todate = new Date($scope.dateFilter.EndDate);
                    cond.push(_filter.newCondition("TransDate", new Date(todate.DateAdd(1)), "lt"));
                }
                filter = _filter.append(filter, cond, "and");
            } else if ($scope.dateFilter && $scope.dateFilter.TimeRange != '') {
                cond = [
                    _filter.newCondition("TransDate", $scope.dateFilter.TimeRange, "eq")
                ];
                filter = _filter.append(filter, cond, "or");
            }
            if ($scope.financialFilter == "include") {
                filter = _filter.append(filter, [_filter.newCondition('UsedForFinancialReporting', 1, 'eq')], 'and');
            }
            if ($scope.financialFilter == "exclude") {
                filter = _filter.append(filter, [_filter.newCondition('UsedForFinancialReporting', 0, 'eq')], 'and');
            }
            if (!$scope.filter.exactCode) {
                if ($scope.CashFlowType === CASH) {
                    filter = _filter.append(filter, [_filter.newCondition('Method', 'Cash', 'eq')], 'and');
                }
                else {
                    if ($scope.CashFlowType === BANK) {
                        filter = _filter.append(filter, [_filter.newCondition('Method', 'Cash', 'ne')], 'and');
                    }
                    if ($scope.filter.bankAcctId && !isNaN(parseInt($scope.filter.bankAcctId.Id)) && parseInt($scope.filter.bankAcctId.Id) !== -1) {
                        filter = _filter.append(filter, [_filter.newCondition('AccountId', parseInt($scope.filter.bankAcctId.Id), 'eq')], 'and');
                    }
                }
            }
            if ($scope.parentType && $scope.parentType.Value !== 'A') {
                filter = _filter.append(filter, [_filter.newCondition('partnerType', $scope.parentType.Value, 'eq')], 'and');
            }
            if ($scope.filter.partnerName && $scope.filter.partnerName.length > 0) {
                filter = _filter.append(filter, [_filter.newCondition('PartnerName', $scope.filter.partnerName, 'contains')], 'and');
            }
            if ($scope.filter.partnerTelephone && $scope.filter.partnerTelephone.length > 0) {
                filter = _filter.append(filter, [_filter.newCondition('ContactNumber', $scope.filter.partnerTelephone, 'contains')], 'and');
            }
        }
        return filter;
    };

    $scope.filterbyDateRange = function () {
        $scope.lblOtherTimeFilter = $scope.dateFilter.StartDate ? $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') : '';
        if ($scope.dateFilter.EndDate) {
            $scope.lblOtherTimeFilter += " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
        }
        if ($scope.lblOtherTimeFilter) {
            $scope.dateFilter.TimeRange = 'other';
        }
        else {
            $scope.dateFilter.TimeRange = 'thismonth';
        }
        $scope.filterUpdated();
        //$scope.dateFilterPopup.close();
    }


    //Main grid
    $scope.cashflowColumns = [
            {
                "field": "Code",
                "title": $scope._l.cashflow_Code,
                headerAttributes: { "class": "tdCode" },
                attributes: { "class": "tdCode" }
            },
            {
                "field": "TransDate",
                "title": $scope._l.cashflow_transdate,
                headerAttributes: { "class": "tdDateTime" },
                format: "{0:dd/MM/yyyy HH:mm}",
                attributes: { "class": "tdDateTime" },
                isDate: true
            },
            {
                "field": "Type",
                "title": $scope._l.cashflow_Type,
                sortable: false,
                headerAttributes: { "class": "tdDebt" },
                attributes: { "class": "tdDebt" }

            },
            {
                "field": "Account",
                "title": $scope._l.cashflow_Account,
                sortable: false,
                headerAttributes: { "class": "tdName" },
                attributes: { "class": "tdName" }
            },
            {
                "field": "PartnerName",
                "title": $scope._l.cashflow_PartnerInOutName,
                headerAttributes: { "class": "noteBox" },
                attributes: { "class": "noteBox" }
            },
            {
                "field": "Amount",
                "title": $scope._l.cashflow_Amount,
                headerAttributes: { "class": "tdDateTime txtR" },
                attributes: { "class": "tdDateTime txtR" },
                format: "{0:n0}",
                isNumber: true
            },
            {
                "field": "Description",
                "title": $scope._l.cashflow_reason,
                headerAttributes: { "class": "tdMin" },
                attributes: { "class": "tdMin" }, hidden: true,
                sortable: false,
                template: "{{dataItem.Description|truncateDesc}}"
            },
            {
                "field": "CashBookType",
                "title": $scope._l.refundType,
                headerAttributes: { "class": "tdDateTime" },
                attributes: { "class": "tdDateTime" },
                hidden: true,
                sortable: false
            }
    ];

    function _getTransType(trans) {
        var temp = trans.CashGroup;
        if (!temp) {
            if (trans.Amount > 0) {
                temp = "Thu nhập khác";
            }
            else {
                temp = 'Chi phí khác';
            }
            return temp;
        }


        if (trans.Amount > 0) {
            temp = 'Thu ' + temp;
        }
        else {
            temp = 'Chi ' + temp;
        }
        return temp;
    }
    $scope.tabTypeChanged = function (e) {
        $scope.filterUpdated();
    }

    $scope.grdCashflow = new kendo.data.DataSource({
        type: "odata",
        autoSync: true,
        transport: {
            read: {
                url: "/api/cashflow?format=json&IncludeTotal=True",
                dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests                
                data: getAdditionalParam
            }
        },
        /*
        requestEnd: function(e) {
            var resp = e.response;            
        },
        */
        pageSize: $scope.pageSize,
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true,
        filter: initFilter(),
        schema: {
            data: "Data",
            total: "Total",
            model: {
                fields: {
                    Code: { type: "string" },
                    Type: { type: "string" },
                    TransDate: { type: "date" },
                    Amount: { type: "number" },
                    Account: { type: "string" }
                }
            },
            parse: function (resp) {
                if (resp && resp.Filter) {
                    this.kvFilter = resp.Filter;
                }
                var data = resp.Data;
                for (var i = 0 ; i < data.length ; i++) {
                    var items = data[i];
                    items.Type = _getTransType(items);
                    items.CashBookType = items.Method === 'Cash' ? $scope._l.cash : $scope._l.cashflow_Bank;
                }
                $scope.$apply(function () {
                    $scope.totalCashflow = kendo.toString(resp.Total3Value, "n0");
                    $scope.totalReceipt = kendo.toString(resp.Total1Value, "n0");
                    $scope.totalPayment = kendo.toString(resp.Total2Value, "n0");
                    if (resp.Total4Value) {
                        $scope.totalBalanceAtBeginning = kendo.toString(resp.Total4Value, "n0");
                    } else {
                        $scope.totalBalanceAtBeginning = 0;
                    }
                });
                if ($scope.filter.exactCode) {
                    if (data.length > 0) {
                        var item = data[0];
                        $scope.CashFlowType = item.Method === 'Cash' ? CASH : (item.Method === 'Bank' ? BANK : TOTALFUNDS);
                    }
                    $scope.filter.exactCode = false;
                }
                return resp;
            }
        }
    });
    $scope.refresh = function () {
        $scope.grdCashflow.pageSize(parseInt($scope.pageSize));
    };

    $scope.inOutChanged = function () {
        //update 
        reloadGroup();
        $scope.filterUpdated();
    }

    $scope.detailTemplate = kendo.template($('#cashflowDetailTempl').html());

    $scope.grvDetailInit = function (e) {
        //e.detailRow.find('.tabstrip')
        var detailRow = e.detailRow;

        var tabship = detailRow.find(".tabstrip").kendoTabStrip({
            animation: false
        });

        var getUsername = function (result) {
            if (result.Data) {
                //payment and purchasePayment 
                result = result.Data[0];
            }
            e.data.UserName = result.User.GivenName;

        }
        if (e.data.CashFlowGroupId == PAYMENT_CASHGROUP) {
            var p = _payments.get({ code: e.data.Code, Includes: ["User"] }, getUsername)
        }
        else if (e.data.CashFlowGroupId == PURCHASEPAYMENT_CASHGROUP) {
            var p = _purchasePayments.get({ code: e.data.Code, Includes: ["User"] }, getUsername);
        }
        else {
            var cf = _cashflow.get({ flowId: e.data.Id, IncludeUser: true, CompareCode: e.data.Code, CompareValue: e.data.Value }, getUsername);
        }
    };
    $scope.print = function (transItem) {
        transItem.session = _session;
        transItem.Customer = { Name: transItem.PartnerName, Address: transItem.Address, ContactNumber: transItem.ContactNumber }
        transItem.description = transItem.Description;

        transItem.paymentMedthod = transItem.Method;
        transItem.paymentMedthodValue = _paymentValues[transItem.Method];

        if (transItem.Amount >= 0) {
            //_print.printfromtype("Payment", transItem);
            _print.printfromtype(_printTypeMap.Payment, transItem);
        } else {
            //_print.printfromtype("PurchasePayment", transItem);
            _print.printfromtype(_printTypeMap.PurchasePayment, transItem);
        }
    };
    $scope.openTransaction = function (transItem) {
        switch (transItem.CashFlowGroupId) {
            case PAYMENT_CASHGROUP:
                //open payment popup
                $scope.paymentPopup.showPayment(transItem.Code, function () {
                    $scope.grdCashflow.read();
                });
                break;
            case PURCHASEPAYMENT_CASHGROUP:
                //open purchase payment 
                $scope.purchasePaymentPopup.showPayment(transItem.Code, function () {
                    $scope.grdCashflow.read();
                });
                break;
            default:
                //$location.url('/' + viewUrl.cashflow + '/' + transItem.Id);
                $scope.editItem(transItem.Id);
                break;
        }
    };



    $scope.filterUpdated = function () {
        $scope.grdCashflow.filter(initFilter());
    }

    $scope.filterbyDate = function () {
        if ($scope.dateFilter.TimeRange == 'other') {
            $scope.filterbyDateRange();
        }
        else {
            $scope.filterUpdated();
        }
    }
    $scope.filterbyFinancial = function () {
        $scope.filterUpdated();
    }
    $scope.filterbyBranch = function () {
        //check branch condition to prevent Change event before the dropdownlist get loaded 
        if ($scope.branches && $scope.branches.Total && !$scope.changeOnLoad) {
            $scope.filterUpdated();
        }
    }
    $scope.filterbyCreatedBy = function () {
        if ($scope.users && $scope.users.Total && !$scope.changeOnLoad) {
            $scope.filterUpdated();
        }
    }
    $scope.editItem = function (id) {
        var obj = { id: id };
        $scope.$broadcast(app.events.showCashFlowForm, obj);
    }
    $scope.createItem = function (isReversed) {
        //$location.url('/' + viewUrl.cashflow + '/new?method=' + ($scope.CashFlowType == BANK ? 'bank' : 'cash') + (isReversed ? '&type=outpay' : ''));
        var obj = { id: 'new', method: ($scope.CashFlowType == BANK ? 'bank' : 'cash'), type: isReversed ? 'outpay' : null };
        $scope.$broadcast(app.events.showCashFlowForm, obj);
    }

    $scope.filterbyGroup = function () {
        if ($scope.groups && $scope.groups.Total) {
            $scope.filterUpdated();
        }
    }
    /*
    $scope.bankDataBound = function () {
        if ($scope.filter.bankAcctId > 0) {
            this.value($scope.filter.bankAcctId);
        }
    }
    */
}])
//#endregion
//#region CashflowFormCtrl
.controller('CashflowFormCtrl', ['$scope', function ($scope) {

    var openWindow = function (data) {

        var listeners = {
            onSave: function (data) {
                $scope.cashflowWindow.close();
                $scope.grdCashflow.read();
            },
            onSaveError: function (err) {
                _logger.error(err);
            },
            onCancel: function () {
                $scope.cashflowWindow.close();
            },
            onDelete: function () {
                $scope.grdCashflow.read();
                $scope.cashflowWindow.close();
            }
        };


        $scope.cashflowWindow.title($scope._l.cashflow);
        $scope.cashflowForm.initData(data);
        $scope.cashflowForm.setListeners(listeners);
        $scope.cashflowWindow.wrapper.addClass("k-window-poup k-window-poup-bt k-window-fix k-window-cashflow");
        $scope.cashflowWindow.center().open();
        refresh($scope);
    };
    $scope.$on(app.events.showCashFlowForm, function (evt, data) {
        openWindow(data);
        $scope.cashflowWindow.onClose = function (e) {
            if ($scope.cashflowForm) {
                $scope.cashflowForm.clearListener();
            }
        };

    });

}])
.directive('kvCashflowForm', ['CustomerResource', 'UserResource', 'SupplierResource', 'kendofilter', 'PartnerResource', 'CashflowResource', 'logger', '$location', 'kvMessages', 'kvConfirmBox', 'BankAccountResource', 'PrivilegeHelper', 'kvLabel', 'kvSession', '$filter', '$timeout', 'PartnerDeliveryResource', 'settings',
    function (_customers, _users, _suppliers, _filter, _partners, _cashflow, _logger, $location, _m, _msgBox, _banks, _privilege, _label, _session, $filter, $timeout, _deliveries, _setting) {
        return {
            restrict: 'E',
            scope: { formName: '@formName' },
            controller: ['$scope', function ($scope) {
                $scope._p = _privilege;
                $scope._m = _m;
                $scope._l = _label;
                $scope.SelectedCashFlowGroupId = null;
                $scope.SelectedAccountId = null;
                $scope.currentDate = new Date();
                $scope.currentCashflowGroup = null;
                $scope.partnerTypes = [
                    { label: $scope._l.cashflow_lblCustomer, value: 'C' },
                    { label: $scope._l.cashflow_lblSupplier, value: 'S' },
                    { label: $scope._l.cashflow_lblUser, value: 'U' },
                    { label: $scope._l.cashflow_lblDelivery, value: 'D' },
                    { label: $scope._l.cashflow_lblOther, value: 'O' }
                ];
                if (_setting.UseCod == false) {
                    $scope.partnerTypes = $scope.partnerTypes.filter(function(d){ 
                        return d.value != 'D';
                    });
                }
                $scope.customOptions = {
                    // using {{angular}} templates:
                    template: '<span><b>{{dataItem.Account}}</b><p ng-show={{dataItem.Bank!=null}}>{{dataItem.Bank}}</p></span>',
                    valueTemplate: '{{dataItem.Account}}',
                    dataBound: function (e) {
                        this.value($scope.SelectedAccountId);
                    }
                };

                var rights = $scope.rights = {};
                var setUsedForFinancialReporting = function () {
                    if (!$scope.currentCashflowGroup || typeof $scope.currentCashflowGroup.UsedForFinancialReporting === "undefined") {
                        $scope.item.UsedForFinancialReporting = true;
                    }
                    else {
                        $scope.item.UsedForFinancialReporting = $scope.currentCashflowGroup.UsedForFinancialReporting;
                    }
                    if ($scope.item.PartnerType == 'C' || $scope.item.PartnerType == 'S') {
                        $scope.item.UsedForFinancialReporting = false;
                    }
                };
                //   $scope.method = $routeParams.method;
                $scope.item = { PartnerType: 'O' };
                rights.canAdd = $scope._p.has('CashFlow_Create');
                rights.canUpdate = $scope._p.has('CashFlow_Update');
                rights.canDelete = $scope._p.has('CashFlow_Delete');
                $scope.partnerTypeChanged = function (keepValue) {
                    $scope.partners = [];
                    //reload 
                    switch ($scope.item.PartnerType) {
                        case 'C':
                            $scope.resource = _customers;
                            break;
                        case 'S':
                            $scope.resource = _suppliers;
                            break;
                        case 'U':
                            $scope.resource = _users;
                            break;
                        case 'D':
                            $scope.resource = _deliveries;
                            break;
                        case 'O':
                            $scope.resource = _partners;
                            break;
                    }
                    if (!keepValue) {
                        $scope.removePartner();
                        if ($scope.item.PartnerType == 'C' || $scope.item.PartnerType == 'S' || $scope.item.PartnerType == 'D') {
                            _msgBox.confirm('Tài khoản công nợ Khách hàng/Nhà cung cấp/Đối tác giao hàng sẽ bị thay đổi, bạn có chắc chắn muốn chọn Loại đối tác này?', 'Xác nhận?', false, $scope._l.confirmYes, $scope._l.confirmNo, true, true);
                            _msgBox.onConfirm = function () {
                                if ($scope.item.PartnerType == 'D')
                                    $scope.item.UsedForFinancialReporting = true;
                                else
                                    $scope.item.UsedForFinancialReporting = false;

                                //do nothing
                                $scope.$apply(function () {
                                });
                            }
                            _msgBox.onCancel = function () {
                                $scope.$apply(function () {
                                    $scope.item.PartnerType = 'O';
                                    setUsedForFinancialReporting();
                                    $scope.resource = _partners;
                                });
                            }
                        }
                        else {
                            setUsedForFinancialReporting();
                        }
                    }
                };
                $scope.resource = _partners;
                function loadCashGroups() {
                    $scope.cashflowGroups = new kendo.data.DataSource({
                        type: "odata",
                        autoSync: true,
                        transport: {
                            read: {
                                url: "/api/cashflow/groups?format=json&Type=" + ($scope.outflow ? 'out' : 'in'),
                                dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests                                
                            }
                        },
                        pageSize: $scope.pageSize,
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            model: {
                                fields: {
                                    Name: { type: "string" },
                                    Id: { type: 'number' }
                                }
                            },
                            parse: function (response) {
                                response.Data = response.Data ? response.Data : [];
                                $scope.groups = response.Data;

                                response.Data.unshift({ Name: ($scope.outflow ? '--Chọn chi phí khác--' : '--Chọn thu nhập khác--'), Id: null });
                                if (!$scope.currentCashflowGroup || true) {

                                    for (var i = 0; i < response.Data.length; i++) {
                                        if (response.Data[i].Id == $scope.SelectedCashFlowGroupId) {
                                            $scope.currentCashflowGroup = response.Data[i];
                                        }
                                    }
                                }
                                return response;
                            }
                        }                        
                    });

                }

                $scope.onDataBound = function (e) {
                    var tempId = $scope.currentCashflowGroup ? $scope.currentCashflowGroup.Id : null;
                    this.select(function (itm) { return itm.Id == tempId });
                }

                var loadBankAccount = function () {

                    _banks.get({}, function (result) {
                        result.Data.unshift({ Account: "--Chọn--", Id: null });
                        $scope.accounts = result.Data;

                    });
                }

                this.initData = function (obj) {
                    $scope.partnerSearchTerm = "";
                    $scope.partners = [];
                    $scope.method = obj.method;
                    $scope.currentFlowId = obj.id;
                    if (obj.id === 'new') {
                        $scope.item = { Value: 0 };
                        $scope.item.UsedForFinancialReporting = true;
                        $scope.item.PartnerType = 'O';
                        $scope.resource = _partners;
                        $scope.outflow = obj.type === 'outpay';
                        if (obj.method === 'bank') {
                            $scope.item.PaymentMethod = 'Card';  // default to 'Card', it could be 'Transfer'
                            loadBankAccount();
                        }
                        $scope.SelectedCashFlowGroupId = null;
                        loadCashGroups();
                    }
                    else {
                        _cashflow.get({ flowId: obj.id, }, function (cf) {

                            if ($scope.currentFlowId == cf.Id) { //prevent wrong data from response of previous req

                                cf.PaymentDate = $filter('parseDate')(cf.PaymentDate);
                                $scope.item = cf;

                                $scope.partnerTypeChanged(true);
                                if (cf.Value >= 0) {
                                    //in flow 
                                    $scope.outflow = false;
                                }
                                else {
                                    //out flow 
                                    $scope.outflow = true;
                                    cf.Value = -cf.Value;
                                }
                                //get partner

                                var key = null, param = {};
                                switch ($scope.item.PartnerType) {
                                    case 'C':
                                        key = 'customerId';
                                        $scope.resource = _customers;
                                        break;
                                    case 'S':
                                        key = 'supplierId';
                                        $scope.resource = _suppliers;
                                        break;
                                    case 'U':
                                        key = 'userId';
                                        $scope.resource = _users;
                                        break;
                                    case 'D':
                                        key = 'partnerdeliveryId';
                                        $scope.resource = _deliveries;
                                        break;
                                    case 'O':
                                        key = 'partnerId';
                                        $scope.resource = _partners;
                                        break;
                                }
                                param[key] = $scope.item.PartnerId;

                                $scope.resource.get(param, function (result) {
                                    $scope.item.PartnerName = result.Name ? result.Name : result.GivenName;
                                    $scope.item.PartnerCode = result.Code;
                                    $scope.item.PartnerContactNo = result.ContactNo;
                                    $scope.selectedPartner = result;
                                });

                                if (cf.PaymentMethod === 'Cash') {
                                    $scope.method = 'cash';
                                }
                                else {
                                    $scope.method = 'bank';
                                    loadBankAccount();
                                    $scope.SelectedAccountId = $scope.item.AccountId;
                                }
                                $scope.SelectedCashFlowGroupId = $scope.item.CashFlowGroupId;
                                loadCashGroups();
                                refresh($scope);
                            }
                        });
                    }

                    $scope.showSaveButton = ($scope.rights.canUpdate && $scope.item.Id) || ($scope.rights.canAdd && !$scope.item.Id)
                }


                $scope.useforReportChanged = function () {
                    //console.log($scope.item.UsedForFinancialReporting)
                }
                /*
                $scope.cashGroupDataBound = function (evt) {
                    if ($scope.item.CashFlowGroupId> 0)
                        this.value([$scope.item.CashFlowGroupId]);
                }
                */

                /*
                $scope.bankDataBound = function () {
                    if ($scope.item.AccountId > 0) {
                        this.value($scope.AccountId);
                    }
                }
                */
                $scope.searchTermChanged = function () {
                    search($scope.partnerSearchTerm);
                }

                function _getParams(query) {
                    var filterVal = { '$top': 10 };
                    if (query) {
                        var filters = [], cond = [];
                        if ($scope.item.PartnerType === 'U') {
                            cond = [_filter.newCondition('GivenName', query, 'contains')];
                        }
                        else {
                            cond = [_filter.newCondition('Name', query, 'contains')];
                        }


                        if ($scope.item.PartnerType == 'C' || $scope.item.PartnerType == 'S') {
                            cond.push(_filter.newCondition('Code', query, 'contains'));
                        }

                        _filter.append(filters, cond, 'or');

                        //console.log(filters);
                        filterVal['$filter'] = _filter.toOdataFilter({ filters: filters, logic: 'or' });
                    }
                    return filterVal;

                }

                function search(query) {
                    var queryParam = _getParams(query);
                    $scope.resource.get(queryParam, function (result) {

                        if ($scope.item.PartnerType === 'U') {
                            for (var i = 0 ; i < result.Data.length ; i++) {
                                var p = result.Data[i];
                                p.Name = p.GivenName;
                            }
                        }
                        $scope.partners = result.Data;
                    }, function (err) {
                        console.err(err);
                        $scope.removePartner();
                        $scope.partners = null;
                    });

                };

                $scope.partnerSelected = function (partner) {
                    if (partner) {
                        $scope.item.PartnerId = partner.Id;
                        $scope.item.PartnerName = partner.Name;
                        $scope.item.PartnerCode = partner.Code;
                        $scope.item.PartnerContactNo = partner.ContactNo;
                        $scope.selectedPartner = partner;
                    }
                    else {
                        $scope.removePartner();
                    }
                }

                $scope.addPartner = function () {
                    if ($scope.item.PartnerType == 'O') {
                        $scope.partnerForm.openWindow({}, $scope.outflow, $scope.partnerSelected);
                    }
                }

                $scope.updatePartner = function () {
                    if ($scope.item.PartnerType == 'O') {
                        $scope.partnerForm.openWindow($scope.selectedPartner, $scope.outflow, $scope.partnerSelected);
                    }
                }

                $scope.removePartner = function () {
                    delete $scope.item['PartnerId'];
                    delete $scope.item['PartnerName'];
                    delete $scope.item['PartnerCode'];
                    delete $scope.item['PartnerContactNo'];
                    $scope.selectedPartner = null;
                }

                $scope.savePayment = function () {
                    $scope.item.CashFlowGroupId = $scope.currentCashflowGroup.Id;
                    if ($scope.SelectedAccountId) {
                        $scope.item.AccountId = $scope.SelectedAccountId;
                    }
                    //validate 
                    /*
                    if (!$scope.item.CashFlowGroupId) {
                        _logger.error("Bạn chưa chọn nhóm thu/chi");
                        return; 
                    }
            
                    if (!$scope.item.PartnerId) {
                        _logger.error($scope._l.cashflow_MsgChooseUser);
                        return; 
                    }
                    */
                    if (!$scope.item.Value) {
                        _logger.error($scope._l.cashflow_MsgInputMoney);
                        return;
                    }


                    if ($scope.locked)
                        return;

                    $scope.locked = true;
                    var item = angular.copy($scope.item);

                    if (_session && _session.branch)
                        item.BranchId = _session.branch.Id;

                    if ($scope.outflow)
                        item.Value = -item.Value;
                    _cashflow.save({
                        Cashflow: item
                    }, function () {
                        _logger.success(_m.cashflow_TransCreated);
                        // $location.path(viewUrl.cashflow);
                        execCb($scope.listeners.onSave, item);
                        //execCb($scope.)
                        $scope.locked = false;
                    }, function (e) {
                        _logger.error(getMessage(e));
                        $scope.locked = false;
                    });
                }
                $scope.onCancel = function () {

                    execCb($scope.listeners.onCancel);
                };
                $scope.voidPayment = function () {
                    if ($scope.locked)
                        return;

                    _msgBox.confirm('Bạn chắc chắn muốn xóa phiếu ' + $scope.item.Code, 'Xóa phiếu', false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    _msgBox.onConfirm = function () {
                        $scope.locked = true;
                        _cashflow.remove({
                            flowId: $scope.item.Id,
                            CompareCode: $scope.item.Code,
                            CompareValue: $scope.item.Value
                        }, function () {
                            _logger.success($scope._m.globalDeleteSuccess);
                            // $location.path(viewUrl.cashflow);
                            //Remove handle
                            $scope.locked = false;
                            execCb($scope.listeners.onDelete);
                        }, function (e) {
                            _logger.error(getMessage(e));
                            $scope.locked = false;
                        });

                    };


                };

                $scope.ddlcashflowGroupsChange = function () {
                    if ($scope.item.PartnerType !== 'C' && $scope.item.PartnerType !== 'S') {
                        setUsedForFinancialReporting();
                    }
                };

                $scope.addCashflowGroup = function () {
                    //TODO: sync with server's enum 
                    var FlowType = ($scope.outflow) ? 2 : 1;
                    $scope.cashgroupForm.openWindow({ FlowType: FlowType }, ($scope.outflow), ($scope.item.PartnerType), function (cfGroup) {
                        $scope.SelectedCashFlowGroupId = cfGroup.Id;
                        $scope.cashflowGroups.read();
                        $scope.item.UsedForFinancialReporting = cfGroup.UsedForFinancialReporting;
                    });
                }

                $scope.updateCashGroup = function () {
                    //get selected flowtype 
                    var flowGroup = null;
                    if ($scope.groups)
                        for (var i = 0 ; i < $scope.groups.length ; i++) {
                            var g = $scope.groups[i];
                            if (g.Id == $scope.SelectedCashFlowGroupId) {
                                g.UsedForFinancialReporting = $scope.item.UsedForFinancialReporting;
                                flowGroup = g;
                                break;
                            }
                        }
                    $scope.cashgroupForm.openWindow(flowGroup, $scope.outflow, $scope.item.PartnerType, function (cfGroup) {
                        $scope.cashflowGroups.read();
                        if ($scope.item)
                            $scope.item.UsedForFinancialReporting = cfGroup ? cfGroup.UsedForFinancialReporting : null;

                        if (!cfGroup)
                            $scope.SelectedCashFlowGroupId = null;
                    });
                }

                $scope.updateBankAccount = function () {
                    if (!$scope.SelectedAccountId)
                        return;
                    if ($scope.accounts)
                        for (var i = 0 ; i < $scope.accounts.length ; i++) {
                            var ac = $scope.accounts[i];
                            if (ac.Id == parseInt($scope.SelectedAccountId)) {
                                $scope.bankAccountPopup.openWindow(ac, function (updated) {
                                    loadBankAccount();
                                });
                                break;
                            }
                        }
                }

                $scope.addBankAccount = function () {
                    $scope.bankAccountPopup.openWindow(null, function (updated) {
                        $scope.SelectedAccountId = updated.Id;
                        loadBankAccount();
                    });
                }
                this.setListeners = function (listener) {
                    $scope.listeners = listener;
                }
                this.clearListener = function () {
                    $scope.listeners = {};
                }
                if (!$scope.$parent[$scope.formName]) {
                    $scope.$parent[$scope.formName] = this;
                }

            }],

            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    ctrl.clearListener();
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('cashflow-form.html')
        };
    }])
//#endregion
//#region kv-partner-form
.directive('kvPartnerForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'PartnerResource',
    function (_session, _labels, _logger, _m, _msgbox, _partners) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', kvWidth: '@kvWidth' },
            controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
                $scope._l = _labels;
                $scope.callback = null;
                this.openWindow = function (partner, isOutFlow, callback) {
                    partner = partner ? partner : {};
                    $scope.partner = partner;

                    $scope.isOutFlow = isOutFlow;
                    $scope.cashflow_Edit = isOutFlow ? $scope._l.cashflow_EditUserBuy : $scope._l.cashflow_EditUserPayment;
                    $scope.cashflow_Add = isOutFlow ? $scope._l.cashflow_AddUserBuy : $scope._l.cashflow_AddUserPayment;
                    $scope.partnerWindow.title(partner.Id > 0 ? $scope.cashflow_Edit : $scope.cashflow_Add);
                    $scope.partnerWindow.wrapper.addClass("k-window-poup k-window-cashflowparner");
                    $scope.partnerWindow.center().open();
                    $scope.callback = callback;
                };

                $scope.closeWindow = function () {
                    $scope.partnerWindow.close();
                };
                if ($scope.formName) {
                    //inject to this controller to parent 
                    $scope.$parent[$scope.formName] = this;
                };
                $scope.cancel = function () {
                    //$
                    $scope.closeWindow();
                };
                $scope.savePartner = function () {
                    if ($scope.locked)
                        return;

                    $scope.locked = true;
                    var r = _partners.save({ Partner: $scope.partner });
                    r.$promise.then(function (result) {
                        $scope.cancel();
                        _logger.success(_m.cashflow_PartnerCreated);
                        $scope.partner.Id = result.Id;
                        //$rootScope.$broadcast('selectPartner', $scope.partner);                    
                        execCb($scope.callback, $scope.partner);
                        $scope.locked = false;

                    }, function (err) {
                        _logger.error(getMessage(err));
                        $scope.locked = false;

                    });
                };
                $scope.delete = function () {
                    if ($scope.locked)
                        return;
                    _msgbox.confirm(_m.cashflow_MsgRemovePartner, _m.cashflow_MsgRemovePartnerTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    _msgbox.onConfirm = function () {
                        $scope.locked = true;
                        var r = _partners.delete({ partnerId: $scope.partner.Id });
                        r.$promise.then(function (result) {
                            execCb($scope.callback);
                            _logger.success(_m.globalDeleteSuccess);
                            $scope.locked = false;
                            $scope.cancel();
                            execCb($scope.callback);
                        }, function (err) {
                            _logger.error(getMessage(err));

                            $scope.locked = false;

                        });
                    }
                };
                var getParameter = function () {
                    var param = {};
                    param.CategoryId = $scope.category ? $scope.category.Id : 0;
                    return param;
                }




            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('partner-form.html')
        };
    }])
//#endregion
//#region kv-cashgroup-form
.directive('kvCashgroupForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'CashGroupResource',
    function (_session, _labels, _logger, _m, _msgbox, _cashGroups) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', kvWidth: '@kvWidth' },
            controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
                $scope._l = _labels;
                $scope.callback = null;
                this.openWindow = function (group, isOutFlow, partnerType, callback) {
                    var isNew = false;
                    if (!group.Name) {
                        isNew = true;
                    }
                    group = group ? group : {};
                    $scope.group = group;
                    $scope.partnerType = partnerType;
                    if (isNew) {
                        $scope.group.UsedForFinancialReporting = true;
                    } else {
                        if (typeof group.UsedForFinancialReporting === "undefined")
                            $scope.group.UsedForFinancialReporting = true;
                        else
                            $scope.group.UsedForFinancialReporting = group.UsedForFinancialReporting;
                    }
                    if ($scope.partnerType == 'C' || $scope.partnerType == 'S') {
                        $scope.group.UsedForFinancialReporting = false;
                    }
                    $scope.cashflow_Edit = isOutFlow ? $scope._l.cashflow_EditTypeBuy : $scope._l.cashflow_EditTypePayment;
                    $scope.cashflow_Add = isOutFlow ? $scope._l.cashflow_AddTypeBuy : $scope._l.cashflow_AddTypePayment;
                    $scope.isOutFlow = isOutFlow;
                    $scope.cashgroupWindow.title(group.Id > 0 ? $scope.cashflow_Edit : $scope.cashflow_Add);
                    $scope.cashgroupWindow.wrapper.addClass("k-window-poup k-window-cashgroup");
                    $scope.cashgroupWindow.center().open();
                    $scope.callback = callback;
                    //custom help in window dialog
                    $('body').addClass('window-open');
                    $scope.cashgroupWindow.wrapper.find(".k-window-action").click(function (e) {
                        $('body').removeClass('window-open');
                        $('.popupWrapper').removeClass('popping');
                        e.preventDefault();
                    });
                };

                $scope.closeWindow = function () {
                    $('body').removeClass('window-open');
                    $scope.cashgroupWindow.close();
                };
                if ($scope.formName) {
                    //inject to this controller to parent 
                    $scope.$parent[$scope.formName] = this;
                };


                $scope.cancel = function () {
                    $scope.closeWindow();
                };
                $scope.saveCashgroup = function () {
                    if ($scope.locked)
                        return;
                    $scope.locked = true;
                    var r = _cashGroups.save({ Group: $scope.group });
                    r.$promise.then(function (result) {
                        $scope.cancel();
                        _logger.success(_m.cashflow_GroupCreated);
                        //$rootScope.$broadcast('refreshGroup', result.Id);
                        execCb($scope.callback, result);
                        $scope.locked = false;
                    }, function (err) {
                        _logger.error(getMessage(err));
                        $scope.locked = false;

                    });
                };
                $scope.delete = function () {
                    if ($scope.locked)
                        return;
                    _msgbox.confirm(_m.cashflow_MsgRemoveGroup, _m.cashflow_MsgRemoveGroupTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    _msgbox.onConfirm = function () {
                        $scope.locked = true;
                        $('.addCashflow .edit').addClass("ng-hide");
                        var r = _cashGroups.delete({ Id: $scope.group.Id });
                        r.$promise.then(function (result) {
                            _logger.success(_m.globalDeleteSuccess);
                            $scope.locked = false;
                            $scope.cancel();
                            execCb($scope.callback);
                        }, function (err) {
                            _logger.error(getMessage(err));

                            $scope.locked = false;

                        });
                    }
                };
            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('cashgroup-form.html')
        };
    }])
//#endregion
//#region kv-bank-account-form
.directive('kvBankAccountForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'BankAccountResource',
    function (_session, _labels, _logger, _m, _msgbox, _banks) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', kvWidth: '@kvWidth' },
            controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
                $scope._l = _labels;
                $scope.callback = null;
                this.openWindow = function (account, callback) {
                    account = account ? account : {};
                    $scope.account = account;
                    $scope.bankWindow.title(account.Id > 0 ? $scope._l.cashflow_BankEdit : $scope._l.cashflow_BankAdd);
                    $scope.bankWindow.wrapper.addClass("k-window-poup k-window-cashflowbank");
                    $scope.bankWindow.center().open();
                    $scope.callback = callback;
                };

                $scope.closeWindow = function () {
                    $scope.bankWindow.close();
                };

                if ($scope.formName) {
                    //inject to this controller to parent 
                    $scope.$parent[$scope.formName] = this;
                };
                $scope.cancel = function () {
                    $scope.closeWindow();
                };
                $scope.saveAccount = function () {
                    if ($scope.locked)
                        return;
                    $scope.locked = true;
                    var r = _banks.save({ BankAcc: $scope.account });
                    r.$promise.then(function (result) {
                        $scope.cancel();
                        _logger.success(_m.cashflow_GroupCreated);
                        //$rootScope.$broadcast('refreshGroup', result.Id);
                        execCb($scope.callback, result);
                        $scope.locked = false;
                    }, function (err) {
                        _logger.error(getMessage(err));
                        $scope.locked = false;

                    });
                };
                $scope.delete = function () {
                    if ($scope.locked)
                        return;

                    _msgbox.confirm(_m.cashflow_MsgRemoveGroup, _m.cashflow_MsgRemoveGroupTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    _msgbox.onConfirm = function () {
                        $scope.locked = true;
                        var r = _banks.delete({ Id: $scope.account.Id });
                        r.$promise.then(function (result) {
                            _logger.success(_m.globalDeleteSuccess);
                            $scope.locked = false;
                            $scope.cancel();
                            execCb($scope.callback);
                        }, function (err) {
                            _logger.error(getMessage(err));

                            $scope.locked = false;

                        });
                    }
                };


            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('bankaccount-form.html')
        };
    }]);
//#endregion;
'use strict'
var app = {};
app.events = {
    popup: 'popup',
    showSupplierForm: 'showSupplierForm',
    showBranchForm: 'showBranchForm',
    showCashFlowForm: 'showCashFlowForm',
    showTableForm: 'showTableForm',
    showProductForm: 'showProductForm',
    showAddProductForm: 'showAddProductForm',
    showEditProductForm: 'showEditProductForm',
    showUserForm: 'showUserForm',
    showViewUserForm: 'showViewUserForm',
    showRefundForm: 'showRefundForm',
    showCustomerForm: 'showCustomerForm',
    showAccountForm: 'showAccountForm',
    showDeliveryPartnerForm: 'showDeliveryPartnerForm',
    showSurchargePopup: 'showSurchargePopup'
};
app.config = {
    chartLabelTemplate: ('#if(Math.abs(value) >= 1000000000){# #= kendo.toString(value /1000000000, (value /1000000000) % 1 === 0 ? "n0" : "n1")# tỷ #} '
                        + 'else if(Math.abs(value) >= 1000000){# #= kendo.toString(value /1000000,(value /1000000) % 1 === 0 ? "n0" : "n1")# tr #} '
                        + 'else if(Math.abs(value) >= 1000){# #= kendo.toString(value /1000,(value /1000) % 1 === 0 ? "n0" : "n1")#k #} '
                        + 'else {# #=kendo.toString(value,value % 1 === 0 ? "n0" : "n1")# #}#')// '#if(value > 1000000){# #= value /1000000# tr #} else if(value > 100000){# #= value/100000# k #} else {# #=value #}#'
}
var viewUrl = {
    dashBoard: "DashBoard",
    orderList: "Orders",
    orderEmail: "OrdersAsEmail",
    customerList: "Customers",
    productList: "Products",
    sale: "Sale",
    priceBook: "PriceBook",
    stockTakeList: "StockTakes",
    purchaseOrder: "PurchaseOrder",
    transferList: "Transfers",
    employeeList: 'Users',
    supplierList: 'Suppliers',
    account: 'Account',
    branchList: 'Branches',
    invoiceList: 'Invoices',
    printModel: 'PrintTemplates',
    auditTrail: 'AuditTrail',
    surcharge: 'Surcharge',
    returnList: 'Returns',
    posSetting: 'PosParameter',
    saleReport: 'SaleReport',
    productReport: 'ProductReport',
    endOfDayReport: 'EndOfDayReport',
    financialReport: 'FinancialReport',
    liabilitiesReport: 'LiabilitiesReport',
    customerReport: 'CustomerReport',
    supplierReport: 'SupplierReport',
    userReport: 'UserReport',
    purchaseOrderReport: 'OrderReport',
    purchaseReturnList: 'PurchaseReturns',
    cashflow: 'CashFlow',
    tableList: 'TableAndRoom',
    manufacturingOrder: 'Manufacturing',
    damageItems: "DamageItems",
    deliveryPartner: "PartnerDelivery",
    smsEmail: "SmsEmail",
    smsEmailSetting: "SmsEmailSetting"
};

app.retailer = angular.module('kv.retailer', ['ngTagsInput', 'ngRoute', 'kv.session', 'kv.retailer.ctrl', 'kv.directives',
'kendo.directives', 'kv.utils', 'kv.dataservices', 'kv.ui.numeric', 'kendo.window', 'checklist-model'])
.controller("HeaderCtrl", ['kvSession', '$scope', 'logger', '$rootScope', 'UserResource', '$filter', '$route', 'CommonServices', 'kvMenu', '$location', 'RetailerResource', 'kvSettingMenu', '$http', '$timeout', 'settings',
    function (_session, $scope, _logger, $rootScope, _users, $filter, $route, common, _menu, $location, _retailerResource, _settingMenu, $http, $timeout, _setting) {
        $rootScope.branchs = _session.branchs;
        $rootScope.currentBranch = _session.branch;
        $rootScope.currentBranchId = $scope.currentBranch.id;
        $scope.isCoffeeScreen = _session.retailer.isCoffee;
        $rootScope.CustomLogo = _session.retailer.usecustomlogo ? _session.retailer.logo : '';

        
        if ($("#cbSelectBranch").data("kendoDropDownList")) {
            filter: "contains"
            $("#cbSelectBranch").data("kendoDropDownList").focus(function () {
                var branchInput = this;
                $timeout(function () {
                    branchInput.select();
                }, 100);
            });
        }

        //loadSeller();

        $scope.showReportPopup = function (condition) {
            if (condition)
                $rootScope.showInfoPopup = true;

            return;
        };

        $scope.databound = function (e) {
            var arrtext = [];
            e.sender.wrapper.find("select.mainSelect option").each(function () {
                arrtext.push($.fn.textWidth($(this).html(), '12px Arial'));
            });
            var max_value = Math.max.apply(Math, arrtext);
            e.sender.wrapper[0].style.width = (max_value + 50) + "px";
        };
        $scope.$on('refreshGridOnChangeBranch', function (e, vl) {
            $scope._p.refresh(function () {
                $scope.menus = $scope._p.filter(_menu);
                $scope.settingMenu = $scope._p.filter(_settingMenu);

                $scope.showSetting = $scope.settingMenu.length > 0 ? true : false;
                $route.reload();
            });
        });
        $scope.SetCurrentBranch = function () {
            // change on server
            common.changeBranch(this.value(), function (data) {
                $rootScope.currentBranch = data;
                $rootScope.currentBranchId = data.id;
                _session.branch = $rootScope.currentBranch;
                //loadSeller();
                $rootScope.$broadcast('refreshGridOnChangeBranch');
                //Angular Cookie does not support set expiration date
                document.cookie = "LatestBranch_" + _session.retailer.id + "_" + _session.user.id + "=" + data.id + "; expires=Fri, 24 Dec 9999 23:59:59 GMT; path=/";
                _logger.info($filter("stringFormat")($scope._l.changeBranch, [$rootScope.currentBranch.name]));
            });
        };
        $scope.EditProfile = function () {
            $scope.showUserMenu = false;
            $scope.$broadcast(app.events.showAccountForm);
        }
        $scope.logout = function () {
            $http.post('/api/auth/logout').success(function (data, status, headers, config) {
                window.location.href = _session.loginUrl;
            }).error(function (data, status, headers, config) {
            });
        };

        $scope.listeners = {
            onSave: function (data) {
                _logger.success($scope._m.globalSaveSuccess);
            },
            onSaveError: function (err) {
                _logger.error(err);
            }
        };
        $scope.changeTheme = function (themeColor) {
            localStorage['kvsale_theme'] = themeColor;
            location.reload();
        };
        $scope.saveTheme = function () {
            var themeColor = $('a.box-cd-cl.active-ic-cd').attr('color');
            _users.get({ userId: _session.user.id }, function (user) {
                user.Theme = themeColor;
                function errHandler(er) {
                    if ($scope.listeners.onSaveError) {
                        execCb($scope.listeners.onSaveError, getMessage(er));
                    }
                    $scope.locked = false;
                }
                $scope.locked = true;
                _users.save({ User: user }, function (result) {
                    // _logger.success($scope._m.globalSaveSuccess);
                    if ($scope.listeners.onSave) {
                        execCb($scope.listeners.onSave, result)
                    }
                    $scope.locked = false;
                    localStorage['kvsale_theme'] = themeColor;
                    location.reload();
                }, errHandler);
            });
        };

        $scope.menus = $scope._p.filter(_menu);

        $scope.settingMenu = $scope._p.filter(_settingMenu);

        //for (var i = 0; i < $scope.settingMenu.length ; i++) {
        //    if ($scope.settingMenu[i].Id == 5 && !_setting.UseSurcharge) {
        //        $scope.settingMenu.splice(i, 1);
        //        break;
        //    }
        //}

        $scope.showSetting = $scope.settingMenu.length > 0 ? true : false;
        //console.log($scope.settingMenu);
        //$scope._p = _privilege;
        function getDefaultUrl() {
            return $scope._p.getDefaultUrl($scope.menus);
        }

        function selectMenu(m) {
            angular.forEach($scope.menus, function (m) {
                m.selected = false;
            });
            m.selected = true;
            $(".mainWrap").removeClass("mainWrapReport");
        };

        function trim(l) {
            return l.replace('#/', '');
        }
        function selectByPath(p) {
            if (!$scope.menus)
                return;

            for (var i = 0 ; i < $scope.menus.length; i++) {
                var m = $scope.menus[i];
                if (m.link && p.indexOf(trim(m.link)) >= 0) {
                    selectMenu(m);
                    return;
                }
                if (m.sub) {

                    for (var j = 0 ; j < m.sub.length; j++) {
                        if (p.indexOf(trim(m.sub[j].link)) >= 0) {
                            selectMenu(m);
                            return;
                        }
                    }
                }
            }
        }
        $scope.$on('$routeChangeSuccess', function (event, current, previous) {
            //watch the route change 
            //highlight tab accordingly
            if (current.$$route) {
                var path = current.$$route.originalPath;
                selectByPath(path);
                _ga_screenView(path);
            }
            else {
                //this is a redirect, do nothing

            }
        });
        $scope.$on('$routeChangeError', function (ev, current, previous, rejection) {
            if (rejection && rejection.unauthorized === true) {
                console.error($scope._l.order_MsgNotAllowAccessPath + rejection.path);
                var fallback = getDefaultUrl();
                //$location.path('/' + viewUrl.dashBoard);
                if (fallback) {
                    $location.path(fallback);
                } else {
                    window.location.href = "/Error/Unauthorized";
                }
                //  $location.path("/Error/Unauthorized");


                //look for default url to fallback 
            }
        });
        //$scope.userId = _session.user.id; 
        //Initial Data
        $scope.doIntitialData = function () {
            $("#initialWindow").hide();
            $("#LoadingPanel").show();
            var r = _retailerResource.initialdata({});
            r.$promise.then(function (result) {
                _logger.success(result.Message);
                $("#initialWindow").data("kendoWindow").close();
                window.location.reload();
            }, function (err) {
                _logger.error(getMessage(err));
                $("#initialWindow").data("kendoWindow").close();
            });

            _ga_buttonClick('initialData');
        }
        $scope.doCancelIntitialData = function () {
            var r = _retailerResource.dontinitialdata({});
            r.$promise.then(function (result) {
                $("#initialWindow").data("kendoWindow").close();
                //window.location.reload();
            }, function (err) {
                _logger.error(getMessage(err));
                $("#initialWindow").data("kendoWindow").close();
            });

            _ga_buttonClick('cancelInitialData');
        }
        $scope.showSupport = function (item) {
            if (item.Id == 9999) {
                $("#supportWindows").kendoWindow({
                    modal: true,
                    draggable: false,
                    visible: false,
                    title: $scope._l.support_clearTitle,
                    width: 510

                });
                $("#supportWindows").data("kendoWindow").wrapper.addClass("k-window-poup window-error");
                $("#supportWindows").data("kendoWindow").center().open();
            }
            _ga_buttonClick('showSupport');
        }
        $scope.showIntitialDataForm = function () {
            if (_session.retailer.MakeSampleData) {
                $("#initialWindow").kendoWindow({
                    modal: true,
                    draggable: false,
                    visible: false,
                    title: false,
                    width: 600

                });
                $("#initialWindow").data("kendoWindow").center().open();
                $("#initialWindow").wrapper.addClass("k-window-initia");

            }
        };
        angular.element(document).ready(function () {
            $scope.showIntitialDataForm();
        });

    }])
.controller("UpgradeCtrl", [function () {

}])
.directive('kvOrderFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('order-filter.html')
    };
}])

.directive('kvMore', function () {
    return {
        link: function (scope, elem) {

            var oldtop;
            var wd = $(window).height();

            elem.bind("click", function () {
                elem.find(".icon").toggleClass("plus");
                elem.parent().next().slideToggle();
                var window = elem.parent().parent().parent();
                var windowH = parseFloat(window.css("height")) + 46;

                if (!oldtop) {
                    oldtop = parseFloat(window.css("top"));
                }
                if (elem.find(".icon").hasClass("plus")) {
                    window.animate({ top: oldtop - (wd - windowH) / 2 }, 400);
                } else {
                    window.animate({ top: oldtop }, 400);
                }
            });
        }
    };

})
.directive('kvMobile', function () {
    return {
        link: function (scope, elem) {
            var state = true;
            elem.bind("click", function () {
                var wH = $(window).height();

                $('.mainLeft').toggleClass("mainLeft-state");
                $("body").toggleClass("mainWrapShow");

                if ($('.mainLeft').hasClass("mainLeft-state")) {
                    state = false;
                    $('.mainLeft').show().animate({ 'left': (state ? -210 : 0) }, 30);
                    $('.overlay').show();
                    $('.mainRight').animate({ 'left': (state ? 0 : 230) }, 60);
                }
                else {
                    state = true;
                    $('.mainLeft').removeClass("mainLeft-state").hide().animate({ 'left': -210 }, 30);
                    $("body").removeClass("mainWrapShow");
                    $('.overlay').hide();
                    $('.mainRight').animate({ 'left': 0 }, 60);
                }
            });
            $('.mobileMenu').click(function () {
                state = true;
                $('.mainLeft').removeClass("mainLeft-state").hide().animate({ 'left': -210 }, 30);
                $("body").removeClass("mainWrapShow");
                $('.overlay').hide();
                $('.mainRight').animate({ 'left': 0 }, 60);
            });
        }
    };
})
.directive('kvMobileLeft', function () {
    return {
        link: function (scope, elem) {
            elem.bind("click", function (e) {
                $('.mainLeft').removeClass("mainLeft-state").hide().animate({ 'left': -210 }, 30);
                $("body").removeClass("mainWrapShow");
                $('.overlay').hide();
                $('.mainRight').animate({ 'left': 0 }, 60);
            });
        }
    };
})
.directive('kvScroll', function () {
    return {
        link: function (scope, elem) {
            elem.bind("click", function (e) {
                elem.toggleClass('active');
                if (elem.hasClass('active')) $("html, body").animate({ scrollTop: elem.offset().top - 15 }, 300);
                else {
                    if (elem.hasClass('addMoreMain')) $("html, body").animate({ scrollTop: 30 }, 300);
                    else $("html, body").animate({ scrollTop: elem.offset().top - 200 }, 300);
                }
            });
        }
    };
})
.directive('kvBtnScroll', function () {
    return {
        link: function (scope, elem) {
            elem.bind("click", function () {
                $("html, body").animate({ scrollTop: 30 }, 300);
            });
        }
    };
})
.directive('kvTooltip', function () {
    return {
        link: function (scope, elem) {
            $(function () {
                $('[data-toggle="tooltip"]').tooltip();
            })
        }
    };
})
.directive('kvPopover', function () {
    return {
        link: function (scope, elem) {
            $(function () {
                $('[data-toggle="popover"]').popover();
            })
        }
    };
})
.directive('kvBody', function () {
    return {
        link: function (scope, elem) {
            $(window).scroll(function () {
                var ww = $(window).width();
                var fp = $(".boxFooter").position().top;
                var rw = $(".mainRight .mainWrap").width();
                var bh = $(window).height();
                var wh = $("body > .mainWrap").height();
                var ttp = $("#toTop").position().top;
                var st = $(window).scrollTop();
                var rh = $(".mainRight .mainWrap").height();
                var pb = $(".mainRight .mainWrap").position().top + $(".mainRight .mainWrap").outerHeight();
                var lpb = st + $(window).height();
                var lh = $(".mainLeft").height();
                if (ww > 1024) {
                    if ((st + ttp) >= pb && st > 93 && lh > rh) {
                        $("body").addClass("mainRightFix");
                        if ($("body").hasClass("mainRightFix")) {
                            $(".mainRight .mainWrap").css("position", "fixed").width(rw).removeClass("w100");
                            if (rh >= bh - 60) $(".mainRight .mainWrap").css("bottom", 96).css("top", "auto");
                            else $(".mainRight .mainWrap").css("top", 20).css("bottom", "auto");
                        }
                    }
                    else {
                        $("body").removeClass("mainRightFix");
                        $(".mainRight .mainWrap").css("position", "relative").css("top", "auto").css("bottom", "auto").width("auto").addClass("w100");
                    }
                }

                var footer = $(".mainFooter").position().top - $(".mainFooter").height();
                if (footer <= ttp + st)
                    $(".sortTimeList, .sortDateTimeOtherBox").addClass("sortTimeBottom");
                else
                    $(".sortTimeList, .sortDateTimeOtherBox").removeClass("sortTimeBottom");
                //console.log($(".mainFooter").position().top + "-" + ttp + "---" + st);
            });
            $('body').click(function (e) {
                //alert(e.target.className);
                if (e.target.id === "reportsortOtherLbl" || e.target.id === "reportsortDateTimeLbl" || e.target.className === "k-link") {

                } else {
                    $('.reportsort').removeClass('reportsortActive');
                }
            });
        }
    };
})
.directive('kvPaymentPopup', ['kvSession', 'logger', 'UserResource', 'PaymentResource', 'kvPaymentMethods', '$filter', 'kvLabel', 'kvMessages', 'paymentStatusMap', 'paymentStatus', 'paymentMethods', 'kvConfirmBox', 'kvPrinter', 'BankAccountResource', 'printTypeMap',
    function (_session, _logger, _usersvc, _paymentsvc, _paymentMethod, $filter, _l, _m, _paymentStatusMap, _paymentStatus, _paymentValues, _msgBox, _print, _bankAccounts, _printTypeMap) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', 'PrivilegeHelper', 'kvSession', function ($scope, _helper, _session) {
                    $scope._l = _l;
                    $scope._m = _m;
                    $scope.Math = Math;
                    $scope.order_InvoicePay = _l.order_InvoicePay;
                    $scope.order_InvoiceCustomerPay = _l.order_InvoiceCustomerPay;
                    $scope.order_totalAmountValues = _l.order_totalAmountValues;
                    $scope.order_CodeTitle = _l.order_PaymentCode;
                    $scope.paymentMethods = _paymentMethod;
                    var comparePaymentMethodLabel = "";
                    var compareAccountName = "";
                    var compareUserId = "";
                    var compareTransDate = null;
                    var rights = $scope.rights = {};
                    rights.canCreate = _helper.has('Payment_Create');
                    rights.canUpdate = _helper.has('Payment_Update');
                    rights.canDelete = _helper.has('Payment_Delete');
                    rights.lockSeller = !_helper.has('Invoice_ModifySeller');

                    $scope.customOptions = {
                        template: '<span><b>{{dataItem.Account}}</b><p>&nbsp;&nbsp;{{dataItem.Bank}}</p></span>',
                        valueTemplate: '{{dataItem.Account}}'
                    };
                    $scope.accountChanged = function (e) {
                        var ddl = $('#ddlBankAccount');
                        var currentAcc = $scope.BankAccount;

                        ddl.prop('title', currentAcc ? currentAcc.Bank : "");
                    }

                    function changeTitle(col, title) {
                        $("#grdDetailPayment th[data-field=" + col + "]").html(title);
                    }

                    $scope.window = {
                        openDetail: function (data) {


                            if (data.Data.length > 0) {

                                $scope.wdPaymentDetail.title($filter("stringFormat")("{0}", [$scope._l.lblPayment]));
                                $scope.Code = data.Data[0].Code;
                                $scope.TransDate = kendo.parseDate(data.Data[0].TransDate);
                                $scope.customerName = data.Data[0].CustomerName;
                                $scope.customerCode = data.Data[0].CustomerCode;
                                $scope.Customer = data.Data[0].Customer;;
                                $scope.createdBy = data.Data[0].UserId;
                                $scope.User = data.Data[0].User;
                                $scope.session = _session;
                                $scope.OrderValue = data.Data[0].OrderValue;
                                $scope.PaidValue = data.Data[0].PaidValue;
                                $scope.Amount = data.Data[0].Amount;



                                $scope.BankAccount = data.Data[0].BankAccount || { Account: $scope._m.globalSelect, Id: 0 };
                                $scope.paymentMedthod = data.Data[0].Method;
                                $scope.paymentMedthodValue = _paymentValues[data.Data[0].Method];
                                if (data.Data[0].User)
                                    $scope.UserName = data.Data[0].User.GivenName;

                                $scope.paymentMedthodObj = $scope.paymentMethods.kvfind(data.Data[0], function (a, b) {
                                    return a.Id == b.Method;
                                });


                                compareTransDate = kendo.parseDate(data.Data[0].TransDate);
                                compareUserId = $scope.createdBy;
                                compareAccountName = $scope.BankAccount != null ? $scope.BankAccount.Account : "";
                                comparePaymentMethodLabel = $scope.paymentMedthodObj.Label;

                                $scope.description = data.Data[0].Description;
                                var currentOrderId = data.Data[0].OrderId;

                                $scope.disabled = (data.Data[0].Status != _paymentStatusMap.Paid);
                                for (var i = 1; i < data.Data.length; i++) {
                                    if (data.Data[i].Status == _paymentStatusMap.Paid) {
                                        $scope.disabled = false;
                                    }
                                    //data.Data[i].Status = _paymentStatus[data.Data[i].Status];
                                    $scope.PaidValue += data.Data[i].PaidValue;
                                    $scope.Amount += data.Data[i].Amount;
                                    if (currentOrderId != data.Data[i].OrderId) {
                                        $scope.OrderValue += data.Data[i].OrderValue;
                                    }

                                    currentOrderId = data.Data[i].OrderId;
                                    data.Data[i].TransDateObj = $filter('parseDate')(data.Data[i].TransDate);
                                }


                                $scope.disabled = $scope.disabled || !$scope.rights.canUpdate;

                                if ($scope.Amount < 0) {
                                    changeTitle("PaidValue", $scope._l.order_PaidValue);
                                    changeTitle("Amount", $scope._l.order_Amount);
                                    $scope.order_totalAmountValues = $scope._l.order_TotalAmount;
                                    $scope.order_CodeTitle = $scope._l.order_CodePay;
                                    $scope.wdPaymentDetail.title($filter("stringFormat")("{0}", [$scope._l.order_Pay]));
                                }
                                //merge Hoan tra tam ung and related payment 
                                //based on the assumption that the sign of Amount are opposite 
                                //in one transaction. It's safe to base on this assumption for now 
                                var any,
                                    positive = data.Data.reduce(function (acc, p) {
                                        if (p.Amount > 0) acc.push(p);
                                        return acc;
                                    }, []),
                                    negative = data.Data.reduce(function (acc, p) {
                                        if (p.Amount < 0) acc.push(p);
                                        return acc;
                                    }, []);
                                if (positive.length > 0 && negative.length > 0) {
                                    //should merge 
                                    var d = data.Data, single;
                                    single = {
                                        Code: d[0].Code,
                                        TransDate: d[0].TransDate,
                                        OrderValue: d[0].OrderValue,
                                        TargetCode: d[0].TargetCode,
                                        PaidValue: 0, Amount: 0, Status: d[0].Status
                                    };

                                    d.reduce(function (acc, p) { acc.Amount += p.Amount; return acc; }, single);
                                    var lastPaid = d.filter(function (p) { return p.Amount <= -0.000001 });
                                    //the negative amount paid is return on deposit 
                                    if (lastPaid && lastPaid.length > 0) {
                                        if (lastPaid.length == 1) {
                                            //the only negative payment is return on deposit 
                                            single.PaidValue = Math.abs(lastPaid[0].Amount);
                                        }
                                        else {
                                            //in case deposit is greater than amount due
                                            //payment is negative as it goes to the customer 
                                            //look for payment with a matching opposit transaction then 
                                            for (var i = 0 ; i < lastPaid.length  ; i++) {
                                                var matching = d.filter(function (p) { return (p.Amount + lastPaid[i].Amount) <= 0.0000001 && (p.Amount + lastPaid[i].Amount) >= -0.0000001; });
                                                if (matching && matching.length > 0) {
                                                    single.PaidValue = matching[0].Amount;
                                                    //update the title of 
                                                    changeTitle("PaidValue", $scope._l.order_InvoiceCustomerPay);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        single.PaidValue;
                                    }
                                    data.Data = [single];
                                }

                                $scope.payments = new kendo.data.DataSource({
                                    data: data.Data,
                                    pageSize: $scope.pageSize,
                                    serverPaging: false,
                                    schema: {
                                        parse: function (response) {
                                            if (response) {
                                                for (var j = 0; j < response.length; j++) {
                                                    var t = response[j];
                                                    t.TargetCode = t.TargetCode ? t.TargetCode : t.Code;
                                                    t.Status = _paymentStatus[t.Status];
                                                }
                                            }
                                            return response;
                                        },
                                        model: {
                                            fields: {
                                                CreatedDate: { type: "date" },
                                                TransDate: { type: "date" }
                                            }
                                        }

                                    }
                                });
                                $scope.NeedPayValue = $scope.OrderValue - $scope.PaidValue;
                                $scope.currentPay = $scope.NeedPayValue - $scope.Amount;
                                refresh($scope);
                                $scope.wdPaymentDetail.wrapper.addClass("k-window-poup k-window-poup-thn k-window-fix k-window-paymentDetail");
                                $scope.wdPaymentDetail.center().open();
                            }
                        }
                    };
                    $scope.cancel = function () {

                        _msgBox.confirm($filter("stringFormat")($scope._m.payment_ConfirmDelete, [$scope.Code]), _m.payment_Cancel_Title, false, _l.confirmYes, _l.confirmNo, false, true);
                        _msgBox.onConfirm = function () {
                            _paymentsvc.delete({ Code: $scope.Code }, function (data) {
                                _logger.success($filter("stringFormat")($scope._m.deleteSuccess, [$scope._l.lblPayment, data.Code]));
                                execCb($scope.onSave);
                                $scope.wdPaymentDetail.close();

                            }, function (err) {
                                callbackFail(err);
                            }
                            );
                        };
                    };
                    $scope.print = function () {
                        if ($scope.Amount > 0) {
                            //_print.printfromtype("Payment", $scope);
                            _print.printfromtype(_printTypeMap.Payment, $scope);
                        } else {
                            //_print.printfromtype("PurchasePayment", $scope);
                            _print.printfromtype(_printTypeMap.PurchasePayment, $scope);
                        }

                        $scope.wdPaymentDetail.close();
                    };
                    $scope.update = function () {


                        if (($scope.paymentMedthodObj.Id == 'Card' || $scope.paymentMedthodObj.Id == 'Transfer') && ($scope.BankAccount == null || $scope.BankAccount.Id == 0)) {
                            _logger.error(_l.valid_NotChooseCard);
                            return;
                        }
                        var r = _paymentsvc.save({
                            Code: $scope.Code, TransDate: $scope.TransDate,
                            PaymentMedthod: $scope.paymentMedthodObj.Id, Description: $scope.description, UserId: $scope.createdBy,
                            AccountId: $scope.paymentMedthodObj.Id == 'Cash' ? null : ($scope.BankAccount ? $scope.BankAccount.Id : null),
                            PaymentMedthodLabel: $scope.paymentMedthodObj.Label, ComparePaymentMethodLabel: comparePaymentMethodLabel,
                            AccountName: $scope.BankAccount ? $scope.BankAccount.Account : null, CompareAccountName: compareAccountName,
                            CompareUserId: compareUserId,
                            CompareTransDate: compareTransDate
                        });
                        r.$promise.then(callbackSuccess, callbackFail);
                        $scope.wdPaymentDetail.close();
                    };
                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }
                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")($scope._m.updatedSuccess, [$scope._l.lblPayment, data.Code]));
                        execCb($scope.onSave);
                    }

                    //function getAccountNo() {
                    //    for (var i = 0 ; i < $scope.bankAccounts.length ; i++) {
                    //        if ($scope.bankAccounts[i].Id == $scope.AccountId) {
                    //            $scope.Account = $scope.bankAccounts[i];
                    //            $scope.AccountNumber = $scope.bankAccounts[i].Account;
                    //            break; 
                    //        }
                    //    }
                    //}

                    this.showPayment = function (code, onSaveHandler) {
                        //  console.log('show payment');
                        $scope.onSave = onSaveHandler;
                        _paymentsvc.get({ code: code, Includes: ["User", "Customer", "OrderValue", "PaidValue", "CustomerName", "Order", "Invoice", "CustomerCode", "TargetCode", "BankAccount"] },
                            function (data) {
                                var r = _usersvc.getSellers({ BranchId: data.Data.BranchId },
                                function (users) {
                                    $scope.cursellers = users.Data;
                                    $scope.window.openDetail(data);
                                }, function (er) {
                                    //error may occurs when current user doesn't have the privilege to 
                                    //see user list 
                                    //I have not decided what to do in this case. Leave it for now 
                                    $scope.window.openDetail(data);
                                    //console.error(er);
                                }); //_usersvc.get({ BranchId: data.Data.BranchId, IsSeller: true });

                                var withAccounts = data.Data.filter(function (a) { return a.AccountId; });
                                if (withAccounts && withAccounts.length > 0) {
                                    $scope.AccountId = withAccounts[0].AccountId;
                                }

                                if (!$scope.bankAccounts) {
                                    $scope.bankAccounts = [];

                                    _bankAccounts.get({}, function (acc) {
                                        $scope.bankAccounts.push({ Account: $scope._m.globalSelect, Id: 0 });
                                        for (var i = 0; i < acc.Data.length; i++) {
                                            $scope.bankAccounts.push(acc.Data[i]);
                                        }
                                        //  getAccountNo();
                                    });
                                }
                            });


                    };


                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }
                }
            ],
            templateUrl: _session.partialPath('payment-popup.html')
        };
    }])
.directive('kvPurchasePaymentPopup', ['kvSession', 'logger', 'UserResource', 'PurchasePaymentResource', 'kvPaymentMethods', '$filter', 'kvLabel', 'kvMessages', 'paymentStatusMap', 'paymentStatus', 'paymentMethods', 'kvConfirmBox', 'kvPrinter', 'BankAccountResource', 'printTypeMap',
    function (_session, _logger, _usersvc, _paymentsvc, _paymentMethod, $filter, _l, _m, _paymentStatusMap, _paymentStatus, _paymentValues, _msgBox, _print, _bankAccounts, _printTypeMap) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', 'PrivilegeHelper', 'kvEmptyGridFix', function ($scope, _helper, kvEmptyGridFix) {
                    $scope._l = _l;
                    $scope._m = _m;
                    $scope.emptyGridFix = kvEmptyGridFix;
                    $scope.Math = Math;
                    $scope.paymentMethods = _paymentMethod;
                    $scope.purchasepayment_Paid = _l.purchasepayment_Paid;
                    $scope.purchasepayment_Amount = _l.purchasepayment_Amount;
                    $scope.purchasepayment_SupplierPaid = _l.purchasepayment_SupplierPaid;
                    $scope.purchasepayment_CodeTitle = _l.purchase_PaymentCode;
                    $scope.rights = {};
                    $scope.rights.canUpdate = _helper.has('PurchasePayment_Update');
                    $scope.rights.canDelete = _helper.has('PurchasePayment_Delete');
                    var comparePaymentMethodLabel = "";
                    var compareAccountName = "";
                    var compareUserId = "";
                    var compareTransDate = null;

                    $scope.accountChanged = function (e) {
                        var ddl = $('#ddlBankAccount');
                        var currentAcc = $scope.BankAccount;

                        ddl.prop('title', currentAcc ? currentAcc.Bank : "");
                    }
                    $scope.customOptions = {
                        // using {{angular}} templates:
                        template: '<span><b>{{dataItem.Account}}</b><p>&nbsp;&nbsp;{{dataItem.Bank}}</p></span>',
                        valueTemplate: '{{dataItem.Account}}'
                    };

                    function changeTitle(col, title) {
                        $("#grdDetailPurchasePayment th[data-field=" + col + "]").html(title);
                    }
                    $scope.window = {

                        openDetail: function (data) {
                            if (data.Data.length > 0) {

                                $scope.wdPaymentDetail.title($filter("stringFormat")("{0}", [$scope._l.lblPurchasePayment]));
                                $scope.Code = data.Data[0].Code;
                                $scope.TransDate = kendo.parseDate(data.Data[0].TransDate);
                                $scope.SupplierName = data.Data[0].SupplierName;
                                $scope.SupplierCode = data.Data[0].SupplierCode;
                                $scope.Customer = data.Data[0].Supplier;
                                $scope.createdBy = data.Data[0].UserId;
                                $scope.User = data.Data[0].User;
                                $scope.OrderValue = data.Data[0].OrderValue;
                                $scope.PaidValue = data.Data[0].PaidValue;
                                $scope.Amount = data.Data[0].Amount;



                                $scope.BankAccount = data.Data[0].BankAccount;
                                $scope.session = _session;
                                $scope.paymentMedthod = data.Data[0].Method;
                                $scope.description = data.Data[0].Description;

                                if (data.Data[0].User)
                                    $scope.UserName = data.Data[0].User.GivenName;

                                var currentOrderId = data.Data[0].OrderId;

                                $scope.paymentMedthodValue = _paymentValues[data.Data[0].Method];

                                $scope.paymentMedthodObj = $scope.paymentMethods.kvfind(data.Data[0], function (a, b) {
                                    return a.Id == b.Method;
                                });


                                compareTransDate = kendo.parseDate(data.Data[0].TransDate);
                                compareUserId = $scope.createdBy;
                                compareAccountName = $scope.BankAccount != null ? $scope.BankAccount.Account : "";
                                comparePaymentMethodLabel = $scope.paymentMedthodObj.Label;


                                $scope.disabled = (data.Data[0].Status != _paymentStatusMap.Paid);


                                for (var i = 1; i < data.Data.length; i++) {
                                    $scope.PaidValue += data.Data[i].PaidValue;
                                    if (data.Data[i].Status == _paymentStatusMap.Paid) {
                                        $scope.disabled = false;
                                    }
                                    $scope.Amount += data.Data[i].Amount;
                                    if (currentOrderId != data.Data[i].OrderId) {
                                        $scope.OrderValue += data.Data[i].OrderValue;
                                    }
                                    currentOrderId = data.Data[i].OrderId;
                                }

                                $scope.disabled = $scope.disabled || (!$scope.rights.canUpdate);

                                if ($scope.Amount < 0) {
                                    changeTitle("PaidValue", $scope._l.order_AmountValueProceeds);
                                    changeTitle("Amount", $scope._l.order_AmountProceeds);
                                    $scope.purchasepayment_SupplierPaid = $scope._l.order_TotalAmountProceeds;
                                    $scope.purchasepayment_CodeTitle = $scope._l.order_CodeProceeds;
                                    $scope.wdPaymentDetail.title($filter("stringFormat")("{0}", [$scope._l.order_Proceeds]));
                                    refresh($scope);
                                }

                                $scope.payments = new kendo.data.DataSource({
                                    data: data.Data,
                                    schema: {
                                        model: {
                                            fields: {
                                                CreatedDate: { type: "date" },
                                                TransDate: { type: "date" }
                                            }
                                        },
                                        parse: function (response) {
                                            if (response && response) {
                                                for (var j = 0; j < response.length; j++) {
                                                    var t = response[j];
                                                    t.TargetCode = t.TargetCode ? t.TargetCode : t.Code;
                                                    t.Status = _paymentStatus[t.Status];
                                                }
                                            }
                                            return response;
                                        }
                                    }
                                });
                                $scope.NeedPayValue = $scope.OrderValue - $scope.PaidValue;
                                $scope.currentPay = $scope.NeedPayValue - $scope.Amount;
                                refresh($scope);
                                $scope.wdPaymentDetail.wrapper.addClass("k-window-poup k-window-poup-thn k-window-fix k-window-paymentDetail");
                                $scope.wdPaymentDetail.center().open();
                            }
                        }
                    };

                    $scope.cancel = function () {
                        _msgBox.confirm($filter("stringFormat")($scope._m.payment_ConfirmDelete, [$scope.Code]), _m.payment_Cancel_Title, false, _l.confirmYes, _l.confirmNo, false, true);
                        _msgBox.onConfirm = function () {
                            _paymentsvc.delete({ Code: $scope.Code }, function (data) {
                                _logger.success($filter("stringFormat")($scope._m.deleteSuccess, [$scope._l.lblPayment, data.Code]));
                                execCb($scope.onSave);
                                $scope.wdPaymentDetail.close();

                            }, function (err) {
                                callbackFail(err);
                            }
                            );
                        };

                        $scope.wdPaymentDetail.close();
                    };
                    $scope.print = function () {
                        if ($scope.Amount > 0) {
                            // _print.printfromtype("PurchasePayment", $scope);
                            _print.printfromtype(_printTypeMap.PurchasePayment, $scope);
                        } else {
                            //_print.printfromtype("Payment", $scope);
                            _print.printfromtype(_printTypeMap.Payment, $scope);
                        }
                        $scope.wdPaymentDetail.close();
                    };


                    $scope.update = function () {


                        if (($scope.paymentMedthodObj.Id == 'Card' || $scope.paymentMedthodObj.Id == 'Transfer') && ($scope.BankAccount == null || $scope.BankAccount.Id == 0)) {
                            _logger.error(_l.valid_NotChooseCard);
                            return;
                        }



                        var r = _paymentsvc.save({
                            Code: $scope.Code, TransDate: $scope.TransDate,
                            PaymentMedthod: $scope.paymentMedthodObj.Id, Description: $scope.description, UserId: $scope.createdBy,
                            AccountId: $scope.BankAccount ? $scope.BankAccount.Id : null,
                            PaymentMedthodLabel: $scope.paymentMedthodObj.Label, ComparePaymentMethodLabel: comparePaymentMethodLabel,
                            AccountName: $scope.BankAccount ? $scope.BankAccount.Account : null, CompareAccountName: compareAccountName,
                            UserName: $scope.UserName, CompareUserId: compareUserId,
                            CompareTransDate: compareTransDate,
                            payments: $scope.payments
                        });
                        r.$promise.then(callbackSuccess, callbackFail);
                        $scope.wdPaymentDetail.close();
                    };

                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")($scope._m.updatedSuccess, [$scope._l.lblPayment, data.Code]));
                        execCb($scope.onSave);
                    }

                    //function getAccountNo() {
                    //    for (var i = 0 ; i < $scope.bankAccounts.length ; i++) {
                    //        if ($scope.bankAccounts[i].Id == $scope.AccountId) {
                    //            $scope.Account = $scope.bankAccounts[i];
                    //            $scope.AccountNumber = $scope.bankAccounts[i].Account;
                    //            break;
                    //        }
                    //    }
                    //}

                    this.showPayment = function (code, onSaveHandler) {
                        $scope.onSave = onSaveHandler;
                        var inv = _paymentsvc.get({ code: code, Includes: ["User", "OrderValue", "PaidValue", "Supplier", "SupplierName", "TargetCode", "PurchaseOrder", "SupplierCode", "BankAccount"] });
                        inv.$promise.then(function (data) {
                            var r = _usersvc.getSellers({ BranchId: data.Data.BranchId });//_usersvc.get({ BranchId: data.Data.BranchId, IsSeller: true });
                            r.$promise.then(function (users) {
                                $scope.cursellers = users.Data;
                                $scope.window.openDetail(data);
                            });

                            if (!$scope.bankAccounts) {

                                _bankAccounts.get({}, function (result) {

                                    if (!angular.isArray($scope.bankAccounts))
                                        $scope.bankAccounts = [];

                                    $scope.bankAccounts.push({ Account: $scope._m.globalSelect, Id: 0 });
                                    angular.forEach(result.Data, function (item) {
                                        $scope.bankAccounts.push(item);
                                    })

                                    //   getAccountNo();
                                });
                            }


                        });
                    };


                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }
                }
            ],
            templateUrl: _session.partialPath('purchase-payment-popup.html')
        };
    }])
//Delivery Payment PopUp
.directive('kvDeliveryPurchasePaymentPopup', ['kvSession', 'logger', 'UserResource', 'PurchasePaymentResource', 'kvPaymentMethods', '$filter', 'kvLabel', 'kvMessages', 'paymentStatusMap', 'paymentStatus', 'paymentMethods', 'kvConfirmBox', 'kvPrinter', 'BankAccountResource', 'printTypeMap', "kvEmptyGridFix",
function (_session, _logger, _usersvc, _paymentsvc, _paymentMethod, $filter, _l, _m, _paymentStatusMap, _paymentStatus, _paymentValues, _msgBox, _print, _bankAccounts, _printTypeMap, emptyGridFix) {
    return {
        restrict: 'E',
        scope: { popupName: '@kvName' },
        link: function (scope, elem, attrs) {
            elem.on('$destroy', function () {
                if (scope.$parent && scope.popupName) {
                    delete scope.$parent[scope.popupName];
                }
            });
        },
        controller: [
            '$scope', 'PrivilegeHelper', function ($scope, _helper) {
                $scope._l = _l;
                $scope.emptyGridFix = emptyGridFix;
                $scope._m = _m;
                $scope.Math = Math;
                $scope.paymentMethods = _paymentMethod;
                $scope.purchasepayment_Paid = _l.purchasepayment_Paid;
                $scope.purchasepayment_Amount = _l.purchasepayment_Amount;
                $scope.purchasepayment_SupplierPaid = _l.purchasepayment_SupplierPaid;
                $scope.purchasepayment_CodeTitle = _l.purchase_PaymentCode;
                $scope.rights = {};
                $scope.rights.canUpdate = _helper.has('PurchasePayment_Update');
                $scope.rights.canDelete = _helper.has('PurchasePayment_Delete');
                var comparePaymentMethodLabel = "";
                var compareAccountName = "";
                var compareUserId = "";
                var compareTransDate = null;

                function changeTitle(col, title) {
                    $("#grdDetailPurchasePayment th[data-field=" + col + "]").html(title);
                }
                $scope.window = {

                    openDetail: function (data) {
                        if (data.Data.length > 0) {

                            $scope.wdPaymentDetail.title($filter("stringFormat")("{0}", [$scope._l.lblPurchasePayment]));
                            $scope.Code = data.Data[0].Code;
                            $scope.TransDate = kendo.parseDate(data.Data[0].TransDate);
                            $scope.SupplierName = data.Data[0].SupplierName;
                            $scope.SupplierCode = data.Data[0].SupplierCode;
                            $scope.Customer = data.Data[0].Supplier;
                            $scope.createdBy = data.Data[0].UserId;
                            $scope.User = data.Data[0].User;
                            $scope.OrderValue = data.Data[0].OrderValue;
                            $scope.PaidValue = data.Data[0].PaidValue;
                            $scope.Amount = data.Data[0].Amount;
                            $scope.BankAccount = data.Data[0].BankAccount;
                            $scope.session = _session;
                            $scope.paymentMedthod = data.Data[0].Method;
                            $scope.description = data.Data[0].Description;

                            if (data.Data[0].User)
                                $scope.UserName = data.Data[0].User.GivenName;

                            var currentOrderId = data.Data[0].OrderId;

                            $scope.paymentMedthodValue = _paymentValues[data.Data[0].Method];

                            $scope.paymentMedthodObj = $scope.paymentMethods.kvfind(data.Data[0], function (a, b) {
                                return a.Id == b.Method;
                            });

                            compareTransDate = kendo.parseDate(data.Data[0].TransDate);
                            compareUserId = $scope.createdBy;
                            compareAccountName = $scope.BankAccount != null ? $scope.BankAccount.Account : "";
                            comparePaymentMethodLabel = $scope.paymentMedthodObj.Label;

                            $scope.disabled = (data.Data[0].Status != _paymentStatusMap.Paid);


                            for (var i = 1; i < data.Data.length; i++) {
                                $scope.PaidValue += data.Data[i].PaidValue;
                                if (data.Data[i].Status == _paymentStatusMap.Paid) {
                                    $scope.disabled = false;
                                }
                                $scope.Amount += data.Data[i].Amount;
                                if (currentOrderId != data.Data[i].OrderId) {
                                    $scope.OrderValue += data.Data[i].OrderValue;
                                }
                                currentOrderId = data.Data[i].OrderId;
                            }

                            $scope.disabled = $scope.disabled || (!$scope.rights.canUpdate);

                            if ($scope.Amount < 0) {
                                changeTitle("PaidValue", $scope._l.order_AmountValueProceeds);
                                changeTitle("Amount", $scope._l.order_AmountProceeds);
                                $scope.purchasepayment_SupplierPaid = $scope._l.order_TotalAmountProceeds;
                                $scope.purchasepayment_CodeTitle = $scope._l.order_CodeProceeds;
                                $scope.wdPaymentDetail.title($filter("stringFormat")("{0}", [$scope._l.order_Proceeds]));
                                refresh($scope);
                            }

                            $scope.payments = new kendo.data.DataSource({
                                data: data.Data,
                                schema: {
                                    model: {
                                        fields: {
                                            CreatedDate: { type: "date" },
                                            TransDate: { type: "date" }
                                        }
                                    },
                                    parse: function (response) {
                                        if (response && response) {
                                            for (var j = 0; j < response.length; j++) {
                                                var t = response[j];
                                                t.TargetCode = t.TargetCode ? t.TargetCode : t.Code;
                                                t.Status = _paymentStatus[t.Status];
                                            }
                                        }
                                        return response;
                                    }
                                }
                            });
                            $scope.NeedPayValue = $scope.OrderValue - $scope.PaidValue;
                            $scope.currentPay = $scope.NeedPayValue - $scope.Amount;
                            refresh($scope);
                            $scope.wdPaymentDetail.wrapper.addClass("k-window-poup k-window-poup-thn k-window-fix k-window-paymentDetail");
                            $scope.wdPaymentDetail.center().open();
                        }
                    }
                };

                $scope.cancel = function () {
                    _msgBox.confirm($filter("stringFormat")($scope._m.payment_ConfirmDelete, [$scope.Code]), _m.payment_Cancel_Title, false, _l.confirmYes, _l.confirmNo, false, true);
                    _msgBox.onConfirm = function () {
                        _paymentsvc.delete({ Code: $scope.Code }, function (data) {
                            _logger.success($filter("stringFormat")($scope._m.deleteSuccess, [$scope._l.lblPayment, data.Code]));
                            execCb($scope.onSave);
                            $scope.wdPaymentDetail.close();

                        }, function (err) {
                            callbackFail(err);
                        }
                        );
                    };

                    $scope.wdPaymentDetail.close();
                };
                $scope.print = function () {
                    if ($scope.Amount > 0) {
                        // _print.printfromtype("PurchasePayment", $scope);
                        _print.printfromtype(_printTypeMap.PurchasePayment, $scope);
                    } else {
                        //_print.printfromtype("Payment", $scope);
                        _print.printfromtype(_printTypeMap.Payment, $scope);
                    }
                    $scope.wdPaymentDetail.close();
                };


                $scope.update = function () {
                    var r = _paymentsvc.save({
                        Code: $scope.Code, TransDate: $scope.TransDate,
                        PaymentMedthod: $scope.paymentMedthodObj.Id, Description: $scope.description, UserId: $scope.createdBy,
                        AccountId: $scope.BankAccount ? $scope.BankAccount.Id : null,
                        PaymentMedthodLabel: $scope.paymentMedthodObj.Label, ComparePaymentMethodLabel: comparePaymentMethodLabel,
                        AccountName: $scope.BankAccount ? $scope.BankAccount.Account : null, CompareAccountName: compareAccountName,
                        UserName: $scope.UserName, CompareUserId: compareUserId,
                        CompareTransDate: compareTransDate,
                        payments: $scope.payments
                    });
                    r.$promise.then(callbackSuccess, callbackFail);
                    $scope.wdPaymentDetail.close();
                };

                function callbackFail(err) {
                    _logger.error(getMessage(err));
                }

                function callbackSuccess(data) {
                    _logger.success($filter("stringFormat")($scope._m.updatedSuccess, [$scope._l.lblPayment, data.Code]));
                    execCb($scope.onSave);
                }

                //function getAccountNo() {
                //    for (var i = 0 ; i < $scope.bankAccounts.length ; i++) {
                //        if ($scope.bankAccounts[i].Id == $scope.AccountId) {
                //            $scope.Account = $scope.bankAccounts[i];
                //            $scope.AccountNumber = $scope.bankAccounts[i].Account;
                //            break;
                //        }
                //    }
                //}

                this.showPayment = function (code, onSaveHandler) {
                    $scope.onSave = onSaveHandler;
                    var inv = _paymentsvc.get({ code: code, Includes: ["User", "OrderValue", "PaidValue", "Supplier", "SupplierName", "TargetCode", "PurchaseOrder", "SupplierCode", "BankAccount"] });
                    inv.$promise.then(function (data) {
                        var r = _usersvc.getSellers({ BranchId: data.Data.BranchId });//_usersvc.get({ BranchId: data.Data.BranchId, IsSeller: true });
                        r.$promise.then(function (users) {
                            $scope.cursellers = users.Data;
                            $scope.window.openDetail(data);
                        });

                        if (!$scope.bankAccounts) {
                            _bankAccounts.get({}, function (result) {
                                $scope.bankAccounts = result.Data;

                                //   getAccountNo();
                            });
                        }


                    });
                };


                if ($scope.$parent && $scope.popupName) {
                    $scope.$parent[$scope.popupName] = this;
                }
            }
        ],
        templateUrl: _session.partialPath('purchase-payment-popup.html')
    };
}])
.config(['$routeProvider', function ($routeProvider) {

    function routeGuard(path) {
        var isAllowed = ['$q', 'PrivilegeHelper', function ($q, _helper) {
            var deferred = $q.defer();
            if (_helper.accessUrl(path)) {
                deferred.resolve();
                return deferred.promise;
            }
            else {
                deferred.reject({ unauthorized: true, path: path });
                return deferred.promise;
            }
        }];
        return isAllowed;
    }

    //Config langue for Calendar
    kendo.culture("vi-VN");
    moment('vi');
    //config view 
    var _p = angular.module('kv.session').partial;
    $routeProvider.whenAuthorized = function (path, route) {
        route.resolve = route.resolve || {};
        angular.extend(route.resolve, { isAllowed: routeGuard(path) });
        $routeProvider.when(path, route);
    };

    $routeProvider.whenAuthorized('/' + viewUrl.dashBoard, { templateUrl: _p('dashboard.html'), controller: 'DashBoardCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.orderList, { templateUrl: _p('order-list.html'), controller: 'OrderCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.orderEmail, { templateUrl: _p('order-list-email.html'), controller: 'OrderCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.customerList, { templateUrl: _p('customer-list.html'), controller: 'CustomerCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.customerList + '/:id', { templateUrl: _p('customer-update.html'), controller: 'CustomerFormCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.productList, { templateUrl: _p('product-list.html'), controller: 'ProductCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.productList + '/:id', { templateUrl: _p('product-addnew.html'), controller: 'UpdateProductCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.priceBook, { templateUrl: _p('pricebook-list.html'), controller: 'PriceBookCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.stockTakeList, { templateUrl: _p('stocktake-list.html'), controller: 'StockTakeCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.stockTakeList + '/:id', { templateUrl: _p('stocktake-update.html'), controller: 'StockTakeUpdateCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.purchaseOrder, { templateUrl: _p('purchaseorder-list.html'), controller: 'PurchaseOrderCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.purchaseOrder + '/:id', { templateUrl: _p('PurchaseOrder.html'), controller: 'PurchaseOrderUpdateCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.transferList + '/:id', { templateUrl: _p('transfer-form.html'), controller: 'TransferSendCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.transferList, { templateUrl: _p('transfer-list.html'), controller: 'TransferListCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.employeeList, { templateUrl: _p('user-list.html'), controller: 'UserListCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.employeeList + '/:id', { templateUrl: _p('user-form.html'), controller: 'UserFormCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.account, { templateUrl: _p('user-form.html'), controller: 'UserFormCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.supplierList, { templateUrl: _p('supplier-list.html'), controller: 'SupplierCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.supplierList + '/:id', { templateUrl: _p('supplier-update.html'), controller: 'SupplierFormCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.branchList, { templateUrl: _p('branch-list.html'), controller: 'BranchListCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.branchList + '/:id', { templateUrl: _p('branch-form.html'), controller: 'BranchUpdateCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.invoiceList, { templateUrl: _p('invoice-list.html'), controller: 'InvoiceListCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.printModel, { templateUrl: _p('printmodel-form.html'), controller: 'PrintModelCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.auditTrail, { templateUrl: _p('audit-trail.html'), controller: 'AuditTrailCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.surcharge, { templateUrl: _p('surcharge-list.html'), controller: 'SurchargeCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.returnList, { templateUrl: _p('return-list.html'), controller: 'ReturnListCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.purchaseReturnList, { templateUrl: _p('purchase-return-list.html'), controller: 'PurchaseReturnListCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.posSetting, { templateUrl: _p('pos-setting.html'), controller: 'PosSettingCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.purchaseReturnList + '/:id', { templateUrl: _p('purchase-return.html'), controller: 'PurchaseReturnUpdateCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.saleReport, { templateUrl: _p('report-form.html'), controller: 'ReportCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.productReport, { templateUrl: _p('report-product-form.html'), controller: 'ReportProductCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.supplierReport, { templateUrl: _p('report-supplier-form.html'), controller: 'ReportSupplierCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.userReport, { templateUrl: _p('report-user-form.html'), controller: 'ReportUserCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.purchaseOrderReport, { templateUrl: _p('report-purchase-order-form.html'), controller: 'ReportPurchaseOrderCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.endOfDayReport, { templateUrl: _p('report-dayend-form.html'), controller: 'ReportDayEndCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.cashflow, { templateUrl: _p('cashflow.html'), controller: 'CashflowCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.tableList, { templateUrl: _p('table-list.html'), controller: 'TableCtrl' });
    //$routeProvider.whenAuthorized('/' + viewUrl.financialReport, { templateUrl: _p('upgrade.html'), controller: 'UpgradeCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.financialReport, { templateUrl: _p('report-financial-form.html'), controller: 'ReportFinancialCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.liabilitiesReport, { templateUrl: _p('report-liabilities-form.html'), controller: 'ReportLiabilitiesCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.customerReport, { templateUrl: _p('report-customer-form.html'), controller: 'ReportCustomerCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.tableList + '/:id', { templateUrl: _p('table-form.html'), controller: 'TableFormCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.cashflow + '/:id', { templateUrl: _p('cashflow-form.html'), controller: 'CashflowFormCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.manufacturingOrder, { templateUrl: _p('manufacturing-list.html'), controller: 'ManufacturingCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.damageItems, { templateUrl: _p('damageItem-list.html'), controller: 'DamageItemCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.damageItems + '/:id', { templateUrl: _p('damageItem.html'), controller: 'DamageItemUpdateCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.deliveryPartner, { templateUrl: _p('delivery-partner-list.html'), controller: 'DeliveryPartnerCtrl' });
    $routeProvider.whenAuthorized('/' + viewUrl.smsEmail, { templateUrl: _p('sms-email-list.html'), controller: 'SmsEmailController' });
    $routeProvider.whenAuthorized('/' + viewUrl.smsEmailSetting, { templateUrl: _p('sms-email-setting.html'), controller: "SmsEmailSettingController" });
    //default purchaseReturnList
    $routeProvider.otherwise({ redirectTo: '/' + viewUrl.dashBoard });
    /*
    var activeCall = 0; 
    $httpProvider.interceptors.push(['$q', '$rootScope', function ($q, $rootScope) {
        return {
            request: function (config) {                
                KvSpinner.start();
                activeCall++;
                //console.log('start ' + activeCall);
                return config || $q.when(config);
            },
            requestError: function (rejection) {

                return $q.reject(rejection);
            },
            response: function (response) {
                activeCall--;
                //console.log('response ' + activeCall)
                if (activeCall == 0)
                    KvSpinner.stop();
                return response || $q.when(response);
            },
            responseError: function (rejection) {
                activeCall--;
                //console.log('response ' + activeCall)
                if (activeCall == 0)
                    KvSpinner.stop();
                return $q.reject(rejection);
            }
        };
    }]);
    */
    //s.factory('ApiInterceptor', )
}])
.factory('localCache', [function () {
    if (!app.pending) {
        app.pending = db.open({
            server: 'kiotviet-cache',
            version: 1,
            schema: {
                Storage: {
                    key: { keyPath: 'Key' },
                }
            }
        }).done(function (s) {
            app.store = s;
            /*
            if (subscribers && subscribers.length > 0) {
                for (var i = 0; i < subscribers.length; i++) {
                    //getValue(subscribers[i].key, subscribers[i].callback);
                    var action = subscribers[i];
                    action.opt.apply(null, action.params);
                }
                subscribers = [];
            }
            */
            execute();
        });
    }
    var queue = {}, lock = {};

    function acquire(key) {
        if (!lock[key]) {
            lock[key] = 1;
            return true;
        }
        return false;
    }

    function release(key) {
        delete lock[key];
        //notify 
        runTask(queue[key]);
    }

    function enqueue(key, task) {
        if (!queue[key]) {
            queue[key] = [];
        }
        queue[key].push(task);
    }

    function execute() {
        for (var key in queue) {
            //var tasks = queue[key]; 
            /*
            runTask(queue[key], function () {
                delete queue[key];
            });           
            */
            runTask(queue[key]);
        }
    }

    function runTask(taskList, onDone) {
        if (taskList && taskList.length > 0) {
            var cur = taskList.shift();

            cur.opt.apply(null, cur.params);
        }
        else {
            execCb(onDone);
        }
    }

    function getValue(key, callback) {
        if (app.store && acquire(key)) {
            app.store.Storage.get(key).done(function (val) {
                execCb(callback, val ? val.Value : val);
                release(key);
            });
        } else {
            //subscribers.push({ opt: getValue, params: arguments });
            enqueue(key, { opt: getValue, params: arguments });
        }
    }
    function setValue(key, value, callback) {
        if (app.store && acquire(key)) {
            app.store.Storage.remove(key).done(function () {
                app.store.Storage.add({ Key: key, Value: value }).done(function () {
                    execCb(callback);
                    release(key);
                });
            });
        } else {
            //subscribers.push({ opt: setValue, params: arguments });
            enqueue(key, { opt: setValue, params: arguments });
        }
    }

    function remove(key, callback) {
        if (app.store && acquire(key)) {
            app.store.Storage.remove(key).done(function () {
                execCb(callback);
                release(key);
            });
        } else {
            //subscribers.push({ opt: remove, params: arguments });
            enqueue(key, { opt: setValue, params: arguments });
        }
    }

    return {
        get: getValue,
        set: setValue,
        remove: remove
    };

}])
.factory('kvSettingMenu', ['kvLabel', 'PrivilegeHelper', 'settings', function (_l, _p, _setting) {
    var mm = [
        {
            Id: 1, link: viewUrl.posSetting, label: _l.setting_Pos, icon: "fa-wrench"
        },
        {
            Id: 2, link: viewUrl.printModel, label: _l.managePrint, icon: "fa-file-text"
        },
        {
            Id: 3, link: viewUrl.employeeList, label: _l.manageUser, icon: "fa-male"
        },
        {
            Id: 4, link: viewUrl.branchList, label: _l.managerBranch, icon: "fa-puzzle-piece"
        },
        {
            Id: 5,
            link: viewUrl.surcharge,
            label: _l.surchargeManage,
            icon: "fa-cart-plus",
            hidden: !_setting.UseSurcharge
        },
        {
            Id: 7,
            link: viewUrl.smsEmail,
            label: _l.managerSMSEmail,
            icon: "fa-envelope",
            hidden: !_setting.SMSEmailMarketing
        }
    ];
    if (_p.isadmin()) {
        //mm.push({            
        //    Id: 5,
        //    link: viewUrl.surcharge,
        //    label: _l.surchargeManage,
        //    icon: "fa-shopping-cart"
        //});
        mm.push({
            Id: 6,
            link: viewUrl.auditTrail,
            label: _l.auditTrail,
            icon: "fa-history"
        });
        mm.push({
            Id: 9999,
            link: '',
            label: _l.clearSystemData,
            icon: "fa-trash"
        });
    }
    mm = mm.filter(function (t) { return !t.hidden });
    return mm;
}])
.factory('kvMenu', ['kvLabel', 'settings', 'kvSession', function (_l, _setting, _session) {
    function n(l) {
        //return '/#/' + l;
        return l;
    }

    var temp = [
        {
            Id: 1,
            link: n(viewUrl.dashBoard),
            label: _l.doashboard,
            icon: 'fa-eye'
        },
        {
            Id: 2,
            label: _l.stock,

            link: "",
            icon: 'fa-cube',
            sub: [
                { Id: 11, link: n(viewUrl.productList), label: _l.categories, icon: 'fa-th' },
                { Id: 12, link: n(viewUrl.priceBook), label: _l.priceBook, icon: 'fa-tags' },
                { Id: 13, link: n(viewUrl.stockTakeList), label: _l.stocktake_Add, icon: 'fa-check-square-o' },
                { Id: 14, link: n(viewUrl.manufacturingOrder), label: _l.manufacturing, icon: 'fa-cog', hidden: (!_setting.UseManufacturing) }
            ]
        },
        {
            Id: 3,
            label: _l.table,
            link: n(viewUrl.tableList),
            icon: 'fa-table',
            hidden: !_session.retailer.isCoffee
        },
        {
            Id: 4,
            label: _l.transactions,
            link: "",
            icon: 'fa-exchange',
            sub: [
                { Id: 41, link: n(viewUrl.orderList), label: _l.menu_Sales, icon: 'fa-inbox', hidden: (!_setting.SellAllowOrder || _session.retailer.isCoffee) },
                { Id: 42, link: n(viewUrl.invoiceList), label: _l.menu_Invoice, icon: 'fa-file' },
                { Id: 43, link: n(viewUrl.returnList), label: _l.refund, icon: 'fa-reply-all' },
                { Id: 44, link: n(viewUrl.purchaseOrder), label: _l.purchaseOrders, icon: 'fa-share-square-o' },
                { Id: 45, link: n(viewUrl.purchaseReturnList), label: _l.purchaseReturnList, icon: 'fa-share-square' },
                { Id: 46, link: n(viewUrl.transferList), label: _l.fulfillment, icon: 'fa-truck' },
                { Id: 47, link: n(viewUrl.damageItems), label: _l.menu_damageItem, icon: 'fa-recycle' }
            ]
        },
        {
            Id: 5,
            label: _l.partner,
            link: "",
            icon: 'fa-male',
            sub: [
                { Id: 51, link: n(viewUrl.customerList), label: _l.customer, icon: 'fa-user' },
                { Id: 52, link: n(viewUrl.supplierList), label: _l.supplier, icon: 'fa-undo' },
                { Id: 53, link: n(viewUrl.deliveryPartner), label: _l.delivery_partner, icon: 'fa-user-plus', hidden: (!_setting.UseCod || _session.retailer.isCoffee) }
            ]
        },

        {
            Id: 6,
            link: n(viewUrl.cashflow),
            icon: 'fa-usd',
            label: _l.cashflow,
        },
        {
            Id: 7,
            icon: 'fa-bar-chart',
            label: _l.report,
            link: "",
            sub: [
                { Id: 75, link: n(viewUrl.endOfDayReport), label: _l.report_DayEnd, icon: 'fa-pie-chart' },
                { Id: 71, link: n(viewUrl.saleReport), label: _l.report_Sale, icon: 'fa-clipboard' },
                { Id: 79, link: n(viewUrl.purchaseOrderReport), label: _l.product_Order, icon: 'fa-inbox', hidden: _session.retailer.isCoffee },
                { Id: 72, link: n(viewUrl.productReport), label: _l.report_Product, icon: 'fa-cube' },
                { Id: 76, link: n(viewUrl.customerReport), label: _l.report_Customer, icon: 'fa-user' },
                { Id: 77, link: n(viewUrl.supplierReport), label: _l.supplier, icon: 'fa-undo' },
                { Id: 78, link: n(viewUrl.userReport), label: _l.employee, icon: 'fa-male' },
                { Id: 73, link: n(viewUrl.financialReport), label: _l.report_Financial, icon: 'fa-line-chart' }
                //{ Id: 74, link: n(viewUrl.liabilitiesReport), label: _l.report_Liabilities, icon: 'fa-area-chart' },
            ]
        }
    ];
    temp = temp.filter(function (t) { return !t.hidden });
    //tailor menu by setting     
    angular.forEach(temp, function (m) {
        if (m.sub) {
            var b = [];
            for (var v = 0 ; v < m.sub.length ; v++) {
                if (!m.sub[v].hidden)
                    b.push(m.sub[v]);
            }
            m.sub = b;
        }
    });
    return temp;
}])
.run(['kvSession', 'kvLabel', 'kvMessages', '$rootScope', '$location', 'kvEmptyGridFix', 'RequestMonitor', 'settings', 'logger', 'localCache', 'PrivilegeHelper', 'kvMenu', 'kvSettingMenu', 'productType', 'productTypeValue',
    function (_session, _label, _messages, $rootScope, $location, kvEmptyGridFix, _reqMonitor, _setting, _logger, _localCache, _privilege, _menu, _settingMenu, _productType, _productTypeValue) {
        //start retailer app
        //$rootScope.constant = {order};

        $rootScope.viewUrl = viewUrl;
        $rootScope._setting = _setting;
        $rootScope._l = _label;
        $rootScope._m = _messages;
        $rootScope.location = $location;
        $rootScope.emptyGridFix = kvEmptyGridFix;
        $rootScope.currentUser = _session.user;
        $rootScope._p = _privilege;
        $rootScope.isCoffee = _session.retailer.isCoffee;
        $rootScope.hideReport = hideReport;
        $rootScope.showInfoPopup = localStorage["kvAlertReportPopup"] ? localStorage["kvAlertReportPopup"] : $rootScope.hideReport;
        $rootScope.showAlertSystem = function () {
            var checkshow = localStorage["kvAlertReportPopup"];

            //if (checkshow != 'false') {
            //    var currentDate = kendo.parseDate("30/04/2016");
            //    if (_session.retailer.expirydate) {
            //        var expirydate = kendo.parseDate(_session.retailer.expirydate);
            //        $rootScope.showInfoPopup = expirydate.compare(currentDate) >= 0;

            //    } else {
            //        $rootScope.showInfoPopup = true;
            //    }
            //}

            if($rootScope.showInfoPopup)
            {
                $rootScope.showInfoPopup = false;
            }
        }

        //router change
        $rootScope.$on("$routeChangeStart", function (event, next, current) {
            if (next && next.$$route && next.$$route.controller && next.$$route.controller.startsWith("Report") && $rootScope.hideReport) {
                $rootScope.showInfoPopup = true;
                $location.path('/dashboard');
            }
        });

        $rootScope.hideAlerSystem = function () {
            $rootScope.showInfoPopup = false;
            localStorage["kvAlertReportPopup"] = false;
            $("body").removeClass("ovh");
        }

        $rootScope.showAlertSystem();
        var expandedRow;
        $rootScope.grvDetailExpand = function (e) {


            var grid = e.sender;
            var key = grid.wrapper.attr("id");
            if (expandedRow != null && expandedRow[key] != null && expandedRow[key] != e.masterRow[0]) {
                grid.collapseRow(expandedRow[key]);
            }
            if (expandedRow == null) expandedRow = [];
            expandedRow[key] = e.masterRow;
            var icon = e.masterRow.find(".k-hierarchy-cell .k-icon");
            $(".k-tabstrip-wrapper").removeAttr("style");
            if (icon.length > 0) {
                icon.removeClass("k-plus");
                icon.addClass("k-minus");
                icon.parent().parent().addClass("k-master-state");
                $(".k-grid-content").addClass("k-grid-content-ac").scrollLeft(0);
                icon.parent().parent().next().find(".k-tabstrip-wrapper").width($('.k-grid-content').width() - 16);
                //$("body").animate({
                //    scrollTop: icon.parent().parent().offset().top - 10
                //}, 120);
            }
        };
        var isLogoutchecking = false;
        _reqMonitor.addUnauthorizedListener(function () {
            if (!isLogoutchecking) {
                isLogoutchecking = true;
                _logger.warning(_messages.sessionExpire);
                setTimeout(function () { isLogoutchecking = false; }, 3000);
            }
            window.location.href = _session.loginUrl;

        });
        _reqMonitor.start();

        $rootScope.$on('$locationChangeSuccess', function (evt, url) {
            //get the menu label; 
            var label;
            var parentLable = '';
            for (var i = 0 ; i < _menu.length ; i++) {
                var m = _menu[i];
                if (m.link) {
                    if (url.indexOf(m.link) >= 0) {
                        label = m.label;
                        break;
                    }
                }
                else if (m.sub) {
                    for (var j = 0 ; j < m.sub.length ; j++) {
                        var s = m.sub[j];
                        if (s.link && url.indexOf(s.link) >= 0) {
                            //hardcode the label for product, it sucks
                            if (s.link === viewUrl.productList) {
                                label = _label.stock;
                            }
                            else {
                                label = s.label;
                            }
                            parentLable = m.label;
                            break;
                        }
                    }
                }
            }
            if (label) {
                var title = _setting.HideKVInfo ? _session.retailer.name + ' - ' : 'KiotViet - ';
                document.title = title + (parentLable && parentLable != label ? parentLable + ' - ' : '') + label;
            }
            else {
                for (var i = 0 ; i < _settingMenu.length ; i++) {
                    var m = _settingMenu[i];
                    if (m.link) {
                        if (url.indexOf(m.link) >= 0) {
                            label = m.label;
                            break;
                        }
                    }

                    //if (m.Id == 5 && !_setting.UseSurcharge) {
                    //    _settingMenu.splice(i, 1);
                    //}
                }

                if (label) {
                    var title = _setting.HideKVInfo ? _session.retailer.name + ' - ' : 'KiotViet - ';
                    document.title = title + (parentLable && parentLable != label ? parentLable + ' - ' : '') + label;
                }
                else {
                    document.title = _setting.HideKVInfo ? _session.retailer.name + ' - ' : 'KiotViet';
                }
            }
        })

    }])

.directive('kvReportTitle', function () {
    return {
        link: function (scope, elem) {
            var url = window.location.pathname + document.location.hash + "/";
            $(".mainNav ul li a").each(function () {
                var urla = $(this).attr("href");
                if (urla == url) elem.html("Báo cáo <span>" + $(this).html() + "</span>");
            });
        }
    };
})
;
'use strict'
//hoanhd
kvApp.controller('ManufacturingCtrl', ['settings', 'kvSession', '$scope', '$rootScope', '$location', 'kendofilter', '$filter', '$routeParams', 'logger', 'kvConfirmBox', '$route', 'kvExportToExcel', 'manufacturingStatus', 'BranchResource', 'productTypeValue', 'manufacturingStatusValue', 'ManufacturingResource',
function (_settings, _session, $scope, $rootScope, $location, _filter, $filter, $routeParams, _logger, _msgbox, $route, _export, _manufacturingStatus, _branches, _productTypeValue, _manufacturingValue, _manufacturing) {
    $scope.QuickActionItems = [];
    $scope.dateFilter = {
        typeFilter: 'common',
        StartDate: new Date(),
        EndDate: new Date(),
        TimeRange: 'alltime'
    };
    $scope.QuickActionChecked = function (currentItem) {
        var returnedData = $.grep($scope.QuickActionItems, function (element, index) {
            return element.Id == currentItem.Id;
        });
        if (returnedData && returnedData.length > 0) return true;
        else return false;
    }
    $scope.QuickAction = function ($event, currentItem) {
        var returnedData = $.grep($scope.QuickActionItems, function (element, index) {
            return element.Id == currentItem.Id;
        });
        if (returnedData && returnedData.length > 0) {
            $scope.QuickActionItems.splice($scope.QuickActionItems.indexOf(returnedData[0]), 1);
            $event.currentTarget.firstChild.checked = false;
        }
        else {
            $scope.QuickActionItems.push(currentItem);
            $event.currentTarget.firstChild.checked = true;
        }
        if ($event) {
            event.preventDefault();
            event.stopPropagation();
        }

    }
    $scope.keywordParam = '';
    $scope.pageSizes = pager.pageSizes;
    $scope.pageSize = 10;
    $scope.typeList = viewUrl.productList;
    $scope.typeEmail = viewUrl.orderEmail;
    $scope.pTypeValue = _productTypeValue;
    $scope.mTypeValue = _manufacturingValue;
    var rights = window.rights = $scope.rights = {};
    rights.canCreate = $scope._p.has('Manufacturing_Create');
    rights.canUpdate = $scope._p.has('Manufacturing_Update');
    rights.canDelete = $scope._p.has('Manufacturing_Delete');

    $scope.bindedGrid;
    $scope.grvdataBinding = function (arg) {
        $scope.bindedGrid = arg.sender;
        $scope.$apply();
    };

    $scope.$on('$destroy', function () {
        //detach those variable from window obj
        window.rights = null;
    });
    var kvDropbox = {};
    if ($routeParams.filter) {
        kvDropbox = JSON.parse($routeParams.filter);
    }
    $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;
    $scope.branches = _branches.get({ Permission: 'Manufacturing_Read' }, function () {
        $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
    });
    $scope.currentBranchId = _session.branch.Id;

    $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
    $scope.dateFilter.TimeRange = (kvDropbox.dateFilter) ? kvDropbox.dateFilter : 'alltime';
    var now = new Date();
    now = now.setHours(0, 0, 0, 0);
    var fromDate = new Date(now);
    var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);
    $scope.dateFilterRange = {
        fromDate: kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart),
        toDate: kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now))
    };
    $scope.manufacturingStatus = kvDropbox.manufacturingStatus;
    if (!$scope.manufacturingStatus) {
        $scope.manufacturingStatus = [];
        for (var i in _manufacturingStatus) {
            $scope.manufacturingStatus.push({ key: i, value: _manufacturingStatus[i] });
        }
    }
    $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;

    if ($routeParams.Code) {
        //show detail for only one order 
        $scope.keywordParam = $routeParams.Code;
        //remove any other filter 
        $scope.branchids = [];
        $scope.dateFilter.TimeRange = '';
        $scope.currentBranchId = 0;
        $scope.filterDescription = '';
    }
    //Filter
    function initFilter() {
        var filter = [];
        if ($routeParams.Code) {
            filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
        } else {
            var values = $scope.branchids;
            var condition = [];
            if (values && values.length > 0) {
                for (var k = 0; k < values.length; k++) {
                    if (parseInt(values[k].Id) > 0) {
                        condition.push(_filter.newCondition("BranchId", parseInt(values[k].Id), "eq"));
                    }
                }
                filter = _filter.append(filter, condition, "or");
            }

           if ($scope.dateFilter.TimeRange == 'other') {

                if ($scope.dateFilter.StartDate) {

                    var todate = new Date($scope.dateFilter.EndDate);
                    condition.push(_filter.newCondition("ManufacturingDate", $scope.dateFilter.StartDate, "ge"));
                    condition.push(_filter.newCondition("ManufacturingDate", new Date(todate.DateAdd(1)), "lt"));
                }
                filter = _filter.append(filter, condition, "and");
           } else if ($scope.dateFilter.TimeRange != '') {
                condition = [
                 _filter.newCondition("ManufacturingDate", $scope.dateFilter.TimeRange, "eq")
                ];
                filter = _filter.append(filter, condition, "or");
            }
            var values = $scope.manufacturingStatus;
            condition = [];
            var count = 0;
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) > 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                    count++;
                }
            }
            if (count > 0) {
                filter = _filter.append(filter, condition, "or");
            }
        }
        return filter;
    }
    $scope.filterbyStatus = function () {
        var values = $scope.manufacturingStatus;
        var condition = [];
        var count = 0;
        for (var k = 0; k < values.length; k++) {
            if (values[k].checked && parseInt(values[k].key) >= 0) {
                condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                count++;
            }
        }
        if (count > 0) {
            _filter.filter($scope.manufacturingDetails.dataSource, condition, "or");
        } else {
            _filter.remove($scope.manufacturingDetails.dataSource, "Status");
        }
    };
    $scope.filterbyBranch = function () {
        var values = $scope.branchids;
        var condition = [];
        if (values && values.length > 0) {
            for (var k = 0; k < values.length; k++) {
                if (parseInt(values[k].Id) > 0) {
                    condition.push(_filter.newCondition("BranchId", parseInt(values[k].Id), "eq"));
                }
            }
            _filter.filter($scope.manufacturingDetails.dataSource, condition, "or");
        } else {
            _filter.remove($scope.manufacturingDetails.dataSource, "BranchId");
        }
    };
    $scope.filterbyDescription = function () {
        if ($scope.filterDescription) {
            var condition = [
           _filter.newCondition("Description", $scope.filterDescription, "contains")
            ];
            _filter.filter($scope.manufacturingDetails.dataSource, condition, "and");
        } else {
            _filter.remove($scope.manufacturingDetails.dataSource, "Description");
        }
    };
    $scope.filterbyKeyword = function () {
        if ($scope.keywordParam) {
            var condition = [
           _filter.newCondition("Code", $scope.keywordParam, "contains")];
            _filter.filter($scope.manufacturingDetails.dataSource, condition, "and");
        } else {
            _filter.remove($scope.manufacturingDetails.dataSource, "Code");
        }
    };
    var ischecking = false;
    $scope.filterByDateRange = function () {
        if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
            if (!ischecking) {
                ischecking = true;
                _logger.error($scope._l.errInputDateTimeFilter);
                setTimeout(function () { ischecking = false; }, 3000);
            }
            return;
        }

        $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
        var condition = [];
        if ($scope.dateFilter.StartDate) {
            var todate = new Date($scope.dateFilter.EndDate);
            condition.push(_filter.newCondition("ManufacturingDate", $scope.dateFilter.StartDate, "ge"));
            condition.push(_filter.newCondition("ManufacturingDate", new Date(todate.DateAdd(1)), "lt"));
        }
        _filter.filter($scope.manufacturingDetails.dataSource, condition, "and");
        $scope.dateFilter.TimeRange = 'other';
        //$scope.dateFilterPopup.close();
    };
    $scope.filterbyDate = function () {

        if ($scope.dateFilter.TimeRange == 'other') {
            $scope.filterByDateRange();
        }
        else {
            //if ($scope.dateFilter.TimeRange == 'alltimes') {
            //    _filter.remove($scope.manufacturingDetails.dataSource, "ManufacturingDate");
            //    return;
            //}
            var fnow = new Date();
            fnow = fnow.setHours(0, 0, 0, 0);
            var ffromDate = new Date(fnow);
            var defStartchange = $scope.dateFilter.TimeRange == 'thisweek' ? ffromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? ffromDate.GetfirstDayOfMonth() : ffromDate);
            $scope.dateFilter.StartDate = defStartchange;
            $scope.dateFilter.EndDate = new Date(fnow);
            $scope.lblOtherTimeFilter = null;
            var condition = [
                  _filter.newCondition("ManufacturingDate", $scope.dateFilter.TimeRange, "eq")
            ];
            _filter.filter($scope.manufacturingDetails.dataSource, condition, "or");
        }
    };
    function filterbyExtention() {
        var para = {};
        para.ProductKey = $scope.filterProduct;
        return para;
    }
    $scope.detailManufacturingInit = function (e) {
        var detailRow = e.detailRow;
        detailRow.find(".tabstrip").kendoTabStrip({
            animation: false,
            activate: function (tabevent) { }
        });
        //=== item list =========================
        var detaiManufacturinglList = new kendo.data.DataSource({
            type: 'odata',
            transport: {
                read: {
                    url: '/api/manufacturing/getitems?format=json&ManufacturingId=' + e.data.Id,
                    dataType: 'json'
                }
            },
            pageSize: 5,
            serverPaging: false,
            serverFiltering: true,
            serverSorting: true,
            schema: {
                data: 'Data',
                total: 'Total',
                parse: function (response) {
                    if (response) {
                        if (response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        angular.forEach(response.Data, function (r) {
                                r.OnhandCustom = r.Type == $scope.pTypeValue.Purchased ? kendo.toString(r.Onhand, "#,#.###") : "---";

                        });
                    }
                    return response;
                },
                model: {
                    fields: {
                        Code: { type: "string" },
                    }
                }
            },
        });
        detailRow.find('.manufacturingDetailList').kendoGrid({
            dataSource: detaiManufacturinglList,
            pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: ($scope._l.pagerInfo + $scope._l.manufacturing_itemPaging)} },
            dataBinding: function () {
                $scope.emptyGridFix.apply(this, arguments);
            },

            columns: [
                    {
                        field: "Code",
                        title: "Mã thành phần",
                        headerAttributes: { "class": "w120px" },
                        attributes: { "class": "w120px" }
                    },
                    {
                        field: "Name",
                        title: "Tên thành phần",
                    },
                    {
                        field: "OnhandCustom",
                        title: "Tồn kho",
                        headerAttributes: { "class": "w100px txtR" },
                            format: "{0:#,0.###}",
                        attributes: { "class": "w100px txtR" },
                        hidden: e.data.Status != $scope.mTypeValue.Draft
                    },
                     {
                         field: "Quantity",
                         title: "Sử dụng",
                         headerAttributes: { "class": "w100px txtR" },
                         attributes: { "class": "w100px txtR" },
                         template: '<span style=\'#=Quantity>Onhand?"color:red;":""#\'>#=kendo.toString(Quantity,"\\#,\\#.\\#\\#\\#")#</span>'
                     },
            ],
        });
    };

    $scope.manufacturingDetails = {
        dataSource: new kendo.data.DataSource({
            type: "odata",
            autoSync: true,

            transport: {
                read: {
                    url: "/api/manufacturing?format=json&Includes=Product&Includes=User",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests,
                    data: filterbyExtention
                }
            },

            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    fields: {
                        Code: { type: "string" },
                        ManufacturingDate: { type: "date" },
                    }
                },
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    if (response && response.Data) {
                        for (var j = 0; j < response.Data.length; j++) {
                            var t = response.Data[j];
                            t.Description = t.Description ? t.Description : "";
                            t.StatusName = _manufacturingStatus[t.Status];
                        }
                    }


                    return response;
                }
            }
        }),
        columns: [
            {
                field: "Id", title: " ",
                headerAttributes: { "class": "tdSorter" },
                attributes: { "class": "tdSorter" },
                template: "<label class='quickaction_chk dpb' ng-click='QuickAction($event,dataItem)'><input class='check_row' type='checkbox' ng-checked='QuickActionChecked(dataItem)'/><span></span></label>"

            },
            {
                field: "Code",
                title: "Mã sản xuất",
                headerAttributes: { "class": "tdCode" },
                attributes: { "class": "tdCode" }

            },
            {
                field: "ManufacturingDate",
                title: $scope._l.lblTime,
                format: "{0:dd/MM/yyyy HH:mm}",
                headerAttributes: { "class": "tdDateTime" },
                attributes: { "class": "tdDateTime" },
                isDate: true
            },
            //{
            //    field: "Description",
            //    title: $scope._l.note,
            //},
            {
                field: "Product.Code",
                title: "Mã hàng",
                headerAttributes: { "class": "tdName" },
                attributes: { "class": "tdName" }
            },
            {
                field: "Product.Name",
                title: "Tên hàng",
                attributes: { "class": "tdMin" },
                headerAttributes: { "class": "tdMin" }
            },
             {
                 field: "Quantity",
                 title: "Số lượng",
                 format: "{0:#,0.###}",
                 headerAttributes: { "class": "tdSLB txtR" },
                 attributes: { "class": "tdSLB txtR" }
             }, {
                 field: "Description",
                 title: "Ghi chú",
                 headerAttributes: { "class": "tdMin" },
                 attributes: { "class": "tdMin" }, hidden: true,
                 template: "{{dataItem.Description | truncateDesc}}"
             },
            {
                field: "StatusName",
                title: "Trạng thái",
                headerAttributes: { "class": "tdStatus" },
                attributes: { "class": "tdStatus" }
            },
        ],
        dataBound: $scope.emptyGridFix,
        detailTemplate: kendo.template($("#templManufacturingDetail").html()),
        detailInit: $scope.detailManufacturingInit,
        detailExpand: $scope.grvDetailExpand,
    };
    $scope.refresh = function () {
        $scope.manufacturingDetails.dataSource.pageSize(parseInt($scope.pageSize));

    };
    $scope.RefreshGrid = function () {
        $scope.manufacturingDetails.dataSource.read();
    }
    $scope.export = function () {
        var filter = $scope.manufacturingDetails.dataSource.reader.kvFilter;
        var columns = [];
        columns = _export.getGridColumns("grdManufacturing");

        var type = "Manufacturing";
        var fileName = "PhieuSanXuat";
        var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
        _export.toExcel(type, fileName, data);
    };
    $scope.quickactionexport = function (showDetail) {
        var type = showDetail ? "ManufacturingSecondaryItems" : "ManufacturingAllItems";

        var fileName = "BangKeSuDungNguyenLieu";

        var ids = [];
        angular.forEach($scope.QuickActionItems, function (r) {
            ids.push(r.Id);
        });
        var idsstring = ids.join();
        var data = { req: idsstring };
        _export.toExcel(type, fileName, data);

    };
    $scope.exportDetail = function (dataItem) {
        var type = "ManufacturingDetail";
        var fileName = "ChiTietPhieuSanXuat_" + dataItem.Code;
        var data = { req: dataItem.Id };
        _export.toExcel(type, fileName, data);
    };
    $scope.AddManufacturing = function () {
        $scope.manufacturingForm.openWindow(null);
    };
    $scope.editManufacturing = function (data) {
        $scope.manufacturingForm.openWindow(data);
    };
    $scope.delete = function (item) {
        _msgbox.confirm("Bạn có chắc chắn muốn hủy phiếu sản xuất này? ", "Hủy phiếu sản xuất", false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgbox.onConfirm = function () {

            var r = _manufacturing.delete({ manufacturingId: item.Id, CompareCode: item.Code , CompareStatus: item.Status});
            r.$promise.then(function (result) {
                _logger.success($filter("stringFormat")($scope._l.msgDel, ["Hủy phiếu sản xuất:", item.Id]));
                $scope.RefreshGrid();
            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
    };
}])
.directive('kvManufacturingForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'ManufacturingResource', 'kvEmptyGridFix', 'productTypeValue', 'manufacturingStatusValue',
    function (_session, _labels, _logger, _m, _msgbox, _manufacturing, kvEmptyGridFix, _productTypeValue, _manufacturingValue) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', kvWidth: '@kvWidth' },
            controller: ['$scope', '$rootScope', 'PrivilegeHelper', function ($scope, $rootScope, _privileges) {
                $scope.pTypeValue = _productTypeValue;
                $scope.mTypeValue = _manufacturingValue;
                $scope.emptyGridFix = kvEmptyGridFix;
                $scope._l = _labels;
                $scope.canDelete = _privileges.has('Manufacturing_Delete');
                $scope.canUpdate = _privileges.has('Manufacturing_Update');
                this.openWindow = function (manu) {
                    $scope.currentDate = new Date();
                    $scope.saving = false;
                    $scope.tabs = 1;
                    $scope.manufacturing = manu == null ? { Id: 0, Code: "", Description: "", Quantity: 1, Product: null, Status: $scope.mTypeValue.Draft } : angular.copy(manu);
                    $scope.manufacturingWindow.title($scope.manufacturing.Id > 0 ? "Sửa phiếu sản xuất" : "Tạo phiếu sản xuất");
                    $scope.manufacturingWindow.wrapper.addClass("k-window-poup-tabs k-window-poup-tabs1 k-window-poup k-window-fix k-window-manufacturing");
                    $scope.manufacturingWindow.center().open();
                };
                $scope.ManufacturingDateChange = function () {
                    $scope.manufacturing.ManufacturingDate = this.value();
                };
                $scope.closeWindow = function () {
                    $scope.manufacturingWindow.close();
                };
                if ($scope.formName) {
                    //inject to this controller to parent 
                    $scope.$parent[$scope.formName] = this;
                };
                $scope.cancel = function () {
                    $scope.closeWindow();
                };
                $scope.saveManufacturing = function (isComplete) {

                    if (($scope.manufacturing.Product == null || !$scope.manufacturing.Quantity)) {
                        _logger.error("Vui lòng chọn Hàng hóa & Số lượng cần sản xuất.");
                        return;
                    } else {
                        $scope.manufacturing.ProductId = $scope.manufacturing.Product.Id;
                    }
                    if (!$scope.saving) {
                        if (isComplete) {
                            $scope.manufacturing.Status = $scope.mTypeValue.Complete;
                        }
                        $("#LoadingPanel").show();
                        $scope.saving = true;
                        var r = _manufacturing.save({ Manufacturing: $scope.manufacturing });
                        r.$promise.then(function (result) {
                            $("#LoadingPanel").hide();
                            _logger.success(result.Message);
                            $scope.cancel();
                            $scope.$parent.RefreshGrid();


                        }, function (err) {
                            $scope.saving = false;
                            $("#LoadingPanel").hide();
                            _logger.error(getMessage(err));

                        });
                    }
                };
                $scope.delete = function () {
                    if ($scope.manufacturing.Id > 0) {
                        _msgbox.confirm("Bạn có chắc chắn muốn hủy phiếu sản xuất này? ", "Xóa phiếu sản xuất", false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        _msgbox.onConfirm = function () {
                            var r = _manufacturing.delete({ manufacturingId: $scope.manufacturing.Id });
                            r.$promise.then(function (result) {
                                $scope.cancel();
                                _logger.success(result.Message);
                                $scope.$parent.RefreshGrid();


                            }, function (err) {
                                _logger.error(getMessage(err));

                            });
                        }
                    }

                };
                $scope.$watch('tabs', function () {
                    if ($scope.tabs && $scope.tabs == 2 && ($scope.manufacturing.Product == null || !$scope.manufacturing.Quantity)) {
                        $scope.tabs = 1;
                        _logger.error("Vui lòng chọn Hàng hóa & Số lượng cần sản xuất.");
                    } else {
                        if ($scope.tabs && $scope.tabs == 2)
                            $scope.RefreshFormula();
                    }
                });
                $scope.removeProduct = function () {
                    $scope.manufacturing.Product = null;
                };
                $scope.manufacturingItemDetails = {
                    dataSource: new kendo.data.DataSource({
                        type: "odata",
                        autoSync: true,

                        transport: {
                            read: {
                                url: null,
                                dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests,
                            }
                        },

                        pageSize: $scope.pageSize,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            model: {
                                fields: {
                                    Code: { type: "string" }
                                }
                            },
                            parse: function (response) {
                                if (response && response.Filter) {
                                    this.kvFilter = response.Filter;
                                }

                                angular.forEach(response.Data, function (r) {
                                    r.OnhandCustom = r.Type == $scope.pTypeValue.Purchased ? kendo.toString(r.Onhand, "#,#.###") : "---";
                                    //r.QuantityCustom = r.Type == $scope.pTypeValue.Purchased && r.Onhand < r.Quantity ? ("<span style='color:red;'>" + kendo.toString(r.Quantity, "#,#.##") + "</span>") : kendo.toString(r.Quantity, "#,#.##")
                                });
                                return response;
                            }
                        }
                    }),
                    columns: [
                        {
                            field: "Code",
                            title: "Mã thành phần",
                            headerAttributes: { "class": "w120px" },
                            attributes: { "class": "w120px" }
                        },
                        {
                            field: "Name",
                            title: "Tên thành phần",
                        },
                        {
                            field: "OnhandCustom",
                            title: "Tồn kho",
                            headerAttributes: { "class": "w100px txtR" },
                            attributes: { "class": "w100px txtR" },
                        },
                         {
                             field: "Quantity",
                             title: "Sử dụng",
                             headerAttributes: { "class": "w100px txtR" },
                             attributes: { "class": "w100px txtR" },
                             template: '<span style=\'#=Quantity>Onhand?"color:red;":""#\'>#=kendo.toString(Quantity,"\\#,\\#.\\#\\#\\#")#</span>'
                         },
                    ],
                    dataBound: $scope.emptyGridFix,
                };
                $scope.RefreshFormula = function () {
                    if ($scope.manufacturing.Status == $scope.mTypeValue.Complete)
                        $scope.manufacturingItemDetails.dataSource.transport.options.read.url = "/api/manufacturing/getitems?ManufacturingId=" + $scope.manufacturing.Id;
                    else
                        $scope.manufacturingItemDetails.dataSource.transport.options.read.url = "/api/manufacturing/getitems?ProductId=" + $scope.manufacturing.Product.Id + "&Quantity=" + $scope.manufacturing.Quantity;
                    if ($scope.manufacturingItemDetails.dataSource.page() != 1) {
                        $scope.manufacturingItemDetails.dataSource.page(1);
                    }
                    $scope.manufacturingItemDetails.dataSource.read();
                }
            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('manufacturing-form.html')
        };
    }])
.directive('kvManufacturingFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('manufacturing-filter.html')
    };
}])
.controller('ManufacturingAutoCompleteCtrl', ['$scope', 'ProductResource', 'logger', function ($scope, _product, _logger) {
    function search(query) {
        var r = _product.manufacturingautocomplete({ tearm: query });
        r.$promise.then(function (result) {
            $scope.products = result;
            refresh($scope);

        }, function (err) {

        });

    }
    $scope.searchTermChanged = function () {
        search($scope.productSearchTerm);
    };
    $scope.addProductToList = function (objProduct) {
        $scope.$parent.manufacturing.Product = objProduct;
    }
}])
.directive('kvManufacturingPopup', ['kvSession', '$rootScope', 'logger', 'ManufacturingResource', 'kvConfirmBox', '$filter', 'kvLabel', 'kvMessages', 'manufacturingStatus', 'kvEmptyGridFix', function (_session, $rootScope, _logger, _manufacturing, _msgbox, $filter, _l, _m, _manufacturingStatus, kvEmptyGridFix) {

    return {
        restrict: 'E',
        scope: { popupName: '@kvName' },
        link: function (scope, elem, attrs) {
            elem.on('$destroy', function () {
                if (scope.$parent && scope.popupName) {
                    delete scope.$parent[scope.popupName];
                }
            });
        },
        controller: [
            '$scope', function ($scope) {
                $scope._l = _l;
                $scope._m = _m;
                $scope.viewUrl = viewUrl;
                $scope.emptyGridFix = kvEmptyGridFix;
                $scope.window = {
                    openDetail: function (data) {
                        $scope.manufacturingPopup.title("Thông tin phiếu Sản xuất");
                        $scope.manufacturingStatus = _manufacturingStatus;
                        $scope.dataItem = data;

                        $scope.dataItem.ManufacturingDate = kendo.parseDate($scope.dataItem.ManufacturingDate);
                        $scope.manufacturingItemDetails.dataSource.transport.options.read.url = "/api/manufacturing/getitems?ManufacturingId=" + $scope.dataItem.Id;
                        if ($scope.manufacturingItemDetails.dataSource.page() != 1) {
                            $scope.manufacturingItemDetails.dataSource.page(1);
                        }
                        $scope.manufacturingItemDetails.dataSource.read();

                        $scope.manufacturingPopup.center().open();

                    }
                };

                $scope.cancel = function () {
                    $scope.manufacturingPopup.close();
                };

                $scope.dispose = function () {
                    $scope.dataItem = null;
                    $scope.mnfetails = null;
                    $scope.selectedProduct = null;
                };
                $scope.showProduct = function (code) {
                    $scope.$parent.filter.keywordParam = code;
                    refresh($scope.$parent);
                    $scope.$parent.filterbyKeyword();

                    $scope.cancel();
                }
                $scope.manufacturingItemDetails = {
                    dataSource: new kendo.data.DataSource({
                        type: "odata",
                        autoSync: true,

                        transport: {
                            read: {
                                url: null,
                                dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests,
                            }
                        },

                        pageSize: $scope.pageSize,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            model: {
                                fields: {
                                    Code: { type: "string" }
                                }
                            }
                        }
                    }),
                    columns: [
                        {
                            field: "Code",
                            title: "Mã thành phần",
                            headerAttributes: { "class": "w120px" },
                            attributes: { "class": "w120px" }
                        },
                        {
                            field: "Name",
                            title: "Tên thành phần",
                        },
                         {
                             field: "Quantity",
                             title: "Sử dụng",
                             format: "{0:#,0.###}",
                             headerAttributes: { "class": "w100px txtR" },
                             attributes: { "class": "w100px txtR" },
                         },
                    ],
                    //dataBound: $scope.emptyGridFix,                    
                };

                $scope.manufacturingGridDatabound = function (e) {
                    var gridData = e.sender.dataSource.data();
                    $.each(gridData, function (i, row) {
                        for (var j = 0; j < $scope.selectedProduct.length; j++) {
                            if (row.Id == $scope.selectedProduct[j]) {
                                $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                            }
                        }
                    });
                    if ($('tr').hasClass('tr-currentSelected')) {
                        e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                    }
                }

                this.showManufacturing = function (id, selectedProduct) {
                    $scope.selectedProduct = selectedProduct;
                    var r = _manufacturing.get({ manufacturingId: id, Includes: ["User", "Product"] });
                    r.$promise.then(function (result) {
                        $scope.window.openDetail(result);
                    }, function (err) {
                        _logger.error(getMessage(err));

                    });



                };


                //inject to parent 
                if ($scope.$parent && $scope.popupName) {
                    $scope.$parent[$scope.popupName] = this;
                }

            }
        ],
        templateUrl: _session.partialPath('manufacturing-popup.html')
    };
}]);

;
'use strict'
kvApp.controller('PriceBookCtrl', ['kvSession', '$scope', '$rootScope', '$location', '$routeParams', 'logger', '$route', 'kendofilter', '$filter', 'CategoryResource', 'PriceBookResource', 'kvConfirmBox', 'kvExportToExcel', "$kWindow",
    function (_session, $scope, $rootScope, $location, $routeParams, _logger, $route, _filter, $filter, _category, _pricebook, _msgbox, _export, $kWindow) {
        $scope.canCreate = $scope._p.has('PriceBook_Create');
        $scope.canUpdate = $scope._p.has('PriceBook_Update');
        $scope.selectedCategory = 0;
        $scope.SelectedPriceBookId = 0;
        $scope.selectedPriceBook = { Id: 0, Name: '' };
        $scope.keywordParam = '';
        $scope.pageSizes = pager.pageSizes;
        $scope.typeList = viewUrl.productList;
        $scope.typeEmail = viewUrl.orderEmail;
        if ($("#rowTemplate").html()) {
            $scope.template = $("#rowTemplate").html();
            $scope.pageSize = pager.defaultEmail;
            // $scope.viewtype = $scope.typeEmail;
        } else {
            $scope.pageSize = pager.defaultList;
            //  $scope.viewtype = $scope.typeList;
        }
        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }

        $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;

        $scope.grvdataBinding = function (arg) {
            var grid = arg.sender;

            // get column list
            var ds = [];
            for (var i = 0; i < grid.columns.length; i++) {
                if (grid.columns[i].field == "Id" || ($scope.SelectedPriceBookId == 0 && grid.columns[i].field == "BasePrice"))
                    continue;

                ds.push({
                    encoded: false,
                    text: "<label class='quickaction_chk dpb'><input type='checkbox' checked='checked' " +
                          " class='check_row' data-field='" + grid.columns[i].field +
                          "'/><span></span>" + grid.columns[i].title + "</label>"
                });
            }

            $("#columnSelection").kendoMenu({
                dataSource: [{
                    text: "",
                    items: ds
                }],
                openOnClick: true,
                closeOnClick: false,
                open: function () {
                    var selector;
                    $.each(grid.columns, function () {
                        if (this.hidden) {
                            selector = "input[data-field='" + this.field + "']";
                            $(selector).prop("checked", false);
                        }
                    });
                },
                select: function (e) {
                    // don't show/hide for menu button
                    if ($(e.item).parent().filter("div").length) return;

                    var input = $(e.item).find("input.check_row");
                    var field = $(input).data("field");
                    if ($(input).is(":checked")) {
                        grid.showColumn(field);
                    } else {
                        grid.hideColumn(field);
                    }

                    var isBasePrice = ($scope.SelectedPriceBookId == 0);
                    saveColumnsCookie(grid, isBasePrice);
                }
            });
        };

        $scope.grvdataBound = function (arg) {
            $scope.emptyGridFix(arg);
            
            if ($scope.SelectedPriceBookId == 0) {
                arg.sender.hideColumn("BasePrice");
                $scope.grdPriceBookDetails.hideColumn("Id");
            } else {
                arg.sender.showColumn("BasePrice");
                $scope.grdPriceBookDetails.showColumn("Id");
            }

            //
            try {
                var gridId = $scope.SelectedPriceBookId == 0 ? "BasePriceGrid" : "OtherPriceGrid";
                if (gridId && localStorage.getItem(gridId)) {
                    var obj = JSON.parse(localStorage.getItem(gridId));
                    if (obj) {
                        for (var i = 0; i < obj.length; i++) {
                            var col = obj[i];
                            if (col.hidden) {
                                arg.sender.hideColumn(col.field);
                            } else
                                arg.sender.showColumn(col.field);
                        }
                    }
                }
            } catch (ex) {
                // if browser doesn't support local storage -> ignore
            }
        };

        function saveColumnsCookie(grid, isBase) {
            //saves the current column information into a local storage
            try {
                var obj = kendo.stringify(grid.columns);
                if (isBase)
                    localStorage.setItem("BasePriceGrid", obj);
                else
                    localStorage.setItem("OtherPriceGrid", obj);
            } catch (ex) {
                //it fails when the grid isn't initialized - we can just ignore that
            }
        }

        $scope.onChangePriceBook = function (e) {
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedPriceBook = dataItem;
            $scope.RefreshGrid(true);
            refresh($scope);
            if (typeof ($scope.currentRow) != "undefined" && $scope.currentRow) {
                $rootScope.$broadcast('clearCalcPriceBook', null);
            }
            
        };
        $scope.onCascadePriceBook = function (e) {
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedPriceBook = dataItem;
            $scope.SelectedPriceBookId = dataItem.Id;
        };

        //reload selected Pricebook in case of 
        //update 
        $scope.onDataBound = function (e) {
            this.value($scope.SelectedPriceBookId);
            var dataItem = e.sender.dataItem(e.sender.selectedIndex);
            $scope.selectedPriceBook = dataItem;

            refresh($scope);
            //$scope.SelectedPriceBookId = dataItem.Id;
        };

        $scope.comboPriceBook = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                //autoSync: true,
                transport: {
                    read: {
                        url: "/api/pricebook/getall?includeAll=true&Includes=PriceBookBranches&Includes=PriceBookCustomerGroups&Includes=PriceBookUsers",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        fields: {
                            CreatedDate: { type: "date" },
                            EndDate: { type: "date" },
                            StartDate: { type: "date" },

                        }
                    },
                }
            }),
            dataTextField: "Name",
            dataValueField: "Id",
            change: $scope.onChangePriceBook,
            cascade: $scope.onCascadePriceBook,
            dataBound: $scope.onDataBound,
            valuePrimitive: true
        };

        $scope.AddPriceBook = function () {
            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: $scope._l.pricebook_Add,
                    resizable: false,
                    draggable: true,
                    pinned: true,
                    width: 680,
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-poup-tabs k-window-masstel k-window-priceBook");
                    }
                },
                template: "<kv-price-book-form kv-on-cancel='onCancel()' kv-on-save='onSave(pb)'></kv-price-book-form>",
                controller: ["$scope", "$windowInstance", function ($scope, $windowInstance) {
                    $scope.onSave = function (pb) {
                        $windowInstance.close(pb);
                    };

                    $scope.onCancel = function () {
                        $windowInstance.close(false);
                    };
                }]
            });

            wdInstance.result.then(function (resp) {
                if (!angular.isUndefined(resp)) {
                    $scope.SelectedPriceBookId = resp;
                    $scope.comboPriceBook.dataSource.read();
                    $scope.RefreshGrid();
                }
            });
        };
        $scope.EditPriceBook = function () {
            if ($scope.selectedPriceBook.Id > 0) {

                var wdInstance = $kWindow.open({
                    options: {
                        modal: true,
                        title: $scope._l.pricebook_EditInfo,
                        resizable: false,
                        draggable: true,
                        pinned: true,
                        width: 680,
                        visible: false,
                        open: function () {
                            this.wrapper.addClass("k-window-poup k-window-poup-tabs k-window-masstel k-window-priceBook");
                        }
                    },
                    template: "<kv-price-book-form kv-price-book='selectedPriceBook' kv-on-cancel='onCancel()' kv-on-save='onSave(pb)' kv-on-delete='onDelete(pb)'></kv-price-book-form>",
                    resolve: {
                        selectedPriceBook: function () {
                            return $scope.selectedPriceBook;
                        }
                    },
                    controller:["$scope", "$windowInstance", "selectedPriceBook", function ($scope, $windowInstance, selectedPriceBook) {

                        init();

                        function init() {
                            $scope.selectedPriceBook = selectedPriceBook;
                        };

                        $scope.onSave = function (pb) {
                            $windowInstance.close(pb);
                        };

                        $scope.onCancel = function () {
                            $windowInstance.close(false);
                        };

                        $scope.onDelete = function (pb) {
                            $windowInstance.close(pb);
                        };
                    }]
                });

                wdInstance.result.then(function (resp) {
                    if (!angular.isUndefined(resp)) {
                        $scope.SelectedPriceBookId = resp;
                        $scope.comboPriceBook.dataSource.read();
                        $scope.RefreshGrid();
                    }
                });
            } else {
                //_logger.error($scope._l.pricebook_msgErrorInfo + " " + $scope._m.globalPriceBook);
                _logger.error($scope._l.pricebook_msgErrorInfo);
            }
                
        };

        $scope.refresh = function () {
            $scope.pricebookDetails.dataSource.pageSize(parseInt($scope.pageSize));

        };
        $scope.RefreshGrid = function (isResetPage) {
            $scope.ProductPrice = {};

            $scope.pricebookDetails.dataSource.transport.options.read.url = "/api/pricebook/getitems?PriceBookId=" + $scope.SelectedPriceBookId;
            if (isResetPage && $scope.pricebookDetails.dataSource.page() != 1) {
                $scope.pricebookDetails.dataSource.page(1);
            }
            $scope.pricebookDetails.dataSource.read();


            /*
            if ($scope.SelectedPriceBookId == 0) {
                $scope.grdPriceBookDetails.hideColumn("Id");
                $scope.grdPriceBookDetails.hideColumn("BasePrice");
            } else {
                $scope.grdPriceBookDetails.showColumn("Id");
                $scope.grdPriceBookDetails.showColumn("BasePrice");
                $("#productSearchInput").focus();
            }
            */
        }
        var columns = [
                {
                    field: "Id",
                    title: " ",
                    hidden: true,
                    attributes: { "class": "tdDel txtC" },
                    headerAttributes: { "class": "tdDel txtC" },
                    template: "<a title=\"Xóa\"  ng-click=\"deleteItem(dataItem)\" class=\"icon del\" >Del</a>"
                },
                {
                    field: "Code",
                    title: $scope._l.pricebook_ProCode,
                    attributes: { "class": "tdCode" },
                    headerAttributes: { "class": "tdCode" }
                },
                {
                    field: "Name",
                    title: $scope._l.pricebook_ProName,
                    attributes: { "class": "tdMin" },
                    headerAttributes: { "class": "tdMin" }
                },
                {
                    field: "Cost",
                    title: $scope._l.pricebook_ProCost,
                    format: "{0:n0}",
                    attributes: { "class": "tdTotal txtR" },
                    template: '{{dataItem.MasterUnitId==null ? ( dataItem.Cost| balSheetFormat: 0): "---" }}',
                    headerAttributes: { "class": "tdTotal txtR" },
                },
                {
                    field: "LatestPurchasePrice",
                    title: $scope._l.pricebook_ProLatestPurchasePrice,
                    format: "{0:n0}",
                    attributes: { "class": "tdName txtR" },
                    template: '{{dataItem.MasterUnitId==null ? ( dataItem.LatestPurchasePrice| balSheetFormat: 0): "---" }}',
                    headerAttributes: { "class": "tdName txtR" },
                },
                {
                    field: "BasePrice",
                    title: $scope._l.pricebook_ProBasePrice,
                    format: "{0:n0}",
                    attributes: { "class": "tdTotal txtR" },
                    headerAttributes: { "class": "tdTotal txtR" },
                    template: "{{dataItem.BasePrice|number:0}}"
                },
                {
                    field: "Price",
                    title: $scope._l.pricebook_ProPriceNew,
                    format: "{0:n0}",
                    attributes: { "class": "tdSLC txtR fr" },
                    headerAttributes: { "class": "tdSLC txtR" },
                    template: ($scope.canUpdate ? "<input  type=\"text\"  ng-class=\"(dataItem.NewPrice< dataItem.LatestPurchasePrice)?'txtR iptR w100px highlightrow':'txtR iptR w100px'\"  k-min=\"0\" ng-model=\"dataItem.NewPrice\" ng-focus=\"setCurrentRow($event)\" ng-blur=\"savePrice($event)\" kv-auto-numeric=\"{mDec:0}\" kv-popup-anchor=\"calcPriceItem\" kv-placement=\"bottomright\"/>" : null)
                }
        ];


        if (!$scope.canUpdate) {
            columns.shift(); //remove delete column;
        }

        if (!$scope._p.has('Product_Cost')) {
           
            for (var i = 0 ; i < columns.length ; i++) {                
                if (columns[i].field === 'Cost') {
                    columns.splice(i, 1); break;
                }
                
            }
        }
        if (!$scope._p.has('Product_PurchasePrice')) {

            for (var i = 0 ; i < columns.length ; i++) {
                if (columns[i].field === 'LatestPurchasePrice') {
                    columns.splice(i, 1); break;
                }
            }
        }

        $scope.pricebookDetails = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                autoSync: true,

                transport: {
                    read: {
                        url: "/api/pricebook/getitems?PriceBookId=0",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },

                pageSize: $scope.pageSize,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                filter: null,
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        fields: {
                            Code: { type: "string" },
                            Name: { type: "string" },
                        }
                    },
                    parse: function (response) {
                        if (response && response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        if (response) {
                            for (var j = 0; j < response.Data.length; j++) {
                                var t = response.Data[j];
                                t.Price = parseInt(t.Price);
                                t.BasePrice = parseInt(t.BasePrice);
                                t.LatestPurchasePrice = parseInt(t.LatestPurchasePrice);
                                t.NewPrice = t.Price;
                            }
                        }
                        return response;
                    }
                }
            }),
            columns: columns,
            dataBound: function () {
                if ($scope.pricebookDetails.dataSource.view().length == 0) {
                    var currentPage = $scope.pricebookDetails.dataSource.page();
                    if (currentPage > 1) {
                        $scope.pricebookDetails.dataSource.page(currentPage - 1);
                    }
                }
            }

        };
        $scope.filterbyKeyword = function () {
            var condition = [], filter = [];

            if ($scope.keywordParam != '') {
                condition.push(_filter.newCondition("FullName", $scope.keywordParam, "contains"));
                condition.push(_filter.newCondition("Code", $scope.keywordParam, "contains"));
                filter = _filter.append(filter, condition, "or");
                _filter.addfilter($scope.pricebookDetails.dataSource, filter);



            } else {
                _filter.remove($scope.pricebookDetails.dataSource, "FullName");
                _filter.remove($scope.pricebookDetails.dataSource, "Code");
            }


        };

        var onSelect = function (e) {
            var tmpTreeview = e.sender,
                selectedDataItem = tmpTreeview.dataItem(e.node);
            $scope.selectedCategory = selectedDataItem.Id;
            //   var condition = [], filter = [];

            if ($scope.selectedCategory != 0) {
                var r = _category.get({ categoryId: $scope.selectedCategory });
                r.$promise.then(function (result) {
                    var condition = [], filter = [];
                    $.each(result.Data, function (index, value) {
                        condition.push(_filter.newCondition("CategoryId", value.Id, "eq"));
                    });
                    filter = _filter.append(filter, condition, "or");
                    _filter.addfilter($scope.pricebookDetails.dataSource, filter);
                }, function (err) {
                    _logger.error(getMessage(err));

                });

            } else {
                _filter.remove($scope.pricebookDetails.dataSource, "CategoryId");
            }
        };
        $scope.AddCategoryToPriceBook = function (event) {
            if ($scope.SelectedPriceBookId != 0) {
                $("#LoadingPanel").show();
                var r = _pricebook.addcategory({ CategoryId: this.dataItem.Id, PriceBookId: $scope.SelectedPriceBookId, ComparePriceBookName: $scope.selectedPriceBook.Name });
                r.$promise.then(function (result) {
                    $("#LoadingPanel").hide();
                    _logger.success(result.Message);
                    $scope.RefreshGrid();
                }, function (err) {
                    $("#LoadingPanel").hide();
                    _logger.error(getMessage(err));

                });

            } else {
                _logger.error($scope._l.pricebook_MsgGroupError + " " + $scope._m.globalPriceBook);

            }
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
        };
        $scope.treeviewcat = {
            dataSource: new kendo.data.HierarchicalDataSource({
                type: "odata",
                //autoSync: true,
                transport: {
                    read: {
                        url: "/api/categories?format=json&hierachicalData=true&includeAll=true&Includes=HasChild",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        id: "Id",
                        hasChildren: "HasChild"
                    }
                }
            }),
            dataTextField: 'Name',
            template: "<span class=\"nametreeview\">#= item.Name #</span><a ng-show=\"canUpdate\" class=\"edittreeview\" data=\"#=encodeURIComponent(JSON.stringify(item)) #\" title=\"Thêm\"  ng-click=\"AddCategoryToPriceBook($event)\"><i class=\"fa fa-share\"></i></a>",
            select: onSelect
        };
        $scope.savePrice = function (e) {
            if (this.dataItem.Price != this.dataItem.NewPrice) {
                if ($scope.SelectedPriceBookId == 0) {
                    this.dataItem.BasePrice = this.dataItem.NewPrice;
                }
                var oldPrice = angular.copy(this.dataItem.Price);
                this.dataItem.Price = this.dataItem.NewPrice;
                var r = _pricebook.updateitems({ ProductId: this.dataItem.Id, PriceBookId: $scope.SelectedPriceBookId, CompareName: $scope.selectedPriceBook.Name, Price: this.dataItem.NewPrice, ComparePrice: oldPrice, CompareCode: this.dataItem.Code });
                r.$promise.then(function (result) {
                    _logger.success(result.Message);

                }, function (err) {
                    _logger.error(getMessage(err));
                });
            }



        };
        $scope.setCurrentRow = function (e) {
            $scope.currentRow = this.dataItem;
            $rootScope.$broadcast('refreshCalcPriceBook', null);
        };
        $scope.deleteItem = function (item) {
            _msgbox.confirm($filter("stringFormat")($scope._l.pricebook_DelProductMsg, [item.Name]), $scope._l.pricebook_DelProductTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgbox.onConfirm = function () {
                //console.log(item);
                var r = _pricebook.deleteitems({ PriceBookItemId: item.PriceBookItemId, ComparePriceBookName: $scope.selectedPriceBook.Name });
                r.$promise.then(function (result) {
                    _logger.success(result.Message);
                    $scope.RefreshGrid();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };
        };
        $scope.importPriceBook = function () {
            $scope.priceBookImport.showPopup($scope.SelectedPriceBookId);
        };
        $scope.exportPriceBook = function () {

            var filter = $scope.pricebookDetails.dataSource.reader.kvFilter;

            var type = "PriceBook";
            var fileName = "BangGia";
            var data = { req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);


        };
        $scope.calcPriceBook = function () {
            $scope.calcPriceForm.openWindow($scope.SelectedPriceBookId);
            
        };


    }])
.controller('ProductAutoCompleteCtrl', ['$scope', 'ProductResource', 'logger', function ($scope, _product, _logger) {
    function search(query) {
        var r = _product.autocomplete({ tearm: query, IncludeStock: true });
        r.$promise.then(function (result) {
//            console.log(result);
            $scope.products = result;
            refresh($scope);

        }, function (err) {

        });
    }
    $scope.searchTermChanged = function () {
        search($scope.productSearchTerm);
    };
}])
    .controller('ProductDamageItemAutoCompleteCtrl', ['$scope', 'ProductResource', 'logger', function ($scope, _product, _logger) {
        function search(query) {
            var r = _product.autocomplete({ tearm: query, ShowAllItem: true,OnlyStock:true });
            r.$promise.then(function (result) {
                $scope.products = result;
                refresh($scope);

            }, function (err) {

            });

        }
        $scope.searchTermChanged = function () {
            search($scope.productSearchTerm);
        };
    }])
.controller('PriceBookAutoCompleteCtrl', ['$scope', 'PriceBookResource', 'logger', function ($scope, _pricebook, _logger) {
        function search(query) {
            var r = _pricebook.autocomplete({ tearm: query, IncludeStock: true });
            r.$promise.then(function (result) {
                $scope.products = result;
                refresh($scope);

            }, function (err) {

            });

        }
        $scope.searchTermChanged = function () {
            search($scope.productSearchTerm);
        };
        $scope.addProductToList = function (objProduct) {
            var r = _pricebook.additems({ ProductId: objProduct.Id, PriceBookId: $scope.SelectedPriceBookId, PriceBookName: $scope.selectedPriceBook.Name, Price: objProduct.BasePrice });
            r.$promise.then(function (result) {
                _logger.success(result.Message);
                $scope.RefreshGrid();
            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
    }])
.directive('kvPriceBookFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('pricebook-filter.html')
    };
}])
.directive('kvPriceBookForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'PriceBookResource', 'BranchResource',
    function (_session, _labels, _logger, _m, _msgbox, _pricebook, _branches) {
        return {
            restrict: 'E',
            scope: {
                pb: "=kvPriceBook",
                onCancel: "&kvOnCancel",
                onSave: "&kvOnSave",
                onDelete: "&kvOnDelete"
            },
            controller: ['$scope', '$rootScope', 'PrivilegeHelper', function ($scope, $rootScope, _privileges) {
                $scope._l = _labels;
                $scope.canDelete = _privileges.has('PriceBook_Delete');
                $scope.canUpdate = _privileges.has('PriceBook_Update');
                console.log(" can update = " + $scope.canUpdate + " canDelete = " + $scope.canDelete);
                $scope.branches = _branches.get({ Permission: 'PriceBook_Create', CountAll: true });
                $scope.pricebook = { Id: 0, Name: "", IsGlobal: true, IsActive: true, ForAllUser: true, ForAllCusGroup: true, StartDate: $scope.currentDate, EndDate: $scope.endDate };
                var priceBookName = "";

                init();

                function init() {
                    $scope.currentDate = new Date();
                    $scope.endDate = new Date($scope.currentDate.getTime() + 365 * 24 * 60 * 60 * 1000);
                    $scope.tabs = 1;
                    $scope.pricebook = $scope.pb == null ? { Id: 0, Name: "", IsGlobal: true, IsActive: true, ForAllUser: true, ForAllCusGroup: true, StartDate: $scope.currentDate, EndDate: $scope.endDate } : angular.copy($scope.pb);
                    priceBookName = $scope.pricebook.Name;
                    if (!$scope.pricebook.Id) {
                        //default global or not 
                        $scope.pricebook.IsGlobal = ($scope.branches.Total == $scope.branches.TotalInRetailer);
                    }
                    $scope.pricebook.selectedUser = [];
                    $scope.pricebook.selectedBranch = [];
                    $scope.pricebook.selectedCustomerGoup = [];
                    if ($scope.pb && $scope.pb.PriceBookBranches) {
                        angular.forEach($scope.pb.PriceBookBranches, function (value, key) {
                            $scope.pricebook.selectedBranch.push(value.BranchId);
                        });
                    }

                    if ($scope.pb && $scope.pb.PriceBookCustomerGroups) {
                        angular.forEach($scope.pb.PriceBookCustomerGroups, function (value, key) {
                            $scope.pricebook.selectedCustomerGoup.push(value.CustomerGroupId);
                        });
                    }

                    if ($scope.pb && $scope.pb.PriceBookUsers) {
                        angular.forEach($scope.pb.PriceBookUsers, function (value, key) {
                            $scope.pricebook.selectedUser.push(value.UserId);
                        });
                    }
                }

                $scope.onChange = function () {
                   // $scope.pricebook.selectedUser = [];
                    $scope.comboUser.dataSource.read();
                }
                $scope.Nothing = function () { };
                var getParaForUser = function () {
                    var para = {};
                    para.Role = 'Invoice';
                    para.AllBranch = $scope.pricebook ? $scope.pricebook.IsGlobal : false;
                    if ($scope.pricebook && $scope.pricebook.selectedBranch) {
                        para.BranchIds = JSON.stringify($scope.pricebook.selectedBranch);
                    }
                    return para;
                }

                $scope.comboUserDataSource = new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/users/roles",
                            dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            data: getParaForUser
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    }
                });

                $scope.comboUser = {
                    dataSource: $scope.comboUserDataSource,
                    dataTextField: "GivenName",
                    dataValueField: "Id",
                    valuePrimitive: true,
                    change: $scope.onChange,
                    cascade: $scope.onCascade,
                    dataBound: $scope.onDataBound
                };

                $scope.comboGroupDataSource = new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/customers/group",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    }
                });

                $scope.comboGroup = {
                    dataSource: $scope.comboGroupDataSource,
                    dataTextField: "Name",
                    dataValueField: "Id",
                    change: $scope.onChange,
                    valuePrimitive: true,
                    cascade: $scope.onCascade,
                    dataBound: $scope.onDataBound
                };


                $scope.closeWindow = function () {
                    if (angular.isFunction($scope.onCancel)) {
                        $scope.onCancel();
                    }
                };
                if ($scope.formName) {
                    //inject to this controller to parent 
                    $scope.$parent[$scope.formName] = this;
                };

                $scope.cancel = function () {
                    //$
                    $scope.closeWindow();
                };
                $scope.savePriceBook = function () {

                    $scope.pricebook.PriceBookCustomerGroups = [];
                    $scope.pricebook.PriceBookUsers = [];
                    $scope.pricebook.PriceBookBranches = [];

                    if ($scope.pricebook.selectedCustomerGoup)
                        for (var i = 0; i < $scope.pricebook.selectedCustomerGoup.length; i++) {
                            $scope.pricebook.PriceBookCustomerGroups.push({ CustomerGroupId: parseInt($scope.pricebook.selectedCustomerGoup[i]) });
                        }
                    if ($scope.pricebook.selectedUser)
                        for (var j = 0; j < $scope.pricebook.selectedUser.length; j++) {
                            $scope.pricebook.PriceBookUsers.push({ UserId: parseInt($scope.pricebook.selectedUser[j]) });
                        }
                    if ($scope.pricebook.selectedBranch)
                        for (var k = 0; k < $scope.pricebook.selectedBranch.length; k++) {
                            $scope.pricebook.PriceBookBranches.push({ BranchId: parseInt($scope.pricebook.selectedBranch[k]) });
                        }

                    
                    var r = _pricebook.save({ PriceBook: $scope.pricebook });

                    r.$promise.then(function (result) {
                        _logger.success(result.Message);

                        if (angular.isFunction($scope.onSave)) {
                            $scope.onSave({ pb: result.Data });
                        }

                    }, function (err) {
                        _logger.error(getMessage(err));

                    });
                };
                $scope.delete = function () {
                    _msgbox.confirm($scope._l.priceBook_MsgDel, $scope._l.priceBook_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    _msgbox.onConfirm = function () {
                        var r = _pricebook.delete({ Id: $scope.pricebook.Id, CompareName: priceBookName });
                        r.$promise.then(function (result) {
                            _logger.success(result.Message);

                            if (angular.isFunction($scope.onDelete)) {
                                $scope.onDelete({ pb: 0 });
                            }

                        }, function (err) {
                            _logger.error(getMessage(err));

                        });
                    }
                };

                //$scope.branches.$promise.then(function () {
                //    /*
                //    $scope.chooseBranchPriceBook = {
                //        dataSource: $scope.branches.Data,// _session.branchs,
                //        dataTextField: 'Name',
                //        dataValueField: 'Id',
                //    }
                //    */
                //    //if ($scope.pricebook)
                //    //    $scope.pricebook.IsGlobal = ($scope.branches.Total == $scope.branches.TotalInRetailer)
                //})
            }],
            link: function (scope, elem, attrs, ctrl) {
                //elem.on("$destroy", function () {
                //    if (scope.formName && scope.$parent)
                //        delete scope.$parent[scope.formName];
                //});
            },
            templateUrl: _session.partialPath("pricebook-form.html")
        };
    }])
.directive('kvPriceBookImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages',
    function (_session, _logger, $filter, _l, _m) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;
                    //$scope.IsReplaceExisting = true;
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                                _logger.error($scope._l.pricebook_MsgImportErrorFile);
                                e.preventDefault();
                            }
                        });
                        e.data = { pricebookId: $scope.pricebookId };
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        
                        
                    };

                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();
                        //$scope.IsReplaceExisting = true;
                    };
                    var onSuccessImport = function (e) {
                        var data = e.response.Data;
                        //if ($scope.IsReplaceExisting) {
                        //$scope.$parent.cart.PurchaseOrderDetails = data;
                        $scope.$parent.pricebookDetails.dataSource.read();
                        //} else {
                        //    for(var v=0;v<data.length;v++ ){
                        //        $scope.$parent.cart.addDetail(data[v]);
                        //    }
                        //}
                        $scope.importWindow.close();
                        refresh($scope.$parent);
                        //$scope.RefreshGrid();
                    };
                    var onImportError = function (e) {
                        $scope.ImportError = e.XMLHttpRequest.responseText;
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");

                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };

                    var onImportCancel = function (e) {
                    };
                    $scope.showPopup = function (id) {
                        $scope.pricebookId = id;
                        $scope.importWindow.wrapper.addClass("k-window-poup k-window-masstel k-window-imporPricebook");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,

                        async: {
                            saveUrl: "/Files/ImportPriceBook",
                            removeUrl: "/Files/Remove",
                            autoUpload: false
                        },

                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: $scope._l.pricebook_ChooseFile,
                            uploadSelectedFiles: $scope._l.pricebook_Uploaded,
                            statusUploading: $scope._l.pricebook_Uploading,
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }

                }
            ],
            templateUrl: _session.partialPath('pricebook-import.html')
        };
    }])
 .controller('CalcPriceCtrl', ['$scope', 'DiscountTypes', 'logger', 'PriceBookResource', 'kvConfirmBox', '$rootScope', function ($scope, DiscountTypes, _logger, _pricebook, _msgbox, $rootScope) {
     $scope.discountTypes = DiscountTypes;
     $scope.CalcValueType = DiscountTypes.percent;
     $scope.CalcValue = 0;
     $scope.CalcZone = false;
     $scope.calcActive = 1;
     $scope.CalcPriceType = 1;
     $scope.price = 0;
     $scope.calcValueTypeChanged = function (type) {
         $scope.CalcValue = 0;
         $scope.calc();
     };
     $scope.calc = function () {
         $scope.price = 0;
         if ($scope.CalcPriceType == 1) {
             $scope.price = $scope.currentRow.Price;
         } else if ($scope.CalcPriceType == 2) {
             $scope.price = $scope.currentRow.LatestPurchasePrice;
         }
         else if ($scope.CalcPriceType == 3) {
             $scope.price = $scope.currentRow.BasePrice;
         }
         else {
             $scope.price = $scope.currentRow.Cost;
         }
         if ($scope.CalcValueType == DiscountTypes.percent) {
             if ($scope.calcActive == 1) {
                 $scope.price = $scope.price + (($scope.CalcValue * $scope.price) / 100);
             } else {
                 $scope.price = $scope.price - (($scope.CalcValue * $scope.price) / 100);
             }


         }
         else {

             if ($scope.calcActive == 1) {
                 $scope.price = $scope.price + $scope.CalcValue;
             } else {
                 $scope.price = $scope.price - $scope.CalcValue;
             }
             if ($scope.price < 0) {
                 $scope.price = 0;
             }
         }
         $scope.price = Math.round($scope.price);
         if ($scope.price < 0) {
             $scope.price = 0;
         }
         //refresh($scope);
     }
     $rootScope.$on('refreshCalcPriceBook', function (evt, vl) {
         $scope.calc();
     });
     $rootScope.$on('clearCalcPriceBook', function (evt, vl) {
         $scope.CalcValueType = DiscountTypes.percent;
         $scope.CalcValue = 0;
         $scope.CalcZone = false;
         $scope.calcActive = 1;
         $scope.CalcPriceType = 1;
     });
     $scope.$watch('calcActive', function () {
         if (typeof ($scope.currentRow) != "undefined" && $scope.currentRow) {
             $scope.calc();
         }
      
     });
     $scope.gettext = function () {
         return 'Áp dụng công thức cho ' + $scope.pricebookDetails.dataSource.total() + ' sản phẩm trong bảng giá?';
     };
     $scope.applyPrice = function () {

       
        
         var oldPrice = $scope.currentRow.Price;
         if ($scope.CalcValue > 0 || ($scope.CalcValue == 0 && $scope.CalcPriceType != 1)) {
             if ($scope.CalcZone) {
                 var count = $scope.pricebookDetails.dataSource.total();
                 var txt = 'Hệ thống sẽ thay đổi giá cho ' + count + ' sản phẩm nằm trong bảng giá này, bạn có chắc chắn muốn thực hiện?';
                 _msgbox.confirm(txt, $scope._l.pricebook_MsgApplyPriceTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                 _msgbox.onConfirm = function () {
                     $("#LoadingPanel").show();
                     var r = _pricebook.calcprice({ PriceBookId: $scope.SelectedPriceBookId, PriceBookName: $scope.selectedPriceBook.Name, Operator: $scope.calcActive, CalcValue: $scope.CalcValue, CalcValueType: $scope.CalcValueType, CalcPriceType: $scope.CalcPriceType, CalcPriceTypeName: $("#calcPriceItem select option[value=" + $scope.CalcPriceType + "]").text(), Keyword: $scope.keywordParam, CategoryId: $scope.selectedCategory, Number: count });
                     r.$promise.then(function (result) {
                         $("#LoadingPanel").hide();
                         $scope.RefreshGrid();
                         _logger.success(result.Message);

                     }, function (err) {
                         $("#LoadingPanel").hide();
                         _logger.error(getMessage(err));
                     });
                 };
             } else {
                 $scope.calc();
                 $scope.currentRow.NewPrice = $scope.price;
                 $scope.currentRow.Price = $scope.price;
                 if ($scope.SelectedPriceBookId == 0) {
                     $scope.currentRow.BasePrice = $scope.price;
                 }
                 if ($scope.price != oldPrice) {

                     var r = _pricebook.updateitems({ ProductId: $scope.currentRow.Id, PriceBookId: $scope.SelectedPriceBookId, CompareName: $scope.selectedPriceBook.Name, Price: $scope.price, ComparePrice: oldPrice, CompareCode: $scope.currentRow.Code });
                     r.$promise.then(function (result) {
                         _logger.success(result.Message);

                     }, function (err) {
                         _logger.error(getMessage(err));
                     });
                 }
             }
             
         }
         $("#calcPriceItem").removeClass("popping");
         $scope.CalcZone = false;
     };
 }])
;;

'use strict'
kvApp.controller('PrintModelCtrl', [
    '$scope', 'BranchResource', 'branchType', 'branchTypeMap', '$location', 'BranchResource', 'logger', '$routeParams', 'CommonServices', '$route', 'SettingResource', 'PrintTemplateResource', '$sce', 'kvPrinter', 'OrderResource', 'printTypeMap', '$http', 'printType', 'kvPrintTempServ', '$window', 'kvConfirmBox', 'kvSession',
    function ($scope, _branches, _branchType, _branchTypeMap, $location, _branch, _logger, $routeParams, _commonServ, $route, _settings, _printTemplate, $sce, _print, _order, _printTypeMap, $http, _printType, _printTempServ, $window, _msgbox,session) {

        $scope.isIE = $window.navigator.userAgent.indexOf("MSIE") > 0 || $window.navigator.userAgent.indexOf(".NET") > 0;
        $scope.Type = _printTypeMap.Invoice;
        init();
        $scope.isCoffee = session.retailer.isCoffee;

        $scope.tabTypeChanged = function () {
            //console.log($scope.Type);
            init();
        };

        $scope.defaultDetail = function () {
            var confirm = _msgbox.confirm($scope._l.print_MsgChangeTemp, $scope._l.print_LoadTemp, false, $scope._l.yes, $scope._l.no, false);
            confirm.confirm = function() {
                var typeName = _printType[$scope.Type] + "Detail";
                getDefaultTemplate(typeName,true);
            };
        };

        function init() {

            // phieu thu/chi
           
            $scope.showBigTemplate = true;
            $scope.showTemplate = false;
            if ($scope.Type == 4 || $scope.Type == 5 || $scope.Type == 7 || $scope.Type == 8) {
                $scope.showBigTemplate = false;
                $scope.showTemplate = true;
            }
            // End

            $scope.tools = [
                {
                    //name: "insertHtml",
                    //items: $scope.template

                },
                "bold",
                "italic",
                "underline",
                "strikethrough",
                "justifyLeft",
                "justifyCenter",
                "justifyRight",
                "justifyFull",
                "insertUnorderedList",
                "insertOrderedList",
                "indent",
                "outdent",
                "createLink",
                "unlink",
                "insertImage",
                "subscript",
                "superscript",
                "createTable",
                "addRowAbove",
                "addRowBelow",
                "addColumnLeft",
                "addColumnRight",
                "deleteRow",
                "deleteColumn",
                "viewHtml",
                "formatting",
                "fontName",
                "fontSize",
                //"foreColor",
                //"backColor",
                //print_LoadTemp
                {
                    name: "cmdLagerTemplate",
                    template: "<button class='k-button' ng-click='defaultDetail()' ng-show='showBigTemplate'>" + $scope._l.print_LoadBigTemp + "</button>"

                },
                {
                    name: "cmdSmallTemplate",
                    template: "<button class='k-button' ng-click='defaultSimple()' ng-show='showBigTemplate' >" + $scope._l.print_LoadSmallTemp + "</button>"

                },
                {
                    name: "cmdTemplate",
                    template: "<button class='k-button' ng-click='defaultSimple()' ng-show='showTemplate'>" + $scope._l.print_LoadTemp + "</button>"

                }
            ];

            $scope.kendo = _printTempServ.getKendoToken($scope.Type);
            $scope.demoData = _printTempServ.getDemoData($scope.Type);
            refresh($scope);

            _printTemplate.get({
                type: $scope.Type
            }, function(data) {
                if (data && data.Content) {
                    $scope.Id = data.Id;
                    $scope.RetailerId = data.RetailerId;
                    $scope.PrintModel = data.Content;
                    setPreview($scope.PrintModel);
                    refresh($scope);
                } else {
                    $scope.defaultSimple();
                }

            }, function(err) {
                _logger.error(getMessage(err));
            });
        };

        $scope.renderHtml = function(html_code) {
            return $sce.trustAsHtml(html_code);
        };

        $scope.save = function() {
            var printModel = $("#editor").data().kendoEditor.value();
            var printTemplate = {
                Id: $scope.Id,
                Type: $scope.Type,
                RetailerId: $scope.RetailerId,
                Content: printModel
            };

            _printTemplate.savePrintTemplate({
                printTemplate: printTemplate
            }, function(data) {
                _logger.success($scope._l.print_UpdateTempSuccess);
            }, function(err) {
                _logger.error(getMessage(err));
            });
        };


        $scope.defaultSimple = function () {
            var confirm = _msgbox.confirm($scope._l.print_MsgChangeTemp, $scope._l.print_LoadTemp, false, $scope._l.yes, $scope._l.no, false);
            confirm.confirm = function () {
                var typeName = _printType[$scope.Type] + "Simple";
                getDefaultTemplate(typeName, true);
            };
        };        
        function getDefaultTemplate(typeName,isDefault) {
            var url = "/PrintTemplate/" + (isDefault ? "GetDefaultTemplate" : "GetTemplate") + "/?type=" + typeName;
            $http.get(url).success(function(data) {
                $scope.PrintModel = data;
                setPreview($scope.PrintModel);
            }).error(function(error) {
                _logger.error(error);
            });
        }

        $scope.textChanged = function(e) {

            //#332
            if (!$scope.$parent._p.has('PrintTemplate_Update')) {
                $(".k-tool-group").each(function (k, v) {
                    if ($(this).find("button").attr("ng-click") === undefined) {
                        $(this).hide();
                    }
                });
                var editor = $("#editor").data("kendoEditor");
                var editorBody = $(editor.body);
                editorBody.add("td", editorBody).removeAttr("contenteditable");
            }
            //#332

            var text = this.value();
            if (text != null) {
                this.options.tools = $scope.tools;
                setPreview(text);
                refresh($scope);
            }

        };

        function setPreview(text) {
            var preview = _printTempServ.getPrintHtml(text, $scope.Type, $scope.demoData);
            $scope.Preview = preview;
        }

    }
]);
;
'use strict'
//hoanhd

kvApp.directive('kvProductForm', ['settings', 'kvSession', '$rootScope', '$location', '$routeParams', 'logger', 'ProductResource', '$route', 'kvConfirmBox', 'productTypeValue', 'productType', 'PrivilegeHelper', 'kvLabel', 'kvMessages', '$filter',
function (_settings, _session, $rootScope, $location, $routeParams, _logger, _product, $route, _msgbox, _productTypeValue, _productType, _privilege, _label, _messages, $filter) {
        return {
            restrict: 'E',
            scope: { formName: '@formName' },
            controller: ['$scope', function ($scope) {
                $scope.childScopeUpload = {};
                $scope.isCafe = _session.retailer.isCoffee;
                $scope._p = _privilege;
                $scope._m = _messages;
                $scope._l = _label;
                $scope.pTypeValue = _productTypeValue;
                $scope.showFomular = ($scope.productType == $scope.pTypeValue.Manufactured) ? true : false;
                var rights = $scope.rights = {};
                $scope.pricebookDetail = [];
                $scope.product = {};
                $scope.actionProduct = "";
                rights.editOnHand = $scope._p.has('StockTake_Create');
                rights.viewCost = $scope._p.has('Product_Cost');
                $scope.Reset = function () {
                    $scope.product = { Id: 0, Code: "", Name: "", CategoryId: null, ProductType: $scope.pTypeValue.Purchased, BasePrice: 0, Description: "", MinQuantity: 0, MaxQuantity: 0, OnHand: 0, AllowsSale: true, HasVariants: false };
                };
                this.InitData = function (obj) {

                    $scope.saving = false;
                    $scope.appSetting = _settings;

                    $scope.pType = _productType;
                    $scope.showFomular = ($scope.productType == $scope.pTypeValue.Manufactured) ? true : false;
                    rights = $scope.rights = {};
                    $scope.pricebookDetail = [];
                    $scope.actionProduct = "";
                    rights.editOnHand = $scope._p.has('StockTake_Create');
                    rights.viewCost = $scope._p.has('Product_Cost');
                    $scope.validatorForm = {
                        messages: {
                            // overrides the built-in message for the required rule
                            required: "",
                        },
                        errorTemplate: ""
                    };

                    $scope.productId = obj.productId;
                    $scope.masterId = obj.masterId;
                    $scope.productType = obj.productType;
                    $scope.product.CategoryId = obj.categoryId ? obj.categoryId : $scope.product.CategoryId;
                    $scope.CategoryId = $scope.product.CategoryId;
                    $scope.pricebookDetail = [];
                    $scope.product = {};
                    $scope.actionProduct = "";
                    $scope.generateUUID = function () {
                        var d = new Date().getTime();
                        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = (d + Math.random() * 16) % 16 | 0;
                            d = Math.floor(d / 16);
                            return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
                        });
                        return uuid;
                    };
                    $scope.childScopeUpload.UploadError = null;
                    $scope.sessionUpload = '';
                    $scope.product.ProductAttributes = new Array();
                    if ($scope.productId <= 0 || $scope.productId == "" || $scope.productId == "undefined")
                        $scope.refreshCategory();
                    var r = _product.initialdata({ productId: $scope.productId, Includes: "ProductAttributes", masterId: $scope.masterId, ProductType: $scope.productType });
                    r.$promise.then(function (resultProduct) {
                        $scope.product = resultProduct.Product;
                        if ($scope.CategoryId && !$scope.product.CategoryId) {
                            $scope.product.CategoryId = parseInt($scope.CategoryId);
                        }

                        if ($scope.product.ProductFormulas && $scope.product.ProductFormulas.length > 0) {
                            $scope.showFomular = true;
                        }
                        $scope.product.Cost = parseInt($scope.product.Cost);
                        $scope.product.BasePrice = parseInt($scope.product.BasePrice);
                        $scope.product.OnHand = $scope.product.OnHand === null ? 0 : $scope.product.OnHand;
                        if (resultProduct.Product.Id > 0) {

                            $scope.actionProduct = $scope._l.product_EditText;
                            $scope.sessionUpload = '';
                        } else {
                            $scope.actionProduct = $scope._l.product_AddText;
                            $scope.sessionUpload = $scope.generateUUID();                            
                        }
                        //$scope.product.Description = $("<div/>").html($scope.product.Description).text();
                        var itemId = $scope.productId == "0" ? $scope.masterId : $scope.productId;
                        $rootScope.$broadcast('changeImageDataSource', itemId);

                    }, function (err) {
                        //   $location.url("/" + viewUrl.productList);                          
                        _logger.error(getMessage(err));
                        execCb($scope.listeners.onCancel);
                    });
                }

                $scope.dropdownlistcat = {
                    dataSource: new kendo.data.DataSource({
                        type: "odata",
                        //autoSync: true,
                        transport: {
                            read: {
                                url: "/api/hierarchycategory?IncludeSelect=false",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",

                        }
                    }),
                    dataTextField: "Name",
                    dataValueField: "Id",
                    valuePrimitive: true,
                    dataBound: function (e) {
                        if ($scope.product.CategoryId)
                            this.value($scope.product.CategoryId);
                        else {
                            this.select(0);
                            $scope.product.CategoryId = this.value();
                        }
                    }
                }
                $scope.attributesData = new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/attributes?ShowAddNew=true",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    }
                });
                $scope.optionAttributes = {
                    dataSource: $scope.attributesData,
                    dataTextField: "Name",
                    dataValueField: "Id",
                    optionLabel: {
                        Name: $scope._l.product_ChooseAttribute,
                        Id: -9999
                    },
                    dataBound: function (e) {
                        //e.sender.trigger("change");
                    }
                };
                $scope.attributeAutoComplete = {
                    dataSource: new kendo.data.DataSource({
                        type: "odata",
                        serverFiltering: true,
                        transport: {
                            read: {
                                url: "/api/attributes/suggest?format=json",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total"
                        },
                        filter: null
                    }),
                    ignoreCase: false,
                    dataTextField: "Value",
                    dataValueField: "Value",
                    filter: "contains",
                    minLength: 1

                };
                $scope.changeAttributeFilter = function (attId) {
                    if (attId == null || attId == 0 || attId == -9999) {
                        $scope.attributeAutoComplete.dataSource.filter(null);
                    } else {
                        $scope.attributeAutoComplete.dataSource.filter({
                            logic: "or",
                            filters: [{
                                field: "AttributeId",
                                operator: "eq",
                                value: parseInt(attId)
                            }]
                        });
                    }
                }
                $scope.attributeChange = function (e, index) {

                    var dataItem = e.sender.dataItem(e.sender.selectedIndex);


                    if (dataItem.Id != -9999 && dataItem.Id == 0) {
                        var attITem = { Id: 0, Name: "" };
                        $scope.openEditAttribute(attITem, index)
                    }
                    if (dataItem.Id != -9999 && dataItem.Id != 0) {


                        angular.forEach($scope.product.ProductAttributes, function (val, idx) {
                            if (idx != index) {
                                if (val.AttributeId == dataItem.Id) {
                                    _logger.error($scope._l.product_ErrorAttribute);
                                    $scope.product.ProductAttributes.splice(index, 1);
                                    return;
                                }
                            }
                        });
                    }
                }
                $scope.ChangeAttributeSelected = function (attId, index) {
                    $scope.optionAttributes.dataSource.read();
                    if (attId == 0 || attId == -9999)
                        $scope.product.ProductAttributes.splice(index, 1);
                    else
                        $scope.product.ProductAttributes[index].AttributeId = attId;

                    refresh($scope);
                };
                $scope.editAttribute = function (objItem, index) {
                    var attITem = { Id: objItem.AttributeId };
                    $scope.openEditAttribute(attITem, index)
                }
                $scope.openEditAttribute = function (objItem, index) {
                    $scope.attributeForm.openWindow(objItem, index);
                };

                $scope.addMoreAttributes = function () {
                    if (typeof ($scope.product.ProductAttributes) == "undefined") {
                        $scope.product.ProductAttributes = new Array();
                    }
                    $scope.product.ProductAttributes.push({ AttributeId: -9999, ProductId: $scope.product.Id, Value: '' });
                };
                $scope.deleteAttribute = function (index) {
                    if ($scope.product.Id == 0) {
                        $scope.product.ProductAttributes.splice(index, 1);
                    } else {
                        _msgbox.confirm($scope._l.product_AcceptAttribute, $scope._l.product_MsgDelAttributeTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        _msgbox.onConfirm = function () {
                            $scope.product.ProductAttributes.splice(index, 1);
                            refresh($scope);
                        }
                    }

                }
                $scope.activeVariant = function () {
                    if (typeof ($scope.product.ProductAttributes) == "undefined") {
                        $scope.product.ProductAttributes = new Array();
                    }
                    if ($scope.product.HasVariants && $scope.product.ProductAttributes.length == 0) {
                        $scope.product.ProductAttributes.push({ AttributeId: -9999, ProductId: $scope.product.Id, Value: '' });
                    } else {
                        if ($scope.product.Id == 0) {
                            $scope.product.ProductAttributes = new Array();
                        }
                    }
                };

                $scope.SaveProduct = function (skipAdd, addWithVariant) {
                    //console.log($scope.product.ProductAttributes);
                    var checkVarian = false;
                    if ($scope.productForm.$valid) {

                        if ($scope.product.CategoryId == undefined || typeof ($scope.product.CategoryId) == 'undefined' || $scope.product.CategoryId == '' || $scope.product.CategoryId == 0) {
                            _logger.error($scope._l.product_ChooseGroup);
                            return;
                        }
                        if (typeof ($scope.product.ProductAttributes) != "undefined" && $scope.product.ProductAttributes.length > 0) {
                            angular.forEach($scope.product.ProductAttributes, function (val, idx) {
                                if (val.AttributeId == "" || val.AttributeId == 0 || val.AttributeId == -9999) {
                                    checkVarian = true;
                                    return;
                                }
                            });
                        }
                        if (checkVarian) {
                            _logger.error($scope._l.product_ErrorChooseAttribute);
                            return true;
                        }
                        if (typeof ($scope.product.ProductUnits) == "undefined" || $scope.product.ProductUnits == null) {
                            $scope.product.ProductUnits = [];
                        }
                        if ($scope.product.ProductType == $scope.pTypeValue.Manufactured &&
                            (typeof ($scope.product.ProductFormulas) == "undefined" || $scope.product.ProductFormulas == null || $scope.product.ProductFormulas.length <= 0)) {
                            _logger.error($scope._l.product_ErrorMissProductFormulas);
                            return true;
                        }
                        // Delete Formulas incase Choose Serial Product
                        if ($scope.product.IsLotSerialControl) {
                            $scope.product.ProductFormulas = [];
                        }
                        if (typeof ($scope.product.ProductFormulas) != "undefined" && $scope.product.ProductFormulas != null) {
                            var fmlmsg = '';
                            angular.forEach($scope.product.ProductFormulas, function (val, idx) {
                                if (val.Quantity <= 0) {
                                    fmlmsg = "Số lượng thành phần " + val.MaterialName + " , phải >0";
                                    return;
                                }
                            });
                            if (fmlmsg) {
                                _logger.error(fmlmsg);
                                return true;
                            }
                        }
                        if ($scope.product.ProductUnits.length > 0 && !$scope.product.Unit) {
                            _logger.error($scope._l.product_MsgInputUnit);
                            return true;
                        }

                        if (/^[a-zA-Z0-9-]*$/.test($scope.product.Code) == false) {
                            _msgbox.confirm($scope._l.productCodeHasSpecialChars, $scope._l.product_Code, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                            _msgbox.onConfirm = function () {
                                save(skipAdd, addWithVariant);
                            }
                        }
                        else {
                            save(skipAdd, addWithVariant);
                        }                                                
                    } else {
                        _logger.error($scope._m.globalValidateSummary);
                    }
                };
                function save(skipAdd, addWithVariant) {
                    if (!$scope.saving) {
                        $("#LoadingPanel").show();
                        $scope.saving = true;
                        var r = _product.save({ Product: $scope.product, SessionUpload: $scope.sessionUpload, ListPriceBookDetail: $scope.pricebookDetail });
                        r.$promise.then(function (result) {
                            $("#LoadingPanel").hide();
                            _logger.success(result.Message);
                            if (skipAdd) {
                                if (addWithVariant) {
                                    if (result.Data.MasterProductId != null && result.Data.MasterProductId != 0) {
                                        // $location.url("/" + viewUrl.productList + "/0?masterid=" + result.Data.MasterProductId);
                                        //$route.reload();
                                        if ($scope.listeners.onSaveAndContineWithVariant) {
                                            execCb($scope.listeners.onSaveAndContineWithVariant, result.Data);
                                        }
                                    } else {
                                        if ($scope.listeners.onSaveAndContineWithChildren) {
                                            execCb($scope.listeners.onSaveAndContineWithChildren, result.Data);
                                        }
                                        //$location.url("/" + viewUrl.productList + "/0?masterid=" + result.Data.Id);
                                        //$route.reload();
                                    }

                                } else {
                                    if ($scope.listeners.onSaveWithProductType) {
                                        execCb($scope.listeners.onSaveWithProductType, result.Data);
                                    }
                                    //$location.url("/" + viewUrl.productList + "/0?Type=" + $scope.product.ProductType);
                                    //if ($routeParams.Type)
                                    //  $route.reload();
                                }
                            } else {
                                //  $location.url("/" + viewUrl.productList);
                                if ($scope.listeners.onSave) {
                                    execCb($scope.listeners.onSave);
                                }
                            }
                        }, function (err) {
                            $scope.saving = false;
                            $("#LoadingPanel").hide();
                            _logger.error(getMessage(err));
                        });
                    }
                }
                $scope.SaveAndContinue = function () {
                    $scope.SaveProduct(true, false);
                };
                $scope.SaveAndContinueWithVariant = function () {
                    $scope.SaveProduct(true, true);
                };
                $scope.EditCategory = function (event) {
                    $scope.categoryForm.openWindow(this.dataItem);
                }
                $scope.refreshCategory = function (dataReturn) {
                    $scope.product.CategoryId = dataReturn;
                    $scope.dropdownlistcat.dataSource.read();
                };
                $scope.onCancel = function () {
                    execCb($scope.listeners.onCancel);
                };
                $scope.formulaQuantity = 0;
                $scope.addFormulaSelectedProduct = function (data) {
                    //console.log(data);
                    if (typeof (data.MasterUnitId) == "undefined" || data.MasterUnitId == null) {
                        $scope.formulaSelectedProduct = data;
                        $("#qFormula").focus();
                    } else {
                        _logger.error($scope._l.product_MsgFormulaUnit);
                    }


                };
                $scope.removeFormulaSelectedProduct = function (id) {
                    $scope.formulaSelectedProduct = null;
                };
                $scope.removeFormulaItem = function (index) {
                    if ($scope.product.Id == 0) {
                        $scope.product.ProductFormulas.splice(index, 1);
                    } else {
                        _msgbox.confirm($scope._l.product_MsgDelQuantitative, $scope._l.product_MsgDelQuantitativeTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        _msgbox.onConfirm = function () {
                            $scope.product.ProductFormulas.splice(index, 1);
                            refresh($scope);
                        }
                    }
                }
                $scope.addFormula = function () {
                    if ($scope.formulaSelectedProduct == null) {
                        _logger.error($scope._l.product_ErrorChooseRawMaterial);
                        $("#productSearchInput").focus();
                        return;
                    }
                    if ($scope.formulaQuantity <= 0) {
                        _logger.error($scope._l.product_ErrorAddQtyRawMaterial);
                        $("#qFormula").focus();
                        return;
                    }
                    if ($scope.product.ProductType === 1 && $scope.formulaSelectedProduct.ProductType === 1) {
                        _logger.error($scope._l.product_ErrorAddComboInCombo);
                        $("#qFormula").focus();
                        return;
                    }
                    if (typeof ($scope.product.ProductFormulas) == "undefined" || $scope.product.ProductFormulas == null) {
                        $scope.product.ProductFormulas = [];
                    }
                    var existing = false;
                    angular.forEach($scope.product.ProductFormulas, function (vl, idx) {
                        if ($scope.formulaSelectedProduct.Id === vl.MaterialId) {
                            existing = true;
                            return;
                        }
                    });
                    if (existing) {
                        $scope.formulaSelectedProduct = null;
                        $scope.formulaQuantity = 0;
                        $("#productSearchInput").focus();
                        _logger.error($scope._l.product_ErrorQuantitative);
                        return;
                    }
                    $scope.product.ProductFormulas.unshift({ MaterialId: $scope.formulaSelectedProduct.Id, MaterialName: $scope.formulaSelectedProduct.Name, MaterialCode: $scope.formulaSelectedProduct.Code, Quantity: $scope.formulaQuantity, Cost: $scope.formulaSelectedProduct.Cost });
                    $scope.formulaSelectedProduct = null;
                    $scope.formulaQuantity = 0;
                    $("#productSearchInput").focus();
                };
                $scope.getSumCode = function () {
                    var _total = 0;
                    if (typeof ($scope.product.ProductFormulas) == "undefined" || $scope.product.ProductFormulas == null) {
                        $scope.product.ProductFormulas = [];
                    }
                    angular.forEach($scope.product.ProductFormulas, function (vl, idx) {
                        _total = _total + vl.Quantity * vl.Cost;
                    });
                    return _total;
                }
                $scope.addMoreUnit = function () {
                    if (!$scope.product.Unit) {
                        _logger.error($scope._l.product_MsgNotInputUnit);
                        return;
                    }
                    if (typeof ($scope.product.ProductUnits) == "undefined" || $scope.product.ProductUnits == null) {
                        $scope.product.ProductUnits = [];
                    }
                    $scope.product.ProductUnits.unshift({ Id: 0, Unit: '', Code: '', ConversionValue: 1, BasePrice: 0 });
                };
                $scope.removeUnitItem = function (index) {
                    if ($scope.product.Id == 0 || $scope.product.ProductUnits[index].Id == 0) {
                        $scope.product.ProductUnits.splice(index, 1);
                    } else {
                        _msgbox.confirm($scope._l.product_MsgDelUnit, $scope._l.product_MsgDelUnitTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        _msgbox.onConfirm = function () {
                            var r = _product.delete({ productId: $scope.product.ProductUnits[index].Id });
                            r.$promise.then(function (result) {

                                _logger.success(result.Message);
                                $scope.product.ProductUnits.splice(index, 1);
                                refresh($scope);
                            }, function (err) {
                                _logger.error(getMessage(err));

                            });

                        }
                    }
                }
                $scope.CalcChildUnitPrice = function (item) {
                    item.BasePrice = parseFloat((item.ConversionValue * $scope.product.BasePrice).toFixed(0));
                }
                $scope.addPricebook = function () {
                    $scope.productPricebookPopup.openWindow($scope.product.Id, $scope.pricebookDetail, function (listPricebook) {
                        $scope.pricebookDetail = listPricebook;
                    });
                };

                this.setListeners = function (listener) {
                    $scope.listeners = listener;
                }
                this.clearListener = function () {
                    $scope.listeners = {};
                }

                if (!$scope.$parent[$scope.formName]) {
                    $scope.$parent[$scope.formName] = this;
                }

            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    ctrl.clearListener();
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('product-addnew.html')
        }
    }])
    .controller('UpdateProductCtrl', ['settings', 'kvSession', '$scope', '$rootScope', '$location', '$routeParams', 'logger', 'ProductResource', '$route', 'kvConfirmBox', 'productTypeValue', 'productType',
    function (_settings, _session, $scope, $rootScope, $location, $routeParams, _logger, _product, $route, _msgbox, _productTypeValue, _productType) {
        $scope.kvonClose = function (e) {
            if ($scope.productForm) {
                $scope.productForm.clearListener();
            }
        };
        $scope.popup = {};        
        var openWindow = function () {
            $scope.productWindow.wrapper.find(".k-upload-files").remove();
            $scope.productWindow.wrapper.find(".addMoreMain .fa").removeClass('fa-minus-square').addClass('fa-plus-square');
            $scope.productWindow.wrapper.find(".addMoreBox").addClass('ovh').css('height', 0);
            var listeners = {
                //onSaveAndContineWithVariant
                onSaveAndContineWithVariant: function (product) {
                    $scope.popup = {};
                    // $scope.popup.productType = product.ProductType;
                    $scope.popup.productId = 0;
                    $scope.popup.masterId = product.MasterProductId;
                    $scope.popup.categoryId = product.CategoryId;
                    $scope.productForm.InitData($scope.popup);
                    $scope.products.dataSource.read();
                },
                onSaveAndContineWithChildren: function (product) {
                    $scope.popup = {};
                    // $scope.popup.productType = product.ProductType;
                    $scope.popup.productId = 0;
                    $scope.popup.masterId = product.Id;
                    $scope.popup.categoryId = product.CategoryId;
                    $scope.productForm.InitData($scope.popup);
                    $scope.products.dataSource.read();
                },
                onSaveWithProductType: function (product) {
                    $scope.popup = {};
                    $scope.popup.productType = product.ProductType;
                    $scope.popup.productId = 0;
                    $scope.popup.masterId = 0;
                    $scope.popup.categoryId = product.CategoryId;
                    $scope.productForm.InitData($scope.popup);
                    $scope.products.dataSource.read();
                },
                onSave: function () {
                    //_logger.success(msg);
                    $scope.productWindow.close();
                    $scope.products.dataSource.read();
                },
                onSaveError: function (err) {
                    _logger.error(err);
                },
                onCancel: function (msg) {
                    $scope.productWindow.close();
                },
            };
            $scope.productWindow.title($scope.popup.productId > 0 ? $scope._l.product_EditText : $scope._l.product_AddText);
            $scope.productForm.setListeners(listeners);
            $scope.productForm.InitData($scope.popup);
            $scope.productWindow.wrapper.addClass("k-window-fix k-window-poup k-window-addProduct");
            $scope.productWindow.center().open();
            refresh($scope);
        }

        $scope.$on(app.events.showEditProductForm, function (evt, product) {
            $scope.popup = {};
            $scope.popup.productId = product.Id;
            openWindow();

        });
        $scope.$on(app.events.showAddProductFormRelate, function (evt, masterId) {
            $scope.popup = {};
            $scope.popup.productId = 0;
            $scope.popup.masterId = masterId;
            $scope.popup.categoryId = $scope.selectedCategory;
            openWindow();

        });
        $scope.$on(app.events.showAddProductForm, function (evt, productType) {
            $scope.popup = {};
            $scope.popup.productType = productType;
            $scope.popup.productId = 0;
            $scope.popup.masterId = 0;
            $scope.popup.categoryId = $scope.selectedCategory;
            openWindow();

        });

    }])
.controller('ProductFormulaAutoCompleteCtrl', ['$scope', 'ProductResource', 'logger', function ($scope, _product, _logger) {
    //re #784
    function search(query) {
        var r = _product.manufacturingautocomplete({ tearm: query });
        r.$promise.then(function (result) {
            //console.log(result);
            $scope.products = result.filter(function (p) { return !p.IsLotSerialControl });
            refresh($scope);

        }, function (err) {

        });

    }
    $scope.searchTermChanged = function () {
        search($scope.productSearchTerm);
    };
}])
.controller('ProductCtrl', ['$timeout', 'settings', 'kvSession', '$scope', '$rootScope', '$location', 'kendofilter', '$filter', '$routeParams', 'logger', 'CategoryResource', 'ProductResource', 'kvConfirmBox', '$route', 'documentType', 'AttributeResource', 'BranchResource', 'documentTypeValue', 'productType', 'productTypeValue', 'kvExportToExcel',
    function ($timeout, _settings, _session, $scope, $rootScope, $location, _filter, $filter, $routeParams, _logger, _category, _product, _msgbox, $route, _documentType, _attribute, _branches, _documentTypeValue, _productType, _productTypeValue, _export) {

        $scope.appSetting = _settings;
        $scope.pType = _productType;
        $scope.pTypeValue = _productTypeValue;
        //$scope.pTypeFilterValues = {};
        $scope.filter = { pTypeFilterValues: {} };
        $scope.rights = {};
        $scope.rights.editOnHand = $scope._p.has('StockTake_Create');
        $scope.rights.viewCost = $scope._p.has('Product_Cost');
        //$rootScope.viewimage = 'Content/img/default-product.png';
        $scope.selectedCategory = 0;
        $scope.onhandFilter = 0;
        $scope.selectedCategoryIds = [];
        $routeParams.Code = $routeParams.Code ? $routeParams.Code : $routeParams.code;
        $scope.filter.keywordParam = $routeParams.Code;
        $scope.pageSizes = pager.pageSizes;
        $scope.typeList = viewUrl.productList;
        $scope.typeEmail = viewUrl.orderEmail;
        $scope.AttributeFilter = [];
        $scope.ShowInActiveProduct = 3;
        $scope.totalOnHand = 0;
        $scope.branches = _branches.get({ Permission: 'Product_Read' });

        $scope.AttributeFilterList = [];
        $scope.FullAttributeFilterList = new Array();

        $scope.tblAttributeOptions = {
            autoBind: false,
            columns: [{
                field: "Code",
                title: $scope._l.product_Code,
                attributes: { "class": "tdCode tdMobile txtL" },
                headerAttributes: { "class": "tdCode txtL" },
                template: '<a href="javascript:void(0)" data="#=Code#" class="subProductCode">#=Code#</a>'
            },
            {
                field: "Name",
                title: $scope._l.product_Name,
                attributes: { "class": "txtL" },
                headerAttributes: { "class": "txtL" }
            },
            {
                field: "BasePrice",
                title: $scope._l.product_PriceSale,
                format: "{0:n0}",
                attributes: { "class": "tdTime txtR" },
                headerAttributes: { "class": "tdTime txtR" }
            },
             {
                 field: "Cost",
                 title: $scope._l.product_PriceCost,
                 format: "{0:n0}",
                 attributes: { "class": "tdTime tdMobile txtR" },
                 headerAttributes: { "class": "tdTime tdMobile txtR" },
                 template: '{{dataItem.MasterUnitId==null?( dataItem.Cost| balSheetFormat: 0):"---"}}',
                 hidden: !$scope.rights.viewCost
             },
            {
                field: "OnHand",
                title: $scope._l.product_OnHand,
                attributes: { "class": "tdSLB txtR" },
                format: "{0:#,#.###}",
                headerAttributes: { "class": "tdSLB txtR" }
            },
           {
               field: "Reserved",
               title: $scope._l.product_Reserved,
               attributes: { "class": "tdTime tdMobile txtR" },
               format: "{0:#,#.###}",
               headerAttributes: { "class": "tdTime tdMobile txtR" }
           }],
            dataBound: function (e) {
                $scope.emptyGridFix(e);
                //var html = $scope._l.product_TotalSubOnHand + " " + $filter("number")($scope.totalSubOnHand);
                //var header = e.sender.header;
                //if (header) {
                //    header.find("table").remove();
                //    header.html(html).addClass("headRow");
                //}
                this.wrapper.find("a.subProductCode").click(function () {
                    var $ele = $(this);
                    var pCode = $ele.attr("data");
                    //$scope.dontShowVariant = false;
                    $scope.filter.keywordParam = pCode;
                    refresh($scope);
                    $scope.filterbyKeyword();
                });
            },
        };

        $scope.exportSerial = function () {
            var id = $scope.listRelateSelectedProduct; // $scope.currentProductId
            var type = "ProductSerials";
            var fileName = "DanhSachSerial_" + id;
            var data = { req: id };
            if (id)
                _export.toExcel(type, fileName, data);
        };
        $scope.exportInventory = function () {
            var id = $scope.listRelateSelectedProduct; // $scope.currentProductId
            var type = "ProductInventory";
            var fileName = "DanhSachTheKho_" + id;
            var data = { req: id };
            if (id)
                _export.toExcel(type, fileName, data);
        };
        
        $scope.loadVariant = function (filter, firstLoad) {
            var r = _attribute.allwithdistinctvalue({ CategoryId: $scope.selectedCategory }, function (result) {

                $scope.attributeList = result;

                // apply new attribute filter for new category
                $scope.AttributeFilterList = getAttributeFilterByCategory();

                if (filter && typeof (filter) != "string") {
                    _filter.addfilter($scope.products.dataSource, filter);
                } else if (filter == "remove") {
                    _filter.remove($scope.products.dataSource, "CategoryId");
                } else if(!firstLoad) {
                    $scope.products.dataSource.read();
                }
            }, function (err) {
                _logger.error(getMessage(err));

            });
        };
        $scope.loadVariant(null, true);

        $scope.AddProduct = function (type) {
            $scope.$broadcast(app.events.showAddProductForm, type);

        }

        if ($("#rowTemplate").html()) {
            $scope.template = $("#rowTemplate").html();
            $scope.pageSize = pager.defaultEmail;
            // $scope.viewtype = $scope.typeEmail;
        } else {
            $scope.pageSize = pager.defaultList;
            //  $scope.viewtype = $scope.typeList;
        }
        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }
        $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;

        $scope.filterByAttributes = function (e, attId) {
            for (var i = 0; i < $scope.AttributeFilterList.length; i++) {
                if ($scope.AttributeFilterList[i].Id == attId) {
                    $scope.AttributeFilterList.splice(i, 1);
                    break;
                }
            }
            if (e.sender._old !== '') {
                $scope.AttributeFilterList.push({ Id: attId, Name: e.sender._old })
            }

            // save attribute values
            saveAttributeValues(e, attId);

            $scope.RefreshGrid();
        };

        // for attribute filters by category
        var getAttributeFilterByCategory = function () {

            var newAttrList = $scope.attributeList;
            var newAttrFilter = [];

            for (var j = 0; j < newAttrList.length; j++) {
                //console.log($scope.FullAttributeFilterList[newAttrList[j].Id]);
                if ($scope.FullAttributeFilterList[newAttrList[j].Id]) {
                    newAttrFilter.push({ Id: newAttrList[j].Id, Name: $scope.FullAttributeFilterList[newAttrList[j].Id] })
                }
            }

            return newAttrFilter;
        }

        var saveAttributeValues = function (e, attId) {

            if (e.sender._selectedValue != '') {
                $scope.FullAttributeFilterList[attId] = e.sender._selectedValue;
            } else {
                delete $scope.FullAttributeFilterList[attId];
            }
        }

        $scope.$on('onRepeatLast', function (scope, element, attrs) {
            setAttributeValues();
        });

        var setAttributeValues = function () {
            var dropdownlist;
            for (var i = 0; i < $scope.attributeList.length; i++) {
                dropdownlist = $("#ddl" + $scope.attributeList[i].Id).data("kendoDropDownList");

                if (dropdownlist) {
                    dropdownlist.select(function (dataItem) {
                        return dataItem.Value === $scope.FullAttributeFilterList[$scope.attributeList[i].Id];
                    });
                }
            }
        }
        // End

        var getAdditionalParam = function () {

            var param = {};
            param.CategoryId = $scope.selectedCategory;
            param.AttributeFilter = JSON.stringify($scope.AttributeFilterList);
            if ($scope.filterSerialKey)
                param.SerialKey = $scope.filterSerialKey;

            return param;
        };
        $scope.showDocumentDetail = function (data, selectedProduct) {
            if (data.type === _documentTypeValue.Invoice || data.type === _documentTypeValue.Produce) {
                $scope.invoicePopup.showInvoice(data.id, selectedProduct);
            }
            else if (data.type == _documentTypeValue.Manufacturing || data.type == _documentTypeValue.ManufacturingMaterial) {
                $scope.manufacturingPopup.showManufacturing(data.id, selectedProduct);
            }
            else if (data.type === _documentTypeValue.StockTake) {
                $scope.stocktakePopup.showStockTake(data.id, selectedProduct);
            }
            else if (data.type === _documentTypeValue.Refund || data.type === _documentTypeValue.RefundProduce) {
                $scope.returnPopup.showReturn(data.id, selectedProduct);
            }
            else if (data.type === _documentTypeValue.PurchaseReturn || data.type === _documentTypeValue.RefundProduce) {
                $scope.purchaseReturnPopup.showReturn(data.id, selectedProduct);

            }
            else if (data.type === _documentTypeValue.PurchaseInvoice) {
                $scope.purchasePopup.showInvoice(data.id, selectedProduct);
            }
            else if (data.type === _documentTypeValue.Tranfer || data.type === _documentTypeValue.Receive) {
                $scope.transferPopup.showPopup(data.id, selectedProduct);
            }
            else if (data.type === _documentTypeValue.DamageItem) {
                $scope.damageItemPopup.showInvoice(data.id, selectedProduct);
            }
            else if (data.type === _documentTypeValue.ChangeCost) {
                //nothing
            }
            else {
                _logger.error($scope._l.product_ErrorViewVouchers);
            }
        }
        $scope.initDetailFilter = function (condition) {
            var filter = [];
            _filter.append(filter, [condition], 'and');
            return filter;
        }
        $scope.initVariantFilter = function (variantId, masterId) {
            var condition = [], filter = [];
            condition.push(_filter.newCondition("MasterProductId", variantId, "eq"));
            condition.push(_filter.newCondition("MasterProductId", masterId, "eq"));
            condition.push(_filter.newCondition("Id", masterId, "eq"));
            condition.push(_filter.newCondition("Id", variantId, "eq"));
            filter = _filter.append(filter, condition, "or");

            return filter;
        }
        $scope.detailProductInit = function (e) {
            var inventorydb = null;
            var variantdb = null;
            var formuladb = null;
            var serialdb = null;
            var detailRow = e.detailRow;
            var currentDetailId = (typeof (e.data.MasterUnitId) != "undefined" && e.data.MasterUnitId != null && e.data.MasterUnitId > 0 ? e.data.MasterUnitId : e.data.Id);            
            //console.log(detailRow);
            var hiddenCost = !$scope.rights.viewCost;
            detailRow.find(".tabstrip").kendoTabStrip({
                animation: {
                    open: { effects: "fadeIn" }
                },
                activate: function (tabevent) {
                    if (tabevent.item.id == "tabInventory") {                       
                        if (inventorydb == null) {
                            inventorydb = new kendo.data.DataSource(
                            {
                                type: "odata",
                                autoSync: true,
                                transport: {
                                    read: {
                                        url: "/api/products/" + currentDetailId + "/history?format=json",
                                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                                    }
                                },
                                serverFiltering: true,
                                serverSorting: true,
                                pageSize: pager.defaultList,
                                serverPaging: true,
                                filter: $scope.initDetailFilter(_filter.newCondition('BranchId', $scope.currentBranch.Id, "eq")),
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    model: {
                                        fields: {
                                            TransDate: { type: "date" },

                                        }
                                    },
                                    parse: function (response) {
                                        if (response && response.Data) {
                                            for (var j = 0; j < response.Data.length; j++) {
                                                var t = response.Data[j];
                                                t.DocumentTypeId = t.DocumentType;
                                                t.DocumentType = _documentType[t.DocumentType];
                                                //t.Quantity = (t.Quantity ? "+" : "") + kendo.toString(t.Quantity, "#,#.###");
                                            }
                                        }

                                        return response;
                                    }
                                }
                            });                            
                            var isHidden = (e.data.ProductType != 2);

                            detailRow.find("#tblInvenroty").kendoGrid({
                                dataSource: inventorydb,
                                pageable: { "pageSize": 10, "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": $scope._l.pagerInfo + $scope._l.invenroty_Text } },
                                dataBinding: $scope.emptyGridFix,
                                dataBound: function () {
                                    var scope = angular.element(this.wrapper).scope();
                                    this.wrapper.find("a.documentCode").click(function () {
                                        scope.showDocumentDetail($(this).data(), $scope.listRelateSelectedProduct);
                                        refresh($scope);
                                    });
                                },
                                columns: [
                                    { field: "DocumentCode", title: $scope._l.product_Vouchers, template: '<a href="javascript:void(0)" class="documentCode" kv-btn-scroll data-id="#=DocumentId#" data-code="#=DocumentCode#" data-type="#=DocumentTypeId#">#=DocumentCode#</a>', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                                    { field: "DocumentType", title: $scope._l.product_mothed, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                                    { field: "TransDate", title: $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                                    { field: "Cost", hidden: hiddenCost, title: $scope._l.product_PriceCost, format: "{0:n0}", headerAttributes: { "class": "txtR tdTotal" }, attributes: { "class": "txtR tdTotal" } },
                                    { field: "Quantity", title: $scope._l.product_Qty, headerAttributes: { "class": "tdSLB txtR" }, template: "#: kendo.toString(Quantity, Quantity % 1 === 0 ? 'n0' : 'n3' ) #", attributes: { "class": "tdSLB txtR" } },
                                    { field: "EndingStocks", hidden: isHidden, title: $scope._l.product_LastSurvive, template: "#: kendo.toString(EndingStocks, EndingStocks % 1 === 0 ? 'n0' : 'n3' ) #", headerAttributes: { "class": "tdTotal txtR" }, attributes: { "class": "tdTotal txtR" } }

                                ]                                
                            });
                        }
                    }
                    else if (tabevent.item.id == "tabOnHand") {
                        var dbOnHand = [];
                        var sumH = 0, sumR = 0;
                        var r = _product.onhandbybranch({ productId: e.data.Id });
                        r.$promise.then(function (result) {

                            angular.forEach($scope.branches.Data, function (value, key) {

                                var objOnHand = { Name: value.Name, OnHand: 0, Reserved: 0 };
                                $.map(result.Data, function (val) {
                                    if (val.BranchId == value.Id) {
                                        objOnHand.OnHand = val.OnHand;
                                        objOnHand.Reserved = val.Reserved;
                                    }
                                });
                                dbOnHand.push(objOnHand);
                                sumH = sumH + objOnHand.OnHand;
                                sumR = sumR + objOnHand.Reserved;
                            });
                            // detailRow.find("#tblSumOnHand").html(kendo.toString(sumH, "n2"));
                            //detailRow.find("#tblSumReserved").html(kendo.toString(sumR, "n2"));

                            detailRow.find("#tblOnHand").kendoGrid({
                                dataSource: {
                                    data: dbOnHand,
                                    schema: {
                                        parse: function (response) {
                                            if (response) {
                                                this.totalValue = kendo.toString(sumH, "#,#.###") + "<span class='dpib reservedTotal'>" + kendo.toString(sumR, "#,#.###") + "</span>";
                                            }
                                            return response;
                                        }
                                    },
                                    pageSize: pager.defaultList,
                                },
                                pageable: { "pageSize": 10, "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": $scope._l.pagerInfo + $scope._l.product_onHandPaging } },
                                sortable: true,

                                dataBinding: $scope.emptyGridFix,
                                dataBound: function () {
                                },
                                columns: [
                                    { field: "Name", title: $scope._l.product_Branch, headerAttributes: { "class": "" }, attributes: { "class": "" } },
                                    { field: "OnHand", title: $scope._l.product_InStock, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
                                    { field: "Reserved", title: $scope._l.product_Order, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },

                                ]
                            });
                        }, function (err) {
                            _logger.error(getMessage(err));

                        });
                    }
                    else if (tabevent.item.id == "tabVariants") {
                        //console.log(variantdb);
                        if (variantdb == null) {
                            variantdb = new kendo.data.DataSource(
                             {
                                 type: "odata",
                                 autoSync: true,
                                 transport: {
                                     read: {
                                         url: "/api/branchs/" + _session.branch.id + "/products?format=json&Includes=ProductAttributes",
                                         dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                                     }
                                 },

                                 pageSize: $scope.defaultList,
                                 serverPaging: true,
                                 serverFiltering: true,
                                 serverSorting: true,
                                 filter: $scope.initVariantFilter((currentDetailId == null || currentDetailId == 0) ? -999999 : e.data.Id, (e.data.MasterProductId == null || e.data.MasterProductId == 0) ? -999999 : e.data.MasterProductId),//$scope.initDetailFilter(_filter.newCondition('MasterProductId', (e.data.Id == null || e.data.Id == 0) ? -999999 : e.data.Id, "eq")),
                                 schema: {
                                     data: "Data",
                                     total: "Total",
                                     model: {
                                         fields: {
                                             Code: { type: "string" },
                                             Name: { type: "string" }
                                         }
                                     },
                                     parse: function (response) {
                                         if (response) {
                                             this.totalValue = kendo.toString(response.TotalOnHand, "#,#.###") + "<span class='dpib reservedTotal'>&nbsp;</span>";

                                             if (response.Data && response.Data.length > 0 && response.Data[0].ProductType != $scope.pTypeValue.Purchased)
                                                 this.totalValue = "---" + "<span class='dpib reservedTotal'>&nbsp;</span>";
                                         }

                                         angular.forEach(response.Data, function (r) {
                                             r.OnHand = r.ProductType == $scope.pTypeValue.Purchased ? kendo.toString(r.OnHand, "#,#.###") : "---";
                                         });

                                         return response;
                                     }
                                 }
                             });

                            detailRow.find("#tblAttribute").data("kendoGrid").setDataSource(variantdb);
                            variantdb.read();
                        }
                    }
                    else if (tabevent.item.id == "tabFormula") {
                        if (formuladb == null) {
                            formuladb = new kendo.data.DataSource(
                            {
                                type: "odata",
                                autoSync: true,
                                transport: {
                                    read: {
                                        url: "/api/formula?format=json&Includes=Material",
                                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                                    }
                                },
                                serverFiltering: true,
                                serverSorting: true,
                                pageSize: pager.defaultList,
                                serverPaging: true,
                                filter: $scope.initDetailFilter(_filter.newCondition('ProductId', currentDetailId, "eq")),
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    model: {
                                        fields: {

                                        }
                                    },
                                }
                            });

                            detailRow.find("#tblFormula").kendoGrid({
                                dataSource: formuladb,
                                pageable: { "pageSize": 10, "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": $scope._l.pagerInfo } },
                                dataBinding: $scope.emptyGridFix,
                                dataBound: function (e) {
                                    $scope.emptyGridFix(e);
                                    this.wrapper.find("a.subProductCode").click(function () {
                                        var $ele = $(this);
                                        var pCode = $ele.attr("data");
                                        $scope.dontShowVariant = false;
                                        $scope.filter.keywordParam = pCode;
                                        refresh($scope);
                                        $scope.filterbyKeyword();
                                    });
                                },
                                columns: [
                                    {
                                        field: "Material.Code",
                                        title: $scope._l.product_Code,
                                        attributes: { "class": "tdCode txtL" },
                                        headerAttributes: { "class": "tdCode txtL" },
                                        template: '<a href="javascript:void(0)" data="#=Material.Code#" class="subProductCode">#=Material.Code#</a>'
                                    },
                                    {
                                        field: "MaterialName",
                                        title: $scope._l.product_NameRawMaterial,
                                        attributes: { "class": "txtL" },
                                        headerAttributes: { "class": "txtL" }
                                    },
                                                                {
                                                                    field: "Quantity",
                                                                    title: $scope._l.product_TextQuantity,
                                                                    attributes: { "class": "txtR" },
                                                                    width: 85,
                                                                    format: "{0:#,#.###}",
                                                                    headerAttributes: { "class": "txtR" },
                                                                },
                                ]
                            });
                        }
                    }
                    else if (tabevent.item.id == "tabSerialList") {
                        if (serialdb == null) {
                            serialdb = new kendo.data.DataSource(
                            {
                                type: "odata",
                                transport: {
                                    read: {
                                        url: "/api/products/" + currentDetailId + "/serials?format=json",
                                        dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                                    }
                                },
                                serverPaging: true,
                                serverFiltering: true,
                                filter: [],
                                schema: {
                                    model: {
                                        fields: {
                                            SerialNumber: { type: "string" }
                                        }
                                    },
                                    data: "Data",
                                    total: "Total",
                                    parse: function (response) {
                                        //console.log(response);
                                        angular.forEach(response.Data, function (r) {
                                            //console.log(r);                                            
                                            if (r.Status > 0) // -3 in pending invoice
                                                r.StatusText = $scope._l.serial_StatusOn;
                                            else
                                                r.StatusText = $scope._l.serial_StatusOff;
                                        });
                                        return response;
                                    }
                                },
                                pageSize: 10,
                            });


                            var grid = detailRow.find("#tblSerial").kendoGrid({
                                dataSource: serialdb,
                                dataBound: function (e) {
                                    $scope.emptyGridFix(e);
                                    if ($("#searchSerialInput"))
                                        $("#searchSerialInput").focus();
                                },
                                toolbar: kendo.template($("#toolbarTemplate").html()),
                                pageable: { "pageSize": 10, "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": $scope._l.pagerInfo + $scope._l.serial_imei } },
                                filterable: false,
                                columns: [
                                    {
                                        field: "SerialNumber", title: "Danh sách Serial/Imei",
                                        filterable: false,
                                        headerAttributes: { "class": "" }, attributes: { "class": "" },
                                        template: "<span class=\"serialNumb\">#= SerialNumber #</span>"
                                    },
                                    {
                                        field: "StatusText", title: $scope._l.status,
                                        headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" }
                                    },
                                ],

                            });

                            grid.find("#serialStatus").kendoDropDownList({
                                dataTextField: "text",
                                dataValueField: "value",
                                index: 1,
                                dataSource: [{ text: $scope._l.product_all, value: -1 }, { text: $scope._l.serial_StatusOn, value: 1 }, { text: $scope._l.serial_StatusOff, value: 0 }],
                                change: function () {
                                    var value = this.value();
                                    $scope.serialStatus = this.value();

                                    var condition=[], filter=[], flmain = [];
                                    if (value == 1) {
                                        // grid.data("kendoGrid").dataSource.filter({ field: "Status", operator: "eq", value: parseInt(value) });
                                        condition.push(_filter.newCondition("Status", 1, "eq"));
                                    }
                                    else if (value == 0) {
                                        //grid.data("kendoGrid").dataSource.filter({ field: "Status", operator: "lt", value: parseInt(1) });
                                        condition.push(_filter.newCondition("Status", 1, "neq"));
                                    } else {
                                        //grid.data("kendoGrid").dataSource.filter({});
                                    }

                                    if ($("#searchSerialInput") && $("#searchSerialInput").val())
                                        condition.push(_filter.newCondition("SerialNumber", $("#searchSerialInput").val(), "contains"));

                                    filter = _filter.append(filter, condition, "and");
                                    flmain.push(
                                    {
                                        "filters": filter
                                    });
                                    grid.data("kendoGrid").dataSource.filter(flmain);
                                },
                            });

                            //
                            var condition = [], filter = [], flmain = [];
                            condition.push(_filter.newCondition("Status", 1, "eq"));

                            filter = _filter.append(filter, condition, "or");
                            flmain.push(
                            {
                                "filters": filter
                            });
                            grid.data("kendoGrid").dataSource.filter(flmain);
                            //grid.data("kendoGrid").dataSource.filter({ field: "Status", operator: "eq", value: 1 });
                        }
                    }
                }
            });

        };        

        $scope.grvProductDetailExpand = function (e) {
            var currentProduct = e.detailRow.data().$scope.dataItem;                                    
            $scope.listRelateSelectedProduct = [];
            if (typeof (currentProduct.MasterUnitId) != "undefined" && currentProduct.MasterUnitId != null && currentProduct.MasterUnitId > 0) {
                $scope.listRelateSelectedProduct.push(currentProduct.MasterUnitId);
                var r = _branches.getProducts({ branchId: _session.branch.id, MasterProductId: currentProduct.MasterUnitId });
                r.$promise.then(function (data) {
                    if (data != null && data.Data.length > 0) {
                        for (var i = 0; i < data.Data.length; i++) {
                            $scope.listRelateSelectedProduct.push(data.Data[i].Id);
                        }
                    }
                });
            }
            else {                
                $scope.listRelateSelectedProduct.push(currentProduct.Id);
            }

            $scope.grvDetailExpand(e);
        }        

        var grdColumns = [
                {
                    field: "Code",
                    title: $scope._l.product_Code,
                    attributes: { "class": "tdCode" },
                    headerAttributes: { "class": "tdCode" }
                },
                {
                    field: "Name",
                    title: $scope._l.product_Name,
                    attributes: { "class": "tdMin" },
                    headerAttributes: { "class": "tdMin" }
                },
                 {
                     field: "CategoryName",
                     title: $scope._l.groupProduct,
                     attributes: { "class": "tdMin" },
                     headerAttributes: { "class": "tdMin" }, hidden: true
                 },
                  {
                      field: "ProType",
                      title: $scope._l.product_Category,
                      attributes: { "class": "tdMin" },
                      headerAttributes: { "class": "tdMin" }, hidden: true,
                      sortable: false
                  },
                {
                    field: "BasePrice",
                    title: $scope._l.product_PriceSale,
                    attributes: { "class": "tdTotal txtR" },
                    headerAttributes: { "class": "tdTotal txtR" },
                    template: '{{ dataItem.BasePrice| balSheetFormat: 0}}',
                    isNumber: true
                },
                {
                    field: "Cost",
                    title: $scope._l.product_PriceCost,
                    //format: "{{0:#,#.##;---}}",
                    template: '{{dataItem.MasterUnitId==null?( dataItem.Cost| balSheetFormat: 0):"---"}}',
                    attributes: { "class": "tdTotal txtR tdMobile" },
                    headerAttributes: { "class": "tdTotal txtR tdMobile" },
                    isNumber: true
                },
                {
                    field: "OnHand",
                    title: $scope._l.product_OnHand,
                    attributes: { "class": "tdTotal txtR" },
                    headerAttributes: { "class": "tdTotal txtR" },
                    //template: '{{}}',
                },
                {
                    field: "Reserved",
                    title: $scope._l.product_Reserved,
                    attributes: { "class": "tdTotal txtR" },
                    format: "{0:#,#.###}",
                    //template: '{{dataItem.Reserved| number: 2}}',
                    headerAttributes: { "class": "tdTotal txtR" }
                },
                {
                    field: "MinQuantity",
                    title: "Định mức tồn ít nhất",
                    attributes: { "class": "tdBranch txtR" },
                    headerAttributes: { "class": "tdBranch txtR" },
                    template: '{{dataItem.MasterUnitId==null?( dataItem.MinQuantity):"---"}}',
                    isNumber: true, hidden: true
                },
                {
                    field: "MaxQuantity",
                    title: "Định mức tồn nhiều nhất",
                    attributes: { "class": "tdBranch txtR" },
                    headerAttributes: { "class": "tdBranch txtR" },
                    template: '{{dataItem.MasterUnitId==null?( dataItem.MaxQuantity):"---"}}',
                    isNumber: true, hidden: true
                },
                {
                    field: "isActive", "title": $scope._l.status,
                    attributes: { "class": "tdDebt" },
                    headerAttributes: { "class": "tdDebt" }, hidden: true
                },
        ];

        if (!_settings.SellAllowOrder) {
            for (var i = 0 ; i < grdColumns.length ; i++) {
                if (grdColumns[i].field === 'Reserved') {
                    grdColumns.splice(i, 1);
                    break;
                }
            }
        }

        if (!$scope.rights.viewCost) {
            for (var i = 0 ; i < grdColumns.length ; i++) {
                if (grdColumns[i].field === 'Cost') {
                    grdColumns.splice(i, 1); break;
                }
            }
        }
        $scope.initFilter = function () {
            var filter = [];
            if ($routeParams.Code) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
            }

            var condition = [_filter.newCondition("isActive", true, "eq")];
            filter = _filter.append(filter, condition, 'and');

            return filter;
        }
        // Bind data for Main Gridview
        $scope.products = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                autoSync: true,
                transport: {
                    read: {
                        url: "/api/branchs/" + _session.branch.id + "/products?format=json&Includes=ProductAttributes&ForSummaryRow=true",
                        dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        data: getAdditionalParam
                    }
                },

                pageSize: $scope.pageSize,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                filter: $scope.initFilter(),
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        fields: {
                            Code: { type: "string" },
                            Name: { type: "string" }
                        }
                    },
                    parse: function (response) {
                        if (response && response.Filter) {
                            this.kvFilter = response.Filter;
                        }

                        if (response) {
                            if ($scope.appSetting.SellAllowOrder) {
                                this.totalValue = kendo.toString(response.TotalOnHand, "#,#.###") + "<span class='productTotalOrder'>" + kendo.toString(response.TotalOrder, "#,#.###") + '</span>';
                            } else {
                                this.totalValue = kendo.toString(response.TotalOnHand, "#,#.###") + "<span style='display:none;' class='productTotalOrder'>" + kendo.toString(response.TotalOrder, "#,#.###") + '</span>';
                            }
                            this.hasSummaryRow = true;

                        }
                        angular.forEach(response.Data, function (r) {
                            //console.log(r);
                            r.MasterUnitId = r.MasterUnitId;
                            r.OnHand = (r.ProductType == $scope.pTypeValue.Purchased || r.Id == -1) ? $filter("formatQuantity")(r.OnHand) : "---";

                            // new
                            r.isActiveValue = r.isActive;
                            r.isActive = r.isActive ? $scope._l.product_Active : $scope._l.product_UnActive;
                            r.ProType = _productType[r.ProductType];

                            r.MinQuantity = kendo.toString(r.MinQuantity, "#,#.###");
                            r.MaxQuantity = kendo.toString(r.MaxQuantity, "#,#.###");

                            if (r.Id == -1) {
                                r.BasePrice = null;
                                r.Cost = null;
                                r.isActive = "";
                                r.MinQuantity = null;
                                r.MaxQuantity = null;
                            }
                        });
                        return response;
                    }
                }
            }),
            columns: grdColumns,
            detailTemplate: kendo.template($("#templProductDetail").html()),
            detailInit: $scope.detailProductInit,
            detailExpand: $scope.grvProductDetailExpand,                       
            dataBound: function (e) {
                $scope.emptyGridFix(e);
                //var html = $scope._l.product_TotalSubOnHand + " " + $filter("number")($scope.totalOnHand);
                //var footer = e.sender.footer;
                //if (footer) {
                //footer.find("table").remove();
                //footer.html(html).addClass("pd12 txtR productTotalOnHand txtB");
                //}
                //if (e.sender.wrapper.find(".k-footer-template").length > 0) {
                //    alert(true);
                //}
                //e.sender.wrapper.find("#spanFooter");

                //$('.k-footer-template #spanFooter')
            },
            dataBinding: function (e) {
                $scope.bindedGrid = e.sender;
            }            
        };
        $scope.bindedGrid;

        $scope.refresh = function () {
            $scope.products.dataSource.pageSize(parseInt($scope.pageSize));
        };


        $scope.filterSerial = function (isChange) {

            var keyw = $scope.serialKeyword;
            var grid = $("#tblSerial").data("kendoGrid");

            if (isChange && keyw && keyw.length > 0)
                return false;

            var condition = [], flmain = [];
            var filter = [];
            var ss = $scope.serialStatus;
            if (grid && keyw) {
                condition.push(_filter.newCondition("SerialNumber", keyw, "contains"));
            }
            
            if (ss == 0) {
                condition.push(_filter.newCondition("Status", 1, "neq"));
            }
            else if (ss != -1) {
                condition.push(_filter.newCondition("Status", 1, "eq"));
            }


            filter = _filter.append(filter, condition, "and");
            flmain.push(
            {
                "filters": filter
            });

            if(grid)
                grid.dataSource.filter(flmain);

        }

        var onSelect = function (e) {

            //setAttributeValues();

            var tmpTreeview = e.sender,
                selectedDataItem = tmpTreeview.dataItem(e.node);
            $scope.selectedCategory = selectedDataItem.Id;
            $scope.loadVariant();
            // $scope.selectedCategoryIds = [];
            //   var condition = [], filter = [];

            //if ($scope.selectedCategory != 0) {
            //    var r = _category.get({ categoryId: $scope.selectedCategory });
            //    r.$promise.then(function (result) {
            //        var condition = [], filter = [];
            //        $.each(result.Data, function (index, value) {
            //            condition.push(_filter.newCondition("CategoryId", value.Id, "eq"));
            //            $scope.selectedCategoryIds.push(value.Id);
            //        });
            //        filter = _filter.append(filter, condition, "or");
            //        //_filter.addfilter($scope.products.dataSource, filter);

            //        $scope.loadVariant(filter);

            //    }, function (err) {
            //        _logger.error(getMessage(err));

            //    });

            //} else {
            //    //_filter.remove($scope.products.dataSource, "CategoryId");
            //    $scope.loadVariant("remove");
            //}


        };
        $scope.treeviewcat = {
            dataSource: new kendo.data.HierarchicalDataSource({
                type: "odata",
                //autoSync: true,
                transport: {
                    read: {
                        url: "/api/categories?format=json&hierachicalData=true&includeAll=true&Includes=HasChild",
                        dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        id: "Id",
                        hasChildren: "HasChild"
                    }
                }
            }),
            dataTextField: 'Name',
            template: "<span class=\"nametreeview\">#= item.Name #</span><a class=\"edittreeview\"  ng-click=\"EditCategory($event)\" title=\"Sửa\"><i class=\"fa fa-pencil-square-o\"></i></a>",
            select: onSelect
        };
        $scope.filterbyKeyword = function () {
            var condition = [], filter = [];

            if ($scope.filter.keywordParam) {
                condition.push(_filter.newCondition("Name", $scope.filter.keywordParam, "contains"));
                condition.push(_filter.newCondition("Code", $scope.filter.keywordParam, "contains"));
                filter = _filter.append(filter, condition, "or");
                _filter.addfilter($scope.products.dataSource, filter);

            } else {
                _filter.remove($scope.products.dataSource, "Name");
                _filter.remove($scope.products.dataSource, "Code");
            }
            if ($scope.products.dataSource.page() != 1) {
                $scope.products.dataSource.page(1);
            }

        };
        $scope.filterbyProductType = function () {
            var values = $scope.filter.pTypeFilterValues;
            var condition = [];
            var count = 0;
            /*
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) >= 0) {
                    condition.push(_filter.newCondition("ProductType", parseInt(values[k].key), "eq"));
                    count++;
                }
            }
            */
            for (var k in values) {
                if (values[k] && parseInt(k) >= 0) {
                    condition.push(_filter.newCondition("ProductType", parseInt(k), "eq"));
                    count++;
                }
            }
            if (count > 0) {
                _filter.filter($scope.products.dataSource, condition, "or");
            } else {
                _filter.remove($scope.products.dataSource, "ProductType");
            }
        };
        $scope.FilterActiveProduct = function () {
            if ($scope.ShowInActiveProduct == 1) {
                _filter.remove($scope.products.dataSource, "isActive");

            } else {
                var condition = [_filter.newCondition("isActive", ($scope.ShowInActiveProduct == 2 ? false : true), "eq")];
                _filter.filter($scope.products.dataSource, condition, "and");
            }
            if ($scope.products.dataSource.page() != 1) {
                $scope.products.dataSource.page(1);
            }
        };

        angular.element(document).ready(function () {
            //$scope.FilterActiveProduct();
        });

        $scope.filterbyOnHand = function () {
            var filter = $scope.products.dataSource.filter()
            filter = _filter.detach(filter, "OnHand");
            filter = _filter.detach(filter, "OnHandCompareMin");
            filter = _filter.detach(filter, "OnHandCompareMax");
            filter = _filter.detach(filter, "MasterUnitId");
            if ($scope.onhandFilter == 1 || $scope.onhandFilter == 2) {
                var condition = [_filter.newCondition("MasterUnitId", null, "eq")];
                filter = _filter.append(filter, condition, "and");
            }
            if ($scope.onhandFilter == 1) {
                var condition = [_filter.newCondition("OnHandCompareMin", 0, "gt")];
                filter = _filter.append(filter, condition, "and");

            }
            else if ($scope.onhandFilter == 2) {
                var condition = [_filter.newCondition("OnHandCompareMax", 0, "gt")];
                filter = _filter.append(filter, condition, "and");

            }
            else if ($scope.onhandFilter == 3) {
                var condition = [_filter.newCondition("OnHand", 0, "gt")];
                filter = _filter.append(filter, condition, "and");

            }
            $scope.products.dataSource.filter(filter);
            //_filter.addfilter($scope.products.dataSource, filter);
            if ($scope.products.dataSource.page() != 1) {
                $scope.products.dataSource.page(1);
            }
        };
        $scope.EditCategory = function (event) {
            $scope.categoryForm.openWindow(this.dataItem);
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
        };
        $scope.RefreshGrid = function () {
            $scope.products.dataSource.read();
            if ($scope.products.dataSource.page() != 1) {
                $scope.products.dataSource.page(1);
            }
        }

        $scope.refreshCategory = function (dataReturn) {
            $scope.selectedCategory = 0;
            _filter.remove($scope.products.dataSource, "CategoryId");
            $scope.treeviewcat.dataSource.read();
            $scope.RefreshGrid();
        };
        $scope.UpdateProduct = function (data) {
            //app.events.showEditProductForm
            var pro = { Id: data.MasterUnitId ? data.MasterUnitId : data.Id };
            $scope.$broadcast(app.events.showEditProductForm, pro);
            //$location.path("/" + viewUrl.productList + "/" + (typeof (data.MasterUnitId) != "undefined" && data.MasterUnitId != null && data.MasterUnitId > 0 ? data.MasterUnitId : data.Id));
        };
        $scope.DeleteProduct = function (data) {

            _msgbox.confirm($filter("stringFormat")($scope._l.product_MsgDelProduct, [data.Code]), $scope._l.product_MsgDelProductTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true); // format del
            _msgbox.onConfirm = function () {
                var r = _product.delete({ productId: data.Id });
                r.$promise.then(function (result) {
                    _logger.success($filter("stringFormat")($scope._l.msgDel, [$scope._l.product_MsgDelProductTitle, data.Id]));
                    $scope.RefreshGrid();
                }, function (err) {
                    _logger.error(getMessage(err));

                });
            };
            _msgbox.onCancel = function () { };

        };
        $scope.exportProduct = function () {
            var filter = $scope.products.dataSource.reader.kvFilter;
            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            var type = "Product";
            var fileName = "Products";
            var data = { req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);
        };
        $scope.importProduct = function () {
            $scope.importWindow.wrapper.addClass("k-window-poup k-window-poup2 k-window-masstel k-window-importProduct");
            $scope.importWindow.center().open();
            $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
            $scope.importWindow.wrapper.find(".k-upload-button").removeAttr("style");
            $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
            $scope.importWindow.wrapper.find(".k-upload-status").remove();
        };
        $scope.onCloseImport = function (e) {
            $scope.ImportError = null;
            $(".k-upload-files").remove();
            $scope.IsReplaceExisting = false;
        }
        $scope.AddRelateProduct = function (masterId) {
            //$location.url("/" + viewUrl.productList + "/0?masterid=" + masterId);
            $scope.$broadcast(app.events.showAddProductFormRelate, masterId);
        };

        $scope.PrintProduct = function (data) {
            $scope.barcodePopup.openWindow(data.Id, "Product");
        }
        $scope.IsReplaceExisting = false;
        $scope.ImportError = null;
        $scope.$watch('IsReplaceExisting', function () {
            if ($scope.IsReplaceExisting) {
                _msgbox.confirm($scope._l.product_IsReplaceExisting, $scope._l.product_AceptReplaceExisting, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true); // format del
                _msgbox.onCancel = function () {
                    $scope.IsReplaceExisting = false;
                    refresh($scope);
                };
                _msgbox.onConfirm = function () { };
            }
        });
        $scope.onImportComplete = function (e) {
        }
        $scope.onUploadImport = function (e) {
            $.each(e.files, function () {
                if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                    _logger.error($scope._l.pricebook_MsgImportErrorFile);
                    $scope.importWindow.close();
                    e.preventDefault();
                }
            });
            e.data = { IsReplaceExisting: $scope.IsReplaceExisting };
            $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
            $scope.importWindow.wrapper.find(".k-upload-button").css("visibility", "hidden");
        }
        $scope.onSuccessImport = function (e) {

            _logger.success(e.response);
            $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
            $scope.importWindow.close();
            $route.reload();
        };
        $scope.onImportError = function (e) {
            if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                $scope.ImportError = $rootScope._m.sessionExpire;
            } else {
                if (e.XMLHttpRequest.responseText) {
                    $scope.ImportError = e.XMLHttpRequest.responseText;
                } else {
                    $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                }
            }
            $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
            $scope.importWindow.wrapper.find(".k-upload-button").removeAttr("style");
            refresh($scope);
        }
        $scope.onSelectFile = function () {
            $scope.ImportError = null;
            refresh($scope);
        };
        $scope.onImportCancel = function (e) {
        };
        $scope.ImportFile = {
            multiple: false,
            showFileList: true,

            async: {
                saveUrl: "/Files/ImportProduct",
                removeUrl: "/Files/Remove",
                autoUpload: false
            },
            complete: $scope.onImportComplete,
            upload: $scope.onUploadImport,
            success: $scope.onSuccessImport,
            select: $scope.onSelectFile,
            error: $scope.onImportError,
            cancel: $scope.onImportCancel,
            localization: {
                select: $scope._l.product_ChooseFile,
                uploadSelectedFiles: $scope._l.product_Uploaded,
                headerStatusUploading: $scope._l.product_Uploading,
            }
        };
        $scope.ActiveProduct = function (data) {
            if (data.isActive) {
                if (data.isActive==$scope._l.product_Active)
                    _msgbox.confirm($scope._l.product_MsgActive, $scope._l.product_Acept, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true); // format del
                else
                    _msgbox.confirm("Bạn có chắc chắn muốn kinh doanh trở lại hàng hóa này", $scope._l.product_Acept, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true); // format del
                _msgbox.onCancel = function () {
                };
                _msgbox.onConfirm = function () {
                    var r = _product.activeproduct({ productId: data.Id, CompareCode: data.Code, IsActive: data.isActiveValue });
                    r.$promise.then(function (result) {

                        _logger.success(result.Message);
                        $scope.RefreshGrid();
                    }, function (err) {
                        _logger.error(getMessage(err));

                    });
                };
            } else {
                var r = _product.activeproduct({ productId: data.Id, CompareCode: data.Code, IsActive: data.isActiveValue });
                r.$promise.then(function (result) {

                    _logger.success(result.Message);
                    $scope.RefreshGrid();
                }, function (err) {
                    _logger.error(getMessage(err));

                });
            }
        };

    }])
.controller('ProductImageListCtrl', ['$scope', '$attrs', '$rootScope', 'ProductImageResource', function ($scope, $attrs, $rootScope, _productImageResource) {
    var cf = {
        pageSize: 4
    };
    $scope.result = new Array();
    var id = ($scope[$attrs.data] != null && $scope[$attrs.data].Id != null) ? ($scope[$attrs.data].MasterUnitId == null ? $scope[$attrs.data].Id : $scope[$attrs.data].MasterUnitId) : 0;

    var r = _productImageResource.get({ productId: id ? id : 0 });
    r.$promise.then(function (resultImage) {
        if (resultImage.Data != null && resultImage.Data.length > 0) {
            $scope.result = resultImage.Data;

        } else {
            $scope.result = [{ Id: 0, Image: '/Content/img/default-product.png' }]
        }
        var dataItem = $scope[$attrs.data];
        dataItem.viewImage = $scope.result[0].Image;
        reset();
    }, function (err) {
        _logger.error(getMessage(err));

    });
    function doneLoadPage(callback) {
        return function (products) {
            execCb(callback, products);
        }
    }

    function loadPage(pageNo, callback) {
        if (pageNo >= 0 && pageNo < cf.noPage) {
            var endidx = (pageNo * cf.pageSize + cf.pageSize);
            endidx = endidx > cf.noPage * cf.pageSize ? cf.noPage * cf.pageSize : endidx;
            var resultPagr = $scope.result.slice(pageNo * cf.pageSize, endidx);
            execCb(callback, resultPagr);
        }
    };
    $scope.changeImage = function (pimage) {
        //$rootScope.viewimage = pimage.Image;
        var dataItem = $scope[$attrs.data];
        dataItem.viewImage = pimage.Image;
    }

    function doneCountProduct(callback) {
        return function (count) {
            cf.noPage = Math.ceil(count / cf.pageSize);
            execCb(callback, count);

        }
    }

    function updateTotalPage(callback) {
        //get total no. of product
        execCb(doneCountProduct(callback), $scope.result.length);
    }


    function reset(callback) {
        //updateTotalPage(callback);
        if ($scope.productSwiper) {
            $scope.productSwiper.reInit();
            $scope.productSwiper.reset();

        }

    };

    $scope.updateTotalPage = updateTotalPage;
    $scope.loadPage = loadPage;
    $scope.reset = reset;
    $scope.pageSize = cf.pageSize;
    //reset();
    $scope.swipeNext = function () {
        $scope.productSwiper.moveNext();
    };

    $scope.swipePrev = function () {
        $scope.productSwiper.movePrev();
    };
}])
.controller('ProductImageUploadCtrl', ['$scope', '$attrs', '$rootScope', 'ProductImageResource', 'logger', function ($scope, $attrs, $rootScope, _productImageResource, _logger) {
    var cf = {
        pageSize: 6
    };
    var parentScope = $scope.$parent;
    parentScope.childScopeUpload = $scope;
    
    $scope.result = new Array();
    $scope.UploadError = null;
    function doneLoadPage(callback) {
        return function (products) {
            execCb(callback, products);
        }
    }

    function loadPage(pageNo, callback) {
        if (pageNo >= 0 && pageNo < cf.noPage) {
            var endidx = (pageNo * cf.pageSize + cf.pageSize);
            endidx = endidx > cf.noPage * cf.pageSize ? cf.noPage * cf.pageSize : endidx;
            var resultPagr = $scope.result.slice(pageNo * cf.pageSize, endidx);
            execCb(callback, resultPagr);
        }
    };
    function doneCountProduct(callback) {
        return function (count) {
            cf.noPage = Math.ceil(count / cf.pageSize);
            execCb(callback, count);

        }
    }

    function updateTotalPage(callback) {
        //get total no. of product
        execCb(doneCountProduct(callback), $scope.result.length);
    }


    function reset(callback) {
        //updateTotalPage(callback);
        if ($scope.productSwiper) {
            $scope.productSwiper.reInit();
            $scope.productSwiper.reset();
        }

    };    
    $scope.updateTotalPage = updateTotalPage;
    $scope.loadPage = loadPage;
    $scope.reset = reset;
    $scope.pageSize = cf.pageSize;
    $scope.swipeNext = function () {
        $scope.productSwiper.moveNext();
    };

    $scope.swipePrev = function () {
        $scope.productSwiper.movePrev();
    };
    $scope.onuploadComplete = function (e) {
        $rootScope.$broadcast('changeImageDataSource', null);
    }
    $scope.onUploadError = function (e) {
        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
            $scope.UploadError = $rootScope._m.sessionExpire;
        } else {
            if (e.XMLHttpRequest.responseText) {
                $scope.UploadError = e.XMLHttpRequest.responseText;
            } else {
                $scope.UploadError = $rootScope._l.customer_NoUseToFunction;
            }
        }
        refresh($scope);
    }
    $scope.onUpload = function (e) {
        // Array with information about the uploaded files
        var files = e.files;

        // Check the extension of each file and abort the upload if it is not .jpg
        $.each(files, function () {
            if (!(this.extension.toLowerCase() == ".jpg" || this.extension.toLowerCase() == ".jpeg" || this.extension.toLowerCase() == ".gif" || this.extension.toLowerCase() == ".bmp" || this.extension.toLowerCase() == ".png")) {
                _logger.error($scope._l.product_NotFileImage);
                e.preventDefault();
            }
        });

        e.data = { ProductId: ($scope.product == null || $scope.product.Id == null ? 0 : $scope.product.Id), SessionUpload: $scope.sessionUpload };
        $scope.UploadError = null;
    }
    $scope.uploadImages = {
        multiple: false,
        showFileList: true,
        async: {
            saveUrl: "/Files/Upload",
            autoUpload: true,
        },
        complete: $scope.onuploadComplete,
        upload: $scope.onUpload,
        error: $scope.onUploadError
    };

    $scope.deleteImage = function (objDelete) {
        //console.log(objDelete);
        var r = _productImageResource.delete({ productId: objDelete.Id, SessionUpload: $scope.sessionUpload });
        r.$promise.then(function (resultImage) {
            $rootScope.$broadcast('changeImageDataSource', null);
            _logger.success(resultImage.Message);
        }, function (err) {
            _logger.error(getMessage(err));

        });
    }
    //$scope.uploadProcess = {
    //    min: 0,
    //    max: 100,
    //    value:0,
    //    type: "percent",
    //};

    $rootScope.$on('changeImageDataSource', function (event, e) {
        /* implementation here */
        var productId = parseInt(e ? e : ($scope.product ? ($scope.product.Id ? $scope.product.Id : $scope.product.Id) : 0));
        if ($scope.sessionUpload || productId) {
            var r = _productImageResource.get({ productId: productId, SessionUpload: $scope.sessionUpload });
            r.$promise.then(function (resultImage) {
                var defaultimg = '/Content/img/default-product.png';
                if (resultImage.Data !== null && resultImage.Data.length > 0) {
                    $scope.result = resultImage.Data;

                } else {
                    $scope.result = [{ Id: -9999, Image: defaultimg }]
                }
                $rootScope.viewimage = $scope.result[0].Image ? $scope.result[0].Image : defaultimg;


                reset();
            }, function (err) {
                _logger.error(getMessage(err));

            });
        }

    });
}])
.directive('kvProductFilter', ['kvSession', 'productType', 'productTypeValue', function (_session, _productType, _pTypeValue) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) {
            if (!scope.pTypeFilter) {
                scope.pTypeFilter = [];
                for (var i in _productType) {
                    if (i == _pTypeValue.Manufactured) {
                        scope.pTypeFilter.push({ key: i, value: scope._l.product_PacketTitle });
                    } else
                        scope.pTypeFilter.push({ key: i, value: _productType[i] });
                }
            }
        },
        templateUrl: _session.partialPath('product-filter.html')
    };
}])
.directive('kvCategoryForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'CategoryResource', '$timeout', function (_session, _labels, _logger, _m, _msgbox, _category, $timeout) {
    return {
        restrict: 'E',
        scope: { formName: '@formName', kvWidth: '@kvWidth' },
        controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
            $scope._l = _labels;
            var compareCateName = "";
            this.openWindow = function (category) {
                category = category == null ? { Id: 0, Name: "", ParentId: 0 } : category;
                category.Name = category.Id > 0 ? category.Name.replace(/(<([^>]+)>)/ig, "") : "";
                category.ParentId = category.ParentId == null ? 0 : category.ParentId;
                $scope.category = category;
                compareCateName = category.Name;
                $scope.dropdownlistcat.dataSource.read();
                $scope.categoryWindow.title(category.Id > 0 ? $scope._l.product_EditGroup : $scope._l.product_AddGroup);
                $scope.categoryWindow.wrapper.addClass("k-window-poup k-window-masstel k-window-categoryProduct");
                $scope.categoryWindow.center().open();
            };

            $scope.closeWindow = function () {
                $scope.categoryWindow.close();
            };
            if ($scope.formName) {
                //inject to this controller to parent 
                $scope.$parent[$scope.formName] = this;
            };
            $scope.cancel = function () {
                //$
                $scope.closeWindow();
            };

            $scope.isClicked = false;
            $scope.saveCategory = function () {
                if ($scope.category.Name.length > 125)
                    $scope.category.Name = $scope.category.Name.substring(0, 124);
                if (!$scope.isClicked) {

                    $("#LoadingPanel").show();
                    $scope.isClicked = true;
                    $scope.category.Name = $scope.category.Name.replace(/(<([^>]+)>)/ig, "");
                    var r = _category.save({ Category: $scope.category, CompareCateName: compareCateName });
                    r.$promise.then(function (result) {

                        $scope.cancel();
                        $("#LoadingPanel").hide();

                        $timeout(function () {
                            $scope.isClicked = false;

                        }, 1000);


                        _logger.success(result.Message);
                        $scope.$parent.refreshCategory(result.Data.Id);
                        $scope.dropdownlistcat.dataSource.read();

                    }, function (err) {
                        $scope.isClicked = false;
                        $("#LoadingPanel").hide();
                        _logger.error(getMessage(err));

                    });
                }

            };
            $scope.delete = function () {
                _msgbox.confirm($scope._l.product_MsgGroupProduct, $scope._l.product_MsgGroupProductTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                _msgbox.onConfirm = function () {
                    var r = _category.delete({ Id: $scope.category.Id, CompareCateName: compareCateName });
                    r.$promise.then(function (result) {
                        $scope.dropdownlistcat.dataSource.read();
                        _logger.success(result.Message);
                        $scope.cancel();
                        $scope.$parent.refreshCategory(0);
                        location.reload(true);
                    }, function (err) {
                        _logger.error(getMessage(err));

                    });
                }
            };
            var getParameter = function () {
                var param = {};
                param.CategoryId = $scope.category ? $scope.category.Id : 0;
                return param;
            }
            $scope.dropdownlistcat = {
                dataSource: new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/hierarchycategory",
                            dataType: "json",// "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            data: getParameter
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    }
                }),
                dataTextField: "Name",
                dataValueField: "Id",
                valuePrimitive: true
            }

        }],
        link: function (scope, elem, attrs, ctrl) {
            elem.on('$destroy', function () {
                if (scope.formName && scope.$parent)
                    delete scope.$parent[scope.formName];
            });
        },
        templateUrl: _session.partialPath('category-form.html')
    };
}])
.directive('kvAttributeForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'AttributeResource', function (_session, _labels, _logger, _m, _msgbox, _attribute) {
    return {
        restrict: 'E',
        scope: { formName: '@formName', kvWidth: '@kvWidth' },
        controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
            $scope._l = _labels;
            this.openWindow = function (att, index) {
                $scope.saving = false;
                $scope.attribute = att;
                $scope.attIndex = index;
                if ($scope.attribute.Id != 0) {
                    var r = _attribute.get({ attributeId: $scope.attribute.Id });
                    r.$promise.then(function (result) {
                        $scope.attribute = result;
                        $scope.attributeWindow.title($scope.attribute.Id > 0 ? $scope._l.product_EditAttribute : $scope._l.product_AddAttribute);
                        $scope.attributeWindow.wrapper.addClass("k-window-poup k-window-poup-thn k-window-attrProduct");
                        $scope.attributeWindow.center().open();
                    }, function (err) {
                        _logger.error(getMessage(err));

                    });
                } else {
                    $scope.attributeWindow.title($scope.attribute.Id > 0 ? $scope._l.product_EditAttribute : $scope._l.product_AddAttribute);
                    $scope.attributeWindow.wrapper.addClass("k-window-poup k-window-attrProduct");
                    $scope.attributeWindow.center().open();
                }

            };

            $scope.closeWindow = function () {
                $scope.attributeWindow.close();
            };
            if ($scope.formName) {
                //inject to this controller to parent 
                $scope.$parent[$scope.formName] = this;
            };
            $scope.cancel = function () {
                //$
                $scope.closeWindow();
            };
            $scope.onClose = function () {

                $scope.$parent.ChangeAttributeSelected($scope.attribute.Id, $scope.attIndex);
            };
            $scope.save = function () {
                $scope.saving = true;
                if ($scope.attributeForm.$valid) {
                    $scope.saving = false;
                    var r = _attribute.save({ Attribute: $scope.attribute });
                    r.$promise.then(function (result) {
                        $scope.attribute = result.Data;
                        $scope.cancel();
                        _logger.success(result.Message);

                    }, function (err) {
                        _logger.error(getMessage(err));

                    });
                } else {
                    $scope.saving = false;
                    _logger.error($rootScope._m.globalValidateSummary);
                }

            };
            $scope.delete = function () {
                _msgbox.confirm($scope._l.product_MsgDelAttribute, $scope._l.product_MsgDelAttributeTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                _msgbox.onConfirm = function () {
                    var r = _attribute.delete({ attributeId: $scope.attribute.Id });
                    r.$promise.then(function (result) {
                        $scope.attribute = { Id: -9999 };
                        _logger.success(result.Message);
                        $scope.cancel();
                    }, function (err) {
                        _logger.error(getMessage(err));

                    });
                }
            };

        }],
        link: function (scope, elem, attrs, ctrl) {
            elem.on('$destroy', function () {

                if (scope.formName && scope.$parent)
                    delete scope.$parent[scope.formName];

            });
        },
        templateUrl: _session.partialPath('attribute-form.html')
    };
}])
.directive('kvBarCodeForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'kvExportToExcel', function (_session, _labels, _logger, _m, _msgbox, _export) {
    return {
        restrict: 'E',
        scope: { formName: '@formName', kvWidth: '@kvWidth' },
        controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
            $scope._l = _labels;
            this.openWindow = function (printId, printType) {
                $scope.PrintId = printId;
                $scope.PrintType = printType;

                $scope.barcodeChoose.title("Chọn loại giấy in Mã vạch");
                $scope.barcodeChoose.wrapper.addClass("k-window-poup");
                $scope.barcodeChoose.center().open();
            };
            $scope.PaperSize = "Base";
            $scope.PrintBarCode = function (paperSize) {
                $scope.PaperSize = paperSize;
                var report=$scope.PaperSize == "SmallBase" ?  "PrintSmallBarCode" : ($scope.PaperSize == "Base" ? "PrintBarCode" : ($scope.PaperSize == "A5" ? "PrintBarCodeTomy103" : "PrintBarCodeTomy145"));
                $("#reportViewer").telerik_ReportViewer({
                    serviceUrl: "/webapi/reports/",
                    templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplateBarcode.html',
                    reportSource: {
                        report: report,
                        parameters: { PrintId: $scope.PrintId, PricebookId: $scope.SelectedPriceBookId, PrintType: $scope.PrintType, PrintSize: $scope.PaperSize }
                    },
                    viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                    scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                    scale: 1.0,
                    ready: function () {

                    }
                });


                $scope.barcodePreview.title($scope._l.product_PrintBarcode);
                $scope.barcodePreview.wrapper.addClass("k-window-poup k-window-barcodeProduct");
                $scope.barcodePreview.center().open();
                $scope.barcodeChoose.close();
            };
            $scope.comboPriceBook = {
                dataSource: new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/pricebook/getall?includeAll=true&Includes=PriceBookBranches&Includes=PriceBookCustomerGroups&Includes=PriceBookUsers",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        model: {
                            fields: {
                                CreatedDate: { type: "date" },
                                EndDate: { type: "date" },
                                StartDate: { type: "date" },

                            }
                        },
                    }
                }),
                dataTextField: "Name",
                dataValueField: "Id",
                dataBound: $scope.onDataBound
            };
            $scope.onDataBound = function (e) {
                var dataItem = e.sender.dataItem(e.sender.selectedIndex);
                $scope.selectedPriceBook = dataItem;
                $scope.SelectedPriceBookId = dataItem.Id;
            };

            $scope.export = function () {
                var type = "ProductPriceBook";
                var fileName = "BangGiaSanPham";
                var filter = { PriceBookId: $scope.SelectedPriceBookId, PrintId: $scope.PrintId, PrintType: $scope.PrintType };
                var data = { req: JSON.stringify(filter) };
                _export.toExcel(type, fileName, data);
            };

            $scope.comboPriceBook = {
                dataSource: new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/pricebook/getall?includeAll=true&NotPrintPriceBook=true&Includes=PriceBookBranches&Includes=PriceBookCustomerGroups&Includes=PriceBookUsers",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        model: {
                            fields: {
                                CreatedDate: { type: "date" },
                                EndDate: { type: "date" },
                                StartDate: { type: "date" },

                            }
                        },
                    }
                }),
                dataTextField: "Name",
                dataValueField: "Id",
                dataBound: $scope.onDataBound
            };

            $scope.onDataBound = function (e) {
                var dataItem = e.sender.dataItem(e.sender.selectedIndex);
                $scope.selectedPriceBook = dataItem;
                $scope.SelectedPriceBookId = dataItem.Id;
            };

            $scope.export = function () {
                var type = "ProductPriceBook";
                var fileName = "BangGiaSanPham";
                var filter = { PriceBookId: $scope.SelectedPriceBookId, PrintId: $scope.PrintId, PrintType: $scope.PrintType };
                var data = { req: JSON.stringify(filter) };
                _export.toExcel(type, fileName, data);
            };

            $scope.onClose = function (e) {

            };
            $scope.onOpenBarCode = function (e) {
                var viewer = $("#reportViewer").data("telerik_ReportViewer");
                var report = $scope.PaperSize == "SmallBase" ? "PrintSmallBarCode" : ($scope.PaperSize == "Base" ? "PrintBarCode" : ($scope.PaperSize == "A5" ? "PrintBarCodeTomy103" : "PrintBarCodeTomy145"));

                viewer.reportSource({
                    report: report,
                    parameters: { PrintId: $scope.PrintId, PricebookId: $scope.SelectedPriceBookId, PrintType: $scope.PrintType, PrintSize: $scope.PaperSize }
                });
                viewer.refreshReport();
            };
            if ($scope.formName) {
                //inject to this controller to parent 
                $scope.$parent[$scope.formName] = this;
            };

        }],
        link: function (scope, elem, attrs, ctrl) {
            elem.on('$destroy', function () {
                if (scope.formName && scope.$parent)
                    delete scope.$parent[scope.formName];

            });
        },
        templateUrl: _session.partialPath('barcode-form.html')
    };
}])
.directive('kvProductPricebookForm', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'PriceBookResource',
    function (_session, _labels, _logger, _m, _msgbox, _pricebook) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', kvWidth: '@kvWidth' },
            controller: ['$scope', '$rootScope', function ($scope, $rootScope) {
                //#region init variables
                $scope._l = _labels;
                $scope.callback = null;
                $scope.proId = 0;
                //#endregion

                //#region inject to this controller to parent
                if ($scope.formName) {
                    $scope.$parent[$scope.formName] = this;
                };
                //#endregion

                //#region closeWindow
                $scope.closeWindow = function () {
                    $scope.productPricebookWindow.close();
                    $('body').removeClass("ovh");
                };
                //#endregion

                //#region openWindow
                $scope.openPopup = function (callback) {
                    $('body').addClass("ovh");
                    $scope.productPricebookWindow.title($scope._l.priceBook);
                    $scope.productPricebookWindow.wrapper.addClass("k-window-poup k-window-fix k-window-pricebookProduct");
                    $scope.productPricebookWindow.center().open();
                    $scope.callback = callback;
                };
                $scope.PricebookWindow = function (e) {
                        $('body').removeClass("ovh");
                };
                this.openWindow = function (productId, listProduct, cb) {
                    $scope.proId = productId;
                    if (listProduct && listProduct.length > 0) {
                        $scope.pricebooks = listProduct;
                        $scope.openPopup(cb);
                    } else {
                        var objDatasource = _pricebook.getallbyproduct({
                            BranchId: _session.branch.id,
                            ProductId: productId,
                            ByCurrentUser: true,
                            Includes: ["PriceBookDetails"]
                        });
                        objDatasource.$promise.then(function (listPricebook) {
                            $scope.pricebooks = listPricebook.Data;
                            $scope.openPopup(cb);
                        }, function (err) {
                            if (err.status === 403)
                                _logger.error($scope._l.user_NotPrivileges);
                            else
                                _logger.error(getMessage(err));
                        });
                    }
                };
                //#endregion

                //#region cancel
                $scope.cancel = function () {
                    $scope.closeWindow();
                    $('body').removeClass("ovh");
                };
                //#endregion

                //#region savePricebook
                $scope.savePricebook = function () {
                    if ($scope.locked)
                        return;
                    $scope.locked = true;
                    if ($scope.proId !== 0) {
                        var r = _pricebook.addpricebookdetail({ ListPriceBookDetail: $scope.pricebooks });
                        r.$promise.then(function (result) {
                            var objDatasource = _pricebook.getallbyproduct({
                                BranchId: _session.branch.id,
                                ProductId: $scope.proId,
                                ByCurrentUser: true,
                                Includes: ["PriceBookDetails"]
                            });
                            objDatasource.$promise.then(function (listPricebook) {
                                $scope.pricebooks = listPricebook.Data;
                                $scope.cancel();
                                _logger.success(result.Message);
                                execCb($scope.callback, $scope.pricebooks);
                                $scope.locked = false;
                            }, function (err) {
                                if (err.status === 403)
                                    _logger.error($scope._l.user_NotPrivileges);
                                else
                                    _logger.error(getMessage(err));
                            });
                        }, function (err) {
                            _logger.error(getMessage(err));
                            $scope.locked = false;
                        });
                    } else {
                        $scope.cancel();
                        execCb($scope.callback, $scope.pricebooks);
                        $scope.locked = false;
                    }
                };
                //#endregion
            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('product-pricebook-popup.html')
        };
    }])
.directive('kvAddProductPopup', ['kvSession', 'kvLabel', 'logger', 'kvMessages', 'kvConfirmBox', 'ProductResource', 'CategoryResource',
    function (_session, _labels, _logger, _m, _msgbox, _product, _category) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', kvWidth: '@kvWidth' },
            controller: ['$scope', '$rootScope', 'PrivilegeHelper', function ($scope, $rootScope, _privileges) {
                //$scope.canviewCost = _privileges.has('Product_Cost');
                $scope._l = _labels;
                $scope._m = _m;
                this.openWindow = function () {
                    $scope.product = { AllowsSale: true, Id: 0, Code: "", Name: "", BasePrice: 0, Cost: 0, CategoryId: 0 };
                    $scope.addProductPopup.title($scope._l.product_AddText);
                    $scope.addProductPopup.wrapper.addClass("k-window-poup k-window-masstel k-window-quickaddProduct");
                    $scope.addProductPopup.center().open();
                };
                $scope.closeWindow = function () {
                    $scope.addProductPopup.close();
                };
                if ($scope.formName) {
                    //inject to this controller to parent 
                    $scope.$parent[$scope.formName] = this;
                };
                $scope.cancel = function () {
                    $scope.closeWindow();
                };
                $scope.SaveProduct = function () {

                    if ($scope.productForm.$valid) {
                        if (typeof ($scope.product.CategoryId) == 'undefined' || $scope.product.CategoryId == '' || $scope.product.CategoryId == 0) {
                            _logger.error($scope._l.product_ChooseGroup);
                            return;
                        }

                        if (!$scope.saving) {

                            $("#LoadingPanel").show();
                            $scope.saving = true;
                            var r = _product.save({ Product: $scope.product });
                            r.$promise.then(function (result) {
                                $scope.saving = false;

                                $("#LoadingPanel").hide();


                                $scope.$parent.addProduct(result.Data);
                                $scope.closeWindow();
                                _logger.success(result.Message);
                            }, function (err) {
                                $scope.saving = false;
                                $("#LoadingPanel").hide();
                                _logger.error(getMessage(err));

                            });
                        }
                    } else {
                        _logger.error($scope._m.globalValidateSummary);
                    }
                };

                $scope.dropdownlistCatDataSource = new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/hierarchycategory?IncludeSelect=true",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",

                    }
                });

                $scope.dropdownlistcat = {
                    dataSource: $scope.dropdownlistCatDataSource,
                    dataTextField: "Name",
                    dataValueField: "Id",
                    valuePrimitive: true
                }
                $scope.EditCategory = function (event) {
                    $scope.categoryForm.openWindow(null);
                }
                $scope.refreshCategory = function (dataReturn) {
                    $scope.product.CategoryId = dataReturn;
                    $scope.dropdownlistcat.dataSource.read();
                };


            }],
            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('product-addnewpopup.html')
        };
    }])

.directive('kvPostRender', ['$timeout', function ($timeout) {
    return function (scope, element, attrs) {
        if (scope.$last)
            $timeout(function () { scope.$emit('onRepeatLast', element, attrs); });

    };

}]);
;
'use strict'
kvApp.controller('PurchaseOrderCtrl', ['kvSession', '$scope', '$rootScope', 'purchaseOrderStatus', 'purchaseOrderStatusMap', 'kendofilter', '$filter', '$location', '$routeParams', 'logger', 'kvExportToExcel', 'PurchaseOrderResource', 'kvConfirmBox', 'BranchResource', 'paymentMethods', 'paymentStatus', 'settings',
    function (_session, $scope, $rootScope, _orderStatus, _orderMap, _filter, $filter, $location, $routeParams, _logger, _export, _ordersvc, _msgBox, _branches, _paymentMethods, _paymentStatus, _setting) {
        $scope.pageSizes = pager.pageSizes;
        $scope.typeList = viewUrl.orderList;
        $scope.typeEmail = viewUrl.orderEmail;
        $scope.lblOtherTimeFilter = null;
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };
        //$scope.selectedInvoice = {Code: 'adfsdf'};
        // Init Data
        $scope.disableImportBtn = false; // Default show Import btn
        $scope.settings = _setting;
        $scope.isPurchaseOrder = true;
        $scope.hasAdd = $scope._p.has("PurchaseOrder_Create");
        $scope.searchLable = $scope._l.purchaseorder_SearchHolder;
        $scope.order_SearchCustomerLbl = $scope._l.purchaseorder_SearchCustomerLbl;
        $scope.customOptions = {
            // using {{angular}} templates:
            template: '<span><b>{{dataItem.Account}}</b><p>&nbsp;&nbsp;{{dataItem.Bank}}</p></span>',
            valueTemplate: '{{dataItem.Account}}'
        };
        $scope.deliveryIds = [];
        $scope.notShowDeliveryFilter = true;

        $scope.edit = function (id) {
            $location.path("/" + viewUrl.purchaseOrder + "/" + id);
        };
        $scope.finishOrder = function (id) {
            _ordersvc.save({ PurchaseOrder: { Id: id }, Complete: true }, function (data) {
                _logger.success($filter("stringFormat")($scope._m.orderCompleted, [data.Code]));
                $scope.orders.read();
            }, function (err) {
                _logger.error(getMessage(err));
            });
        };
        if ($("#rowTemplate").html()) {
            $scope.template = $("#rowTemplate").html();
            $scope.pageSize = pager.defaultEmail;
            // $scope.viewtype = $scope.typeEmail;
        } else {
            $scope.pageSize = pager.defaultList;
            //  $scope.viewtype = $scope.typeList;
        }
        // For Detail View
        if ($("#templDetail").length > 0) {
            $scope.detailTemplate = kendo.template($("#templDetail").html());
        }
        // $scope.Invoicedata = {Code:"ABC"};
        $scope.statusMap = _orderMap;

        $scope.invoiceDetail = function (id) {
            //$scope.$broadcast('showInvoiceDetail', id);

            $scope.invoicePopup.showInvoice(id, function () {
                //on save callback
                $scope.invoicedb.read();
            });
        };
        $scope.returnDetail = function (id) {
            //$scope.$broadcast('showReturnDetail', id);
            $scope.returnPopup.showReturn(id, function () {
                //on save success
                $scope.refundDb.read();
            });
        };
        $scope.paymentDetail = function (code) {
            //$scope.$broadcast('showPaymentDetail', code);
            $scope.paymentPopup.showPayment(code, function () {
                $scope.paymentDb.read();
            });
        };


        $scope.export = function () {
            var filter = $scope.orders.reader.kvFilter;
            /*
            var col = $("#grdOrders").data("kendoGrid").options.columns;
            var arrcol = [];
            for (var idx = 0; idx < col.length; idx++) {
                //if (!$scope._setting.SellAllowDeposit && col[idx].field === "Status") continue;
                if (col[idx].field === "Status") {
                    col[idx].field = "StatusValue";
                }
                arrcol.push({
                    Field: col[idx].field, Title: col[idx].title,
                    Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                    Width: col[idx].width
                });
            }
            */
            var columns = [];

            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            columns = _export.getGridColumns("grdPurchaseOrders");

            //
            for (var i = 0; i < columns.length; i++) {
                var col = columns[i];
                if (col.Field == "ShortDescription")
                    col.Field = "Description";
            }

            var type = "PurchaseOrder";
            var fileName = "DanhSachNhapHang";
            var data = { column: JSON.stringify(columns), req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);
        };
        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;

            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });
            //Order Detail


            //End Order Detail
            var hideTab = function (index) {
                $(tabship.data("kendoTabStrip").items()[index]).attr("style", "display:none");
            };

            var loadTabPayment = true;
            if (loadTabPayment) {

                $scope.paymentDb = new kendo.data.DataSource({
                    type: "odata",
                    autoSync: true,
                    transport: {
                        read: {
                            url: "/api/purchasepayments/?OrderId=" + e.data.Id + "&format=json&Includes=User&Includes=OrderValue&Includes=PaidValue&Includes=SupplierName&Includes=PurchaseOrder",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    change: function () {
                        if (this._total == 0) {
                            hideTab(1);
                        }
                    },
                    serverPaging: false,
                    serverFiltering: false,
                    serverSorting: true,
                    schema: {
                        data: "Data",
                        total: "Total",
                        parse: function (response) {
                            if (response && response.Data) {
                                for (var j = 0; j < response.Data.length; j++) {
                                    var t = response.Data[j];
                                    t.Method = _paymentMethods[t.Method];
                                    t.Status = _paymentStatus[t.Status];

                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                CreatedDate: { type: "date" },
                                TransDate: { type: "date" }
                            }
                        }
                    }
                });

                detailRow.find("#tblpayment").kendoGrid({
                    dataSource: $scope.paymentDb,
                    pageable: false,
                    dataBinding: $scope.emptyGridFix,
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a[name=paymentItem]").click(function () {
                            var code = $(this).attr("data");
                            scope.paymentDetail(code);
                        });
                    },
                    columns: [{ "field": "Code", template: '<a href="javascript:void(0)" name="paymentItem" data="#=Code#">#=Code#</a>', "title": $scope._l.paymentCode, headerAttributes: { "class": "tdCode16" }, attributes: { "class": "tdCode16" } },
                 { "field": "TransDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                 { "field": "User.GivenName", "title": $scope._l.createdBy, sortable: false, headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
                 { "field": "Method", "title": $scope._l.purchaseorder_Method, headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" } },
                 //{ "field": "NeedPayValue", "title": $scope._l.customerNeedPayMore, format: "{0:n0}", sortable: false, headerAttributes: { "class": "txtR" }, attributes: { "class": "txtR" } },
                 { "field": "Status", "title": $scope._l.status, headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" } },
                 { "field": "Amount", "title": $scope._l.purchaseorder_Pay, format: "{0:n0}", headerAttributes: { "class": "txtR tdPrice" }, attributes: { "class": "txtR tdPrice" } },

                    ]
                });
            }
        };

        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }

        $scope.orderStatus = kvDropbox.orderStatus;
        if (!$scope.orderStatus) {
            $scope.orderStatus = [];
            for (var i in _orderStatus) {
                $scope.orderStatus.push({ key: i, value: _orderStatus[i] });
            }
        }

        $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;
        //$scope.branchs = _session.branchs;
        $scope.branches = _branches.get({ Permission: 'PurchaseOrder_Read' }, function () {
            $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
        });
        $scope.currentBranchId = _session.branch.Id;

        $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];
        $scope.bindedGrid;
        $scope.viewPrice = $scope._p.has('Product_PurchasePrice');
        $scope.gridcolumns = [{ "field": "Code", "title": $scope._l.purchaseorder_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                 { "field": "PurchaseDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true },
                 { "field": "ModifiedDate", "title": $scope._l.modifiedDate, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true, hidden: true },
                 { "field": "Supplier.Name", "title": $scope._l.supplier, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                 { "field": "Branch.Name", "title": $scope._l.branch, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },

                 { "field": "User.GivenName", "title": $scope._l.employee, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                 { "field": "ShortDescription", "title": $scope._l.note, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },

                 { "field": "Status", "title": $scope._l.status, headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" } }
        ];

        if ($scope.viewPrice) {
            $scope.gridcolumns.splice(6, 0,
                { "field": "SubTotal", "title": $scope._l.subTotal, format: "{0:n0}", headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" }, isNumber: true, hidden: true },
                 { "field": "Discount", "title": $scope._l.discount, format: "{0:n0}", headerAttributes: { "class": "tdTotal txtR" }, attributes: { "class": "tdTotal txtR" }, isNumber: true, hidden: true },
                 { "field": "Total", "title": $scope._l.total, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" }, isNumber: true },
                { "field": "PaidAmount", "title": $scope._l.paidAmountForSupplier, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" }, isNumber: true, hidden: true });
        }

        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };

        $scope.dateFilter.TimeRange = (kvDropbox.dateFilter) ? kvDropbox.dateFilter : 'alltime';
        var now = new Date();
        now = now.setHours(0, 0, 0, 0);
        var fromDate = new Date(now);
        var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);

        $scope.dateFilter.StartDate = kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart);
        $scope.dateFilter.EndDate = kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now));


        function filterbyExtention() {
            var para = {};
            para.ProductKey = $scope.filterProduct;
            para.SupplierKey = $scope.filterCustomer;
            para.UserNameKey = $scope.filterUserName;
            para.SerialKey = $scope.filterSerial;
            return para;
        }
        // Bind data for Main Gridview
        $scope.orders = new kendo.data.DataSource({
            type: "odata",
            autoSync: false,
            transport: {
                read: {
                    url: "/api/purchaseOrders?format=json&Includes=Branch&Includes=Total&Includes=PaidAmount&Includes=TotalQuantity&Includes=SubTotal&Includes=Supplier&Includes=User&ForSummaryRow=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: filterbyExtention
                }
            },

            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    if (response && typeof (response.TotalValue) != "undefined") {

                        this.hasSummaryRow = $scope.viewPrice;
                    } else {
                        this.totalValue = 0;
                    }
                    if (response && response.Data) {
                        for (var i = 0 ; i < response.Data.length ; i++) {
                            var t = response.Data[i];
                            //console.log(t);
                            t.Supplier = t.Supplier ? t.Supplier : { Name: '' };
                            t.StatusValue = t.Status;
                            t.Status = _orderStatus[t.Status];
                            t.Branch = t.Branch ? t.Branch : { Name: '' };
                            t.User = t.User ? t.User : { GivenName: '' };
                            t.ModifiedDate = $filter('parseDate')(t.ModifiedDate);
                            t.ShortDescription = $filter('truncateDesc')(t.Description);
                            if (!t.Discount)
                                t.Discount = 0;

                            // Summary row
                            if (t.Id < 0) {
                                t.PurchaseDate = "";
                                //t.SubTotal = "";
                                //t.Discount = "";
                            }

                            if (!t.ViewPrice) {
                                t.Total = t.PaidAmount = t.SubTotal = t.Discount = "---";

                            }

                            if (Math.abs(t.Total - t.PaidAmount) > 0.0001) {
                                t.isWarning = true;
                            }
                        }
                        this.hasCustomStyle = true;
                        this.warnColumnIndex = 11;                        
                    }
                    return response;
                },
                model: {
                    fields: {
                        Code: { type: "string" },
                        PurchaseDate: { type: "date" },
                        BranchName: { type: "string" },
                        Status: { type: "string" },
                        CustomerName: { type: "string" },
                        SaleValue: { type: "string" }
                    }
                }
            }
        });

        function initFilter() {
            var filter = [];
            $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
            if ($routeParams.Code) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
            }
            else {

                var values = $scope.branchids;
                var condition = [];
                if (values && values.length > 0) {
                    for (var k = 0; k < values.length; k++) {
                        if (parseInt(values[k]) > 0) {
                            condition.push(_filter.newCondition("BranchId", parseInt(values[k]), "eq"));
                        }
                    }
                    filter = _filter.append(filter, condition, "or");
                }
                if ($scope.dateFilter.TimeRange == 'other') {
                    condition = [];
                    if ($scope.dateFilter.StartDate) {

                        var todate = new Date($scope.dateFilter.EndDate);
                        condition.push(_filter.newCondition("PurchaseDate", $scope.dateFilter.StartDate, "ge"));
                        condition.push(_filter.newCondition("PurchaseDate", new Date(todate.DateAdd(1)), "lt"));
                    }
                    filter = _filter.append(filter, condition, "and");
                } else if ($scope.dateFilter.TimeRange != '') {
                    condition = [
                     _filter.newCondition("PurchaseDate", $scope.dateFilter.TimeRange, "eq")
                    ];
                    filter = _filter.append(filter, condition, "or");
                }
                values = $scope.orderStatus;
                condition = [];
                var count = 0;
                for (var v = 0; v < values.length; v++) {
                    if (values[v].checked && parseInt(values[v].key) > 0) {
                        condition.push(_filter.newCondition("Status", parseInt(values[v].key), "eq"));
                        count++;
                    }
                }
                if (count > 0) {
                    filter = _filter.append(filter, condition, "or");
                }
            }


            return filter;
        }
        // End Detail
        // Function 
        $scope.refresh = function () {
            $scope.orders.pageSize(parseInt($scope.pageSize));
        };

        $scope.filterbyBranch = function () {
            var values = $scope.branchids;
            var condition = [];
            if (values && values.length > 0) {
                for (var k = 0; k < values.length; k++) {
                    if (parseInt(values[k]) > 0) {
                        condition.push(_filter.newCondition("BranchId", parseInt(values[k]), "eq"));
                    }
                }
                _filter.filter($scope.orders, condition, "or");
            } else {
                _filter.remove($scope.orders, "BranchId");
            }
        };

        $scope.filterbyStatus = function () {
            var values = $scope.orderStatus;
            var condition = [];
            var count = 0;
            //if (values.length > 0) {
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) > 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                    count++;
                }
            }
            if (count > 0) {
                _filter.filter($scope.orders, condition, "or");
            } else {
                _filter.remove($scope.orders, "Status");
            }
        };
        $scope.filterbyDescription = function () {
            if ($scope.filterDescription) {
                var condition = [
               _filter.newCondition("Description", $scope.filterDescription, "contains")
                ];
                _filter.filter($scope.orders, condition, "and");
            } else {
                _filter.remove($scope.orders, "Description");
            }
        };
        $scope.filterbyName = function () {
            if ($scope.filterName) {
                var condition = [
               _filter.newCondition("Code", $scope.filterName, "contains")
                ];
                _filter.filter($scope.orders, condition, "and");
            } else {
                _filter.remove($scope.orders, "Code");
            }
        };


        $scope.changeView = function () {
            //var kvDropbox = {};
            kvDropbox.dateFilter = $scope.dateFilter.TimeRange;
            kvDropbox.viewtype = $scope.viewtype;
            kvDropbox.branchids = $scope.branchids;
            kvDropbox.orderStatus = $scope.orderStatus;
            if ($scope.dateFilter.TimeRange == 'other') {
                kvDropbox.fromDate = $scope.dateFilter.StartDate;
                kvDropbox.toDate = $scope.dateFilter.EndDate;
            }

            //localStorage['order_filter'] = JSON.stringify(kvDropbox);
            $scope.location.url('/' + $scope.viewtype + '?filter=' + JSON.stringify(kvDropbox));

        };

        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
            var condition = [];
            if ($scope.dateFilter.StartDate) {
                var todate = new Date($scope.dateFilter.EndDate);
                condition.push(_filter.newCondition("PurchaseDate", $scope.dateFilter.StartDate, "ge"));
                condition.push(_filter.newCondition("PurchaseDate", new Date(todate.DateAdd(1)), "lt"));
            }
            _filter.filter($scope.orders, condition, "and");
            //$("#otherCheck").prettyCheckable("check");
            $scope.dateFilter.TimeRange = 'other';
            //$scope.dateFilterPopup.close();
        };
        $scope.filterbyDate = function () {

            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else {
                //if ($scope.dateFilter.TimeRange == 'year') {
                //    _filter.remove($scope.orders, "PurchaseDate");
                //    return;
                //}
                var fnow = new Date();
                fnow = fnow.setHours(0, 0, 0, 0);
                var ffromDate = new Date(fnow);
                var defStartchange = $scope.dateFilter.TimeRange == 'thisweek' ? ffromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? ffromDate.GetfirstDayOfMonth() : ffromDate);
                $scope.dateFilter.StartDate = new Date(defStartchange);
                $scope.dateFilter.EndDate = new Date(fnow);
                $scope.lblOtherTimeFilter = null;
                var condition = [
                      _filter.newCondition("PurchaseDate", $scope.dateFilter.TimeRange, "eq")
                ];
                _filter.filter($scope.orders, condition, "or");
            }
        };
        $rootScope.$on("PrintBarCode", function (evt, data) {
            $scope.barcodePopup.openWindow(data.Id, "Purchase");
        });
        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            //remove any other filter 
            $scope.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
            $scope.refresh();
        }
    }])
.controller('PurchaseOrderUpdateCtrl', ['$scope', 'logger', 'kendofilter', 'PurchaseOrderResource', '$location', '$rootScope', '$routeParams', '$filter', 'kvPaymentDocType', 'kvConfirmBox', 'kvPaymentMethods', 'localCache', 'CommonServices', 'purchaseOrderStatus', 'purchaseOrderStatusMap', 'UserResource', 'BankAccountResource', '$compile', 'kvSession', '$timeout', 'ProductResource',
    function ($scope, _logger, _filter, _orders, $location, $rootScope, $routeParams, $filter, paymentDocType, _msgBox, _paymentMethods, _localCache, common, _orderStatus, _orderMap, _users, _bankAccounts, $compile, _session, $timeout, _product) {
        // $scope.payments = _paymentMethods;
        $scope.currentDate = new Date();
        $scope.orderMap = _orderMap;
        $scope.canAddProduct = $scope._p.has('Product_Create');
        $scope.customOptions = {
            // using {{angular}} templates:
            template: '<span><b>{{dataItem.Account}}</b><p>&nbsp;&nbsp;{{dataItem.Bank}}</p></span>',
            valueTemplate: '{{dataItem.Account}}'
        };
        $scope.goTolist = function () {
            $location.path("/" + viewUrl.purchaseOrder);
            refresh($scope);
        };
        function cancel() {
            _localCache.remove(keyStore, function () {
                $scope.goTolist();
            });
        };
        $scope.goBack = function () {
            if ($scope.cart.PurchaseOrderDetails.length > 0 || $scope.cart.Code) {
                _msgBox.confirm($scope._l.purchaseorder_SaveChange, $scope._l.purchaseorder_SaveChangeTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo);
                _msgBox.onConfirm = function () {
                    $scope.saveData(false);
                };
                _msgBox.onCancel = function () {
                    cancel();
                };
            } else {
                cancel();
            }
        };
        function loadBuyers() {
            var r = _users.getBuyers();
            r.$promise.then(function (result) {
                $scope.buyers = result;
                $scope.buyerOptions = {
                    dataSource: $scope.buyers.Data,
                    change: $scope.UpdateCart,
                    dataTextField: "GivenName",
                    dataValueField: "Id",
                    dataBound: function (e) {

                    }
                };
            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
        $scope.$on('refreshGridOnChangeBranch', loadBuyers);
        loadBuyers();
        $scope.import = function () {
            if ($scope._p.has('Product_PurchasePrice')) {
                $scope.importPopup.showPopup();
            }
            else {
                _msgBox.confirm($scope._l.purchaseOrderImportNotHasPerProduct_PurchasePrice, $scope._l.purchaseOrderImportNotHasPerProduct_PurchasePriceTitle, false, $scope._l.yes, $scope._l.no);
                _msgBox.onConfirm = function () {
                    $scope.importPopup.showPopup();
                };
            }
        };
        var voidSale = function (isvoidPayment) {
            if ($scope.cart && $scope.cart.Code) {
                _orders.delete({ Id: $scope.cart.Id, IsVoidPayment: isvoidPayment }, function (data) {
                    _localCache.remove(keyStore, function () {
                        _logger.success($filter("stringFormat")($scope._m.voidSaleSuccessfully, [data.Code]));
                        $scope.goTolist();
                    });

                }, function (err) {
                    _logger.error(getMessage(err));
                });
            } else {
                _localCache.remove(keyStore, function () {
                    //_logger.success(data.Code);
                    $scope.goTolist();
                });
            }

        };
        $scope.void = function (item) {

        };
        var itemId = $routeParams.id;
        if (!angular.isNumber(Number(itemId)) && itemId != 'new') {
            $scope.goTolist();
            _logger.error($scope._l.infomationInvalid);
        }
        var keyStore = $filter("stringFormat")("purchaseOrder_{0}_{1}_{2}", [$scope.currentBranch.Id, $scope.currentUser.id, itemId]);
        // Edit Purchase Order
        $scope.paymentMethods = _paymentMethods;
        initData();

        // Add Product to Cart
        $scope.addProduct = function (data) {
            if (data.LatestPurchasePrice == 0) {
                var r = _product.history({ productId: data.Id, DocumentType: 2 });
                r.$promise.then(function (result) {
                    data.LatestPurchasePrice = result.Total > 0 ? data.LatestPurchasePrice : data.Cost;
                    $scope.cart.addItem(data);
                });
            }
            else {
                $scope.cart.addItem(data);
            }
            // disable Import btn when manual import
            $scope.disableImportBtn = true;

        };
        // Supplier
        $scope.UpdateCart = function () {
            $scope.cart.updateValue();

            var ddl = $('#ddlBankAccount');
            var currentAcc = $scope.cart ? $scope.cart.Account : null;

            ddl.prop('title', currentAcc ? currentAcc.Bank : "");
        };
        $scope.ChangePrice = function (item) {
            $rootScope.$broadcast("adjustedPriceChangedOnItem", item);
            $scope.UpdateItemCart(item);
        };
        $scope.UpdateItemCart = function (item) {       
            $scope.cart.updateItemValue(item);
        };
        $scope.UpdatePurchaseDate = function () {
            $scope.cart.PurchaseDate = this.value();
            $scope.cart.updateValue();
        };
        $scope.removeItem = function (id) {
            $scope.cart.removeItem(id);
        };
        $scope.searchTermChanged = function () {
            search($scope.productSearchTerm);
        };
        function search(query) {
            var r = _product.autocomplete({ tearm: query, IncludeStock: true, ShowMasterUnitCost: true });
            r.$promise.then(function (result) {
                $scope.products = result;
                refresh($scope);

            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
        $scope.changePayment = function (type) {
            $scope.cart.paymentMedthod = type;
        };
        function hasError(entity) {
            var items = null;
            if ((!entity.PurchaseOrderDetails || entity.PurchaseOrderDetails.length == 0) && !entity.Id)
                return $scope._m.emptyOrder;
            items = entity.PurchaseOrderDetails;
            for (var i = 0 ; i < items.length ; i++) {
                var item = items[i];
                if (item.Quantity == "" || item.Quantity == undefined || item.Quantity == 0) {
                    var error = $scope._l.product + ' (' + item.ProductName + ') ' + $scope._l.emptyQuantity;
                    return error;
                }
            }
            return false;
        }
        
        $scope.saving = false;
        $scope.saveData = function (isComplete) {
            $("#LoadingPanel").show();
            $scope.saving = true;
            var err = hasError($scope.cart);
            if (!err || !isComplete) {
                if ($scope.cart.PayingAmount > 0) {
                    var payment = {
                        Amount: $scope.cart.PayingAmount,
                        Method: $scope.cart.paymentMethodObj ? $scope.cart.paymentMethodObj.Id : 'Cash',
                        AccountId: $scope.cart.Account.Id
                    };
                    $scope.cart.addPayment(payment);
                }
                //var saveobj = new Cart($scope.cart);
                $scope.cart.UserId = $scope.cart.User.Id;
                if (_session && _session.branch)
                    $scope.cart.BranchId = _session.branch.Id;

                _orders.save({ PurchaseOrder: $scope.cart, Complete: isComplete }, function (data) {
                    $scope.saving = true;
                    _localCache.remove(keyStore, function () {
                        $scope.saving = false;
                        $("#LoadingPanel").hide();
                        _logger.success($filter("stringFormat")($scope._m.updatedSuccess, [$scope._l.purchase, data.Code]));
                        $scope.goTolist();
                    });

                }, function (err) {
                    $("#LoadingPanel").hide();
                    $scope.saving = false;
                    _logger.error(getMessage(err));
                });
            }
            else {
                $("#LoadingPanel").hide();
                $scope.saving = false;
                _logger.error(err);
            }
        };
        $scope.setCurrentRow = function (e) {            
            if (!this.dataItem.OriginPrice) {
                this.dataItem.OriginPrice = this.dataItem.Price;
            }
            if (!this.dataItem.Discount) {
                this.dataItem.Discount = 0;
            }
            $scope.currentRow = this.dataItem;
        };

        function updateSerialNumbers(lst, idx, id) {

            var grid = $('#cartGrid').data('kendoGrid');
            if (grid && grid.dataSource) {
                var item = grid.dataSource.data()[idx];
                if (item) {
                    item.Quantity = lst.length;
                    $scope.cart.updateItemValue(item);
                }
            }

            var detail = $scope.cart.PurchaseOrderDetails[idx];
            detail.SerialNumbers = "";
            for (var k = 0; k < lst.length ; k++) {
                detail.SerialNumbers += "," + lst[k].SerialNumber;
            }
            if (detail.SerialNumbers.length > 0)
                detail.SerialNumbers = detail.SerialNumbers.substring(1);

            _localCache.set(keyStore, JSON.stringify($scope.cart));

            //
            $scope["serialModel" + id] = detail.SerialNumbers.split(",");
        }

        $scope.tagAdded = function (tag, idx, id) {

            var lst = $scope["tags" + id];
            var serialList = [];
            for (var s = 0; s < lst.length; s++) {
                serialList.push({ "SerialNumber": lst[s].text });
            }
            updateSerialNumbers(serialList, idx, id);

            // add to datasource for popup
            $scope["popupDS" + id] = $scope["popupDS" + id] || [];
            var newitem = { "SerialNumber": tag.text };
            $scope["popupDS" + id].push(newitem);

            refresh($scope);
        };

        $scope.tagRemoved = function (tag, idx, id) {
            //
            var lst = $scope["tags" + id];
            var serialList = [];
            for (var s = 0; s < lst.length; s++) {
                serialList.push({ "SerialNumber": lst[s].text });
            }
            updateSerialNumbers(serialList, idx, id);
            refresh($scope);
        };

        $scope.showpopup = function (idx, id) {
            var model = "serialModel" + id;
            var source = $scope["popupDS" + id];

            $scope["serialpopup"].showWindow(model, source, function (lst) {
                updateSerialNumbers(lst, idx, id);

                var serialList = [];
                for (var s = 0; s < lst.length; s++) {
                    serialList.push({ "text": lst[s].SerialNumber });
                }
                $scope["tags" + id] = serialList;
            });
        };
        $scope.viewPrice = $scope._p.has('Product_PurchasePrice');
        $scope.record = 0;
        var colspan = 3;
        var columns = [
            {
                title: "",
                headerAttributes: { "class": "tdDel" },
                attributes: { "class": "txtC tdDel" },
                template: "<span class='row-number-#=ProductId#'></span>"
            },
             {
            field: "ProductId",
            title: " ",
            headerAttributes: { "class": "tdDel" },
            attributes: { "class": "txtC tdDel" },
            template: "<a title=\"Xóa\"  ng-click=\"removeItem(dataItem)\" class=\"icon del\" ></a>"
            },
            { field: "Product.Code", title: $scope._l.product_Code, headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, format: "{0:c}" },
            {
                field: "Product.Name",
                title: $scope._l.product_Name,
                headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" },
                template: '#=Product.Name#<a class="txtN txtI dpb fs11 txtGray" href="javascript:void(0)" title="Cập nhật ghi chú" kv-popup-anchor="desTemplate" kv-placement="bottom" ng-click="setCurrentRow($event)"><span class="dpib veaM">{{dataItem.Description?dataItem.Description:"Ghi chú..."}}</span><span class="icon edit"><i class="fa fa-pencil-square-o"></i></span></a>'
            },
            //{
            //    field: "Discount",
            //    title: $scope._l.print_ProductDiscount,
            //    attributes: { "class": "txtR tdDateTime" },
            //    headerAttributes: { "class": "txtR tdDateTime" },
            //    template: "<input type=\"text\" kv-auto-numeric=\"{mDec:0}\" ng-model=\"dataItem.Price\" ng-change=\"UpdateItemCart(dataItem)\" class=\"iptR w100 txtR\" />"
            //},
            //{
            //    field: "Price",
            //    title: $scope._l.price,
            //    attributes: { "class": "txtR tdDateTime" },
            //    headerAttributes: { "class": "txtR tdDateTime" },
            //    template: "<input type=\"text\" kv-auto-numeric=\"{mDec:0}\" ng-model=\"dataItem.Price\" ng-change=\"UpdateItemCart(dataItem)\" class=\"iptR w100 txtR\" />"
            //},
            {
                field: "Quantity",
                title: $scope._l.quantity,
                attributes: { "class": "tdSLC txtC" },
                headerAttributes: { "class": "tdSLC txtC" },
                template: "<input ng-disabled='dataItem.isSerialProduct' type=\"text\" kv-auto-numeric=\"{isQuantity:!dataItem.isSerialProduct,vMin:0}\" ng-class=\"dataItem.isSerialProduct?'w100':''\" ng-change=\"UpdateItemCart(dataItem)\" class=\"iptR txtR iptQty veaM\" ng-model=\"dataItem.Quantity\" />"
            }
        ];
        //var colspans = 3;
        if ($scope.viewPrice) {
            colspan += 3;
            columns.splice(4, 0, {
                field: "Price",
                title: $scope._l.price,
                attributes: { "class": "txtR tdDateTime" },
                headerAttributes: { "class": "txtR tdDateTime" },
                template: "<input type=\"text\" kv-auto-numeric=\"{mDec:0}\" ng-model=\"dataItem.Price\" ng-change=\"ChangePrice(dataItem)\" class=\"iptR w100 txtR\" />"
            });
            columns.splice(5, 0, {
                field: "Discount",
                title: $scope._l.discount,
                attributes: { "class": "txtR tdDateTime" },
                headerAttributes: { "class": "txtR tdDateTime" },
                template: " <div class=\"proPrice posR\"><button class='ipt iptR txtR w100' kv-popup-anchor='productPrice'" +
                                " kv-placement='right' ng-click='setCurrentRow($event)'>{{ dataItem.Discount ? dataItem.Discount : 0 | formatCurrency }}</button>" +
                          "</div>"
            });
            columns.splice(7, 0, {
                field: "Quantity",
                title: $scope._l.subTotalDetail,
                attributes: { "class": "tdTotal" },
                headerAttributes: { "class": "tdTotal" },
                template: "{{ ( (dataItem.Price - (dataItem.Discount ? dataItem.Discount : 0)) * dataItem.Quantity)|number:0}}"
            });
        }
        $scope.cartGridoption = {
            dataSource: new kendo.data.DataSource({
                autoSync: false,
                data: $scope.cart.PurchaseOrderDetails,
                schema: {
                    model: {
                        fields: {
                            ProductId: { type: "number" },
                            ProductName: { type: "string" },
                            Price: { type: "number" },
                            Quantity: { type: "number" },
                            Description: { type: "string" },
                        }
                    }
                },
                pageSize: 10
            }),
            dataBound: function (e) {
                $scope.emptyGridFix(e);
                var $this = e.sender;

                // add serial input
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, row) {
                    //console.log(row.Quantity);
                    var pageSize = e.sender.dataSource.pageSize();
                    var pageForRow = 1 + Math.floor(i / pageSize);
                    var currentPage = e.sender.dataSource.page();

                    if (row.Product.IsLotSerialControl && pageForRow == currentPage) {
                        //var popup = '<kv-enter-serial-popup kv-name="serialpopup' + row.ProductId + '" kv-model="serialModel' + row.ProductId + '" kv-source="popupDS' + row.ProductId + '"></kv-enter-serial-popup>';
                        var tagInput = angular.element($('<tr class="k-master-serial"><td></td><td colspan="' + colspan + '">' +
                                                            '<tags-input placeholder="Nhập số serial và Enter" ng-model="tags' + row.ProductId + '"' +
                                                                  'on-tag-added="tagAdded($tag,' + i + ',' + row.ProductId + ')" on-tag-removed="tagRemoved($tag,' + i + ',' + row.ProductId + ')"></tags-input>'
                                                                   +
                                                          '</td><td class="txtR"><a ng-click="showpopup(' + i + ',' + row.ProductId + ')" class="viewmore">' + $scope._l.viewmore + '</a></td></tr>'));

                        if (row.Quantity == 0) {
                            delete $scope["tags" + row.ProductId];
                            delete $scope["serialModel" + row.ProductId];
                        }

                        var el = $compile(tagInput)($scope);
                        if (row.Product.IsLotSerialControl) {
                            $timeout(function () {
                                $('tr[data-uid="' + row.uid + '"]').after(tagInput).addClass("k-serial");
                            });
                        }
                    }

                    //
                    
                    var rowLabel = $this.wrapper.find(".row-number-" + row.ProductId);
                    $(rowLabel).html(i + 1);
                });
            },
            dataBinding: function (e) {
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, t) {
                    if (t.Product.IsLotSerialControl)
                        t.isSerialProduct = true;
                });

            },
            pageable: true,
            columns: columns

        };

        //$scope.cartGridoption = {
        //    dataSource: new kendo.data.DataSource({
        //        autoSync: false,
        //        data: $scope.cart.PurchaseOrderDetails,
        //        schema: {
        //            model: {
        //                fields: {
        //                    ProductId: { type: "number" },
        //                    ProductName: { type: "string" },
        //                    Price: { type: "number" },
        //                    Quantity: { type: "number" },
        //                    Description: { type: "string" },
        //                }
        //            }
        //        },
        //        pageSize: 10
        //    }),
        //    pageable: true,
        //    //rowTemplate: kendo.template($("#rowTemplate").html()),

        //});

        //if ($scope.viewPrice) {
        //    columns.splice(2, 0, {
        //        field: "Price",
        //        title: $scope._l.price,
        //        attributes: { "class": "txtC tdDate" },
        //        headerAttributes: { "class": "txtC tdDate" },
        //        template: " <div class=\"proPrice posR\"><input type=\"text\" kv-auto-numeric=\"{mDec:0}\" ng-model=\"dataItem.Price\" ng-change=\"UpdateItemCart(dataItem)\" class=\"iptR tdTime txtR\" /></div>"
        //    });
        //    columns.splice(4, 0, {
        //        field: "Quantity",
        //        title: $scope._l.subTotalDetail,
        //        attributes: { "class": "tdTotal" },
        //        headerAttributes: { "class": "tdTotal" },
        //        template: "{{(dataItem.Price * dataItem.Quantity)|number:0}}"
        //    });
        //}


        // Init Data
        function initSerialTags(items) {
            var serialList = [];
            var sourceLst = [];
            for (var idx = 0; idx < items.length; idx++) {
                var itm = items[idx];
                if (itm.SerialNumbers) {
                    serialList = [];
                    sourceLst = [];

                    var lst = itm.SerialNumbers.split(",");
                    for (var s = 0; s < lst.length; s++) {
                        serialList.push({ "text": lst[s] });
                        sourceLst.push({ "SerialNumber": lst[s] });
                    }
                    $scope["tags" + itm.ProductId] = serialList;
                    $scope["serialModel" + itm.ProductId] = itm.SerialNumbers.split(",");
                    $scope["popupDS" + itm.ProductId] = sourceLst;

                }
            }
        }

        function initData() {
            $scope.cart = new Cart();
            _localCache.get(keyStore, function (data) {
                var obj = !data ? data : JSON.parse(data);
                if (!isNaN(Number(itemId))) {
                    _orders.get({ purchaseorderId: itemId, Includes: ["PurchaseOrderDetails", "Supplier", "PaidAmount", "Branch", "User"] }, function (d) {
                        if (!obj || (!obj.ModifiedDate && !d.ModifiedDate && obj.Code != d.Code) || (obj.ModifiedDate && kendo.parseDate(obj.ModifiedDate).compareDateTime(kendo.parseDate(d.ModifiedDate)) != 0)) {
                            obj = d;
                            _orders.getDetails({ purchaseorderId: itemId, Includes: ["Product"] }, function (detail) {
                                //console.log(detail);
                                obj.PurchaseOrderDetails = detail.Data;
                                $scope.cart = new Cart(obj);
                                refresh($scope);

                                initSerialTags($scope.cart.PurchaseOrderDetails);
                                if ($scope.cartGridoption) {
                                    $scope.cartGridoption.dataSource.data($scope.cart.PurchaseOrderDetails);
                                }
                            },
                            function (err) {
                                _logger.error(getMessage(err));
                            });
                        } else {
                            _orders.getDetails({ purchaseorderId: itemId, Includes: ["Product"] }, function (detail) {
                                d.PurchaseOrderDetails = detail.Data;
                                // $scope.cart = new Cart(obj);
                                _msgBox.confirm($scope._l.purchaseorder_SaveChangeServer, $scope._l.purchaseorder_SaveChangeServerTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo, true);
                                _msgBox.onConfirm = function () {
                                    $scope.cart = new Cart(obj);
                                    refresh($scope);

                                    initSerialTags($scope.cart.PurchaseOrderDetails);
                                    if ($scope.cartGridoption) {
                                        $scope.cartGridoption.dataSource.data($scope.cart.PurchaseOrderDetails);
                                    }
                                };
                                _msgBox.onCancel = function () {
                                    $scope.cart = new Cart(d);
                                    refresh($scope);
                                    initSerialTags($scope.cart.PurchaseOrderDetails);

                                    if ($scope.cartGridoption) {
                                        $scope.cartGridoption.dataSource.data($scope.cart.PurchaseOrderDetails);
                                    }
                                };
                            });
                        }

                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                } else {
                    //        // Add new Purchase Order
                    if (obj && obj.PurchaseOrderDetails.length > 0) {
                        _msgBox.confirm($scope._l.purchaseorder_SaveChangeServer, $scope._l.purchaseorder_SaveChangeServerCreateTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo, true);
                        _msgBox.onConfirm = function () {
                            $scope.cart = new Cart(obj);
                            $scope.cart.updateValue();
                            refresh($scope);

                            initSerialTags($scope.cart.PurchaseOrderDetails);
                            if ($scope.cartGridoption) {
                                $scope.cartGridoption.dataSource.data($scope.cart.PurchaseOrderDetails);
                            }
                        };
                    }
                }
            });

        }
        function Cart(data) {
            this.Code = data ? data.Code : undefined;
            this.PurchaseOrderDetails = (data && data.PurchaseOrderDetails) ? data.PurchaseOrderDetails : [];
            this.UserId = data ? data.UserId : $scope.currentUser.id;
            this.CompareUserId = data ? data.UserId : $scope.currentUser.id;
            this.User = data && data.User ? data.User : $scope.currentUser;
            this.PurchaseDate = (data && data.PurchaseDate) ? kendo.parseDate(data.PurchaseDate) : undefined;
            this.ComparePurchaseDate = (data && data.PurchaseDate) ? kendo.parseDate(data.PurchaseDate) : undefined;
            this.ModifiedDate = (data && data.ModifiedDate) ? kendo.parseDate(data.ModifiedDate) : undefined;
            this.Description = data ? data.Description : '';
            this.Supplier = data ? data.Supplier : undefined;
            this.SupplierId = data ? data.SupplierId : undefined;
            this.CompareSupplierId = data ? data.SupplierId : 0;
            this.SubTotal = data ? data.SubTotal : 0;
            this.Branch = data ? data.Branch : $scope.currentBranch;
            this.Status = data ? data.Status : _orderMap.Draft;
            this.StatusValue = _orderStatus[this.Status];
            this.CompareStatusValue = _orderStatus[this.Status];
            this.Discount = data ? data.Discount : 0;
            this.CompareDiscount = data ? data.Discount : 0;
            this.DiscountRatio = data ? data.DiscountRatio : 0;
            this.Id = data ? data.Id : 0;
            this.Account = data && data.Account ? data.Account : {};
            this.Total = data ? data.Total : 0;

            //this.BalanceDue = data ? data.BalanceDue : 0;
            this.PaidAmount = data ? data.PaidAmount : 0;
            this.PayingAmount = data && data.PayingAmount ? data.PayingAmount : 0;
            this.ChangeAmount = data ? data.ChangeAmount : 0;
            this.paymentMethod = data && data.paymentMethod ? data.paymentMethod : 'Cash';
            this.BalanceDue = this.Total - this.PaidAmount;
            this.ChangeAmount = 0 - (this.BalanceDue - this.PayingAmount);
            var cart = this;
            this.paymentMethodObj = $scope.paymentMethods.kvfind(cart, function (a, b) {
                return a.Id == b.paymentMethod;
            });
            // this.updateValue();

        }
        function cartItem(product) {
            this.ProductId = product.Id;
            this.Product = { Name: product.Name, Code: product.Code, IsLotSerialControl: product.IsLotSerialControl };
            this.ProductName = product.Name;
            this.Description = "";
            this.Price = product.LatestPurchasePrice;// == 0 ? product.Cost : product.LatestPurchasePrice;
            this.priceAfterDiscount = this.Price;
            if (product.IsLotSerialControl)
                this.Quantity = 0;
            else
                this.Quantity = 1;
            // this.CreatedDate = new Date();
        }

        Cart.prototype.updateItemValue = function (item) {
            var index = -1;
            if (item) {
                for (var i = 0; i < this.PurchaseOrderDetails.length; i++) {
                    if (this.PurchaseOrderDetails[i].ProductId == item.ProductId) {
                        index = i;
                        break;
                    }
                }
            }

            if (index > -1) {
                this.PurchaseOrderDetails[index] = item;
            }
            this.updateValue();
        };
        Cart.prototype.updateValue = function () {
            this.SubTotal = 0;
            this.TotalQuantity = 0;
            if (this.PurchaseOrderDetails) {
                for (var i = 0 ; i < this.PurchaseOrderDetails.length ; i++) {
                    this.SubTotal += (this.PurchaseOrderDetails[i].Price - (this.PurchaseOrderDetails[i].Discount ? this.PurchaseOrderDetails[i].Discount : 0)) * this.PurchaseOrderDetails[i].Quantity;
                    this.TotalQuantity += this.PurchaseOrderDetails[i].Quantity;
                }
            }
            var discount = ((!isNaN(this.Discount)) ? this.Discount : 0);
            if (this.DiscountRatio) {
                this.Discount = (this.SubTotal * this.DiscountRatio) / 100;
                discount = this.Discount;
            }
            // re-calculate allocation discount for each item in order
            if (this.PurchaseOrderDetails) {
                for (var i = 0 ; i < this.PurchaseOrderDetails.length ; i++) {
                    this.PurchaseOrderDetails[i].Allocation = Math.round((discount * ((this.PurchaseOrderDetails[i].Price - (this.PurchaseOrderDetails[i].Discount ? this.PurchaseOrderDetails[i].Discount : 0)) * this.PurchaseOrderDetails[i].Quantity)) / (this.SubTotal * this.PurchaseOrderDetails[i].Quantity));
                }
            }
            this.Total = this.SubTotal - discount;
            this.PayingAmount = this.PayingAmount ? this.PayingAmount : 0;
            this.BalanceDue = this.Total - this.PaidAmount;

            this.ChangeAmount = 0 - (this.BalanceDue - this.PayingAmount);
            refresh($scope);
            //localStorage[keyStore] = JSON.stringify(this);

            // $("#gridCart").data().kendoGrid.refresh();
            var obj = JSON.stringify(this);
            _localCache.set(keyStore, obj);
        };
        Cart.prototype.removeItem = function (item) {
            for (var i = 0; i < this.PurchaseOrderDetails.length ; i++) {
                if (this.PurchaseOrderDetails[i].ProductId == item.ProductId) {
                    this.PurchaseOrderDetails.splice(i, 1);
                    break;
                }
            }

            this.updateValue();
            if ($scope.cartGridoption) {
                $scope.cartGridoption.dataSource.data(this.PurchaseOrderDetails);
            }
            // Re enable Import btn
            if (this.PurchaseOrderDetails.length == 0) {
                $scope.disableImportBtn = false;
            }
        };
        Cart.prototype.addDetail = function (detail) {
            var found = this.PurchaseOrderDetails.filter(function (obj) {
                return obj.ProductId == detail.ProductId;
            });
            if (found.length > 0) {

                found[0].Quantity += detail.Quantity;
                //re-position to top 
                // this.PurchaseOrderDetails.splice(i, 1);
                //  this.PurchaseOrderDetails.unshift(found);
            } else {
                this.PurchaseOrderDetails.push(detail);
            }

            this.updateValue();
            return found;
        };
        Cart.prototype.addItem = function (product) {
            var found = null;
            var item;
            for (var i = 0 ; i < this.PurchaseOrderDetails.length; i++) {
                item = this.PurchaseOrderDetails[i];
                if (item.ProductId == product.Id) {
                    if (!product.IsLotSerialControl)
                        item.Quantity++;

                    found = item;
                    //re-position to top 
                    this.PurchaseOrderDetails.splice(i, 1);
                    this.PurchaseOrderDetails.unshift(found);
                    break;
                }
            }
            if (!found) {
                item = new cartItem(product);
                this.PurchaseOrderDetails.unshift(item);
                found = item;
            }

            this.updateValue();
            if ($scope.cartGridoption) {
                $scope.cartGridoption.dataSource.data(this.PurchaseOrderDetails);
            }
            return found;
        };
        Cart.prototype.addPayment = function (payment) {
            this.PurchasePayments = this.PurchasePayments ? this.PurchasePayments : [];
            this.PurchasePayments.push(payment);
        };

        _bankAccounts.get({}, function (accounts) {
            accounts.Data.unshift({ Account: '--Chọn--', Id: null });
            $scope.bankAccounts = accounts.Data;
        });
        $scope.selectedDesChanged = function (item) {
            $scope.selectedItem = item;
            //check discount type 
        };
        $scope.QuickAddProduct = function () {
            $scope.addproductPopup.openWindow();
        };
    }
]).controller('PurchaseOrderSupplierCtrl', ['$scope', '$rootScope', 'logger', 'SupplierResource', 'PrivilegeHelper', function ($scope, $rootScope, _logger, _suppliersvc, _p) {
    function search(query) {
        var r = _suppliersvc.autocomplete({ tearm: query });
        r.$promise.then(function (result) {
            $scope.suppliers = result;
            refresh($scope);

        }, function (err) {

        });

    }
    $scope.searchTermChanged = function () {
        search($scope.supplierSearchTerm);
    };
    $scope.allowAdd = _p.has("Supplier_Create");
    $scope.allowUpdate = _p.has("Supplier_Update");
    $scope.addSupplier = function () {
        $rootScope.$broadcast(app.events.showSupplierForm, null);
    };
    $scope.removeSupplier = function () {
        $scope.cart.Supplier = null;
        $scope.cart.SupplierId = null;
        $scope.cart.updateValue();
    },
    $scope.selectSupplier = function (data) {
        $scope.cart.Supplier = data;
        $scope.cart.SupplierId = data.Id;
        $scope.cart.updateValue();
    };
    $scope.editSupplier = function () {

        $rootScope.$broadcast(app.events.showSupplierForm, $scope.cart.Supplier);

    };

}]).controller('SupplierFormPopupCtrl', ['$scope', 'SupplierResource', 'logger',
function ($scope, _supplierService, _logger) {

    var openWindow = function (supplier) {

        var listeners = {
            onSave: function (data) {
                if ($scope.cart) {
                    $scope.cart.Supplier = data;
                    $scope.cart.SupplierId = data.Id;
                    $scope.cart.updateValue();
                }
                if ($scope.suppliers) {
                    $scope.suppliers.read();
                }
                $scope.supplierWindow.close();
            },
            onSaveError: function (err) {
                _logger.error(err);
            },
            onCancel: function () {
                $scope.supplierWindow.close();
            }
        };
        if (!supplier)
            supplier = {};
        else {
            $scope.source = supplier;
            //make a copy
            supplier = angular.copy(supplier);
        }


        $scope.supplierWindow.title($scope._l.supplier);

        $scope.supplierForm.setListeners(listeners);
        $scope.supplierForm.setSupplier(supplier);
        $scope.supplierWindow.wrapper.addClass("k-window-poup k-window-fix k-window-supplieriorder");
        $scope.supplierWindow.center().open();
        refresh($scope);
    };
    $scope.$on(app.events.showSupplierForm, function (evt, data) {
        openWindow(data);
        $scope.supplierWindow.onClose = function (e) {
            if ($scope.supplierForm) {
                $scope.supplierForm.clearListener();
            }
        };
    });
}])
.controller('DiscountCtrl', ['$scope', 'DiscountTypes', function ($scope, discountTypes) {
    $scope.discountTypes = discountTypes;
    $scope.discountOnOrderChanged = function () {
        if ($scope.DiscountType != discountTypes.percent) {
            if ($scope.DiscountValue > $scope.cart.SubTotal)
                $scope.DiscountValue = $scope.cart.SubTotal;

            $scope.cart.Discount = $scope.DiscountValue;
        }
        else {
            if ($scope.DiscountValue > 100)
                $scope.DiscountValue = 100;

            $scope.cart.DiscountRatio = $scope.DiscountValue;
            $scope.cart.Discount = ($scope.cart.SubTotal / 100 * $scope.DiscountValue).toFixed(0);
        }
        $scope.cart.updateValue();
    };

    $scope.discountTypeChanged = function (type) {
        if ($scope.cart) {
            if (type == discountTypes.percent) {
                if ($scope.cart.SubTotal != 0)
                    $scope.cart.DiscountRatio = $scope.cart.Discount / $scope.cart.SubTotal * 100;
                else
                    $scope.cart.DiscountRatio = 0;
                $scope.DiscountValue = $scope.cart.DiscountRatio;
            } else {
                if ($scope.cart.DiscountRatio)
                    $scope.cart.Discount = ($scope.cart.DiscountRatio / 100 * $scope.cart.SubTotal).toFixed(0);
                else
                    $scope.cart.Discount = 0;
                $scope.DiscountValue = $scope.cart.Discount;
                $scope.cart.DiscountRatio = null;
            }
            if ($scope.cart && ($scope.cart.DiscountRatio || type == discountTypes.percent)) {
                $scope.DiscountValue = $scope.cart.DiscountRatio;
                $scope.DiscountType = discountTypes.percent;
            } else {
                $scope.DiscountValue = $scope.cart.Discount;
                $scope.DiscountType = discountTypes.money;
            }
            $scope.cart.updateValue();
        };

    };
    $scope.$watch("cart", function (val) {
        if (val) {
            if (val.DiscountRatio) {
                $scope.DiscountValue = val.DiscountRatio;
                $scope.DiscountType = discountTypes.percent;
            } else {
                $scope.DiscountValue = val ? val.Discount : 0;
                $scope.DiscountType = discountTypes.money;
            }
        }
    });
}])
.directive('purchaseOrderForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'UserResource', 'PurchaseOrderResource', 'purchaseOrderStatusMap', 'PrivilegeHelper', '$compile', '$timeout',
    function (_session, _l, emptyGridFix, _usersvc, _orders, _status, _p, $compile, $timeout) {
        return {
            restrict: 'E',
            scope: { dataSelectedProduct: '=kvDataSelectedProduct', dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {
                scope.hasvoidPayment = _p.has('PurchasePayment_Delete');
                scope.hasUpdatePayment = _p.has('PurchasePayment_Update');
                function loadDetail() {
                    scope.sellers = _usersvc.getBuyers({ BranchId: scope.dataItem.BranchId });
                    scope.disabled = (scope.dataItem.StatusValue == _status.Void) || scope.noteditable || !(_p.has('PurchaseOrder_Update') || (_p.has('PurchaseOrder_Create') && scope.dataItem.StatusValue == _status.New));
                    scope.viewPurchasePrice = scope.dataItem.ViewPrice;
                    scope.hasVoid = _p.has('PurchaseOrder_Delete') && (scope.dataItem.StatusValue != _status.Void);
                    scope.hasReturn = _p.has('PurchaseReturn_Create') && (scope.dataItem.StatusValue == _status.Finalized);
                    scope.hasFinish = (scope.dataItem.StatusValue != _status.Finalized && scope.dataItem.StatusValue != _status.Void) && (_p.has('PurchaseOrder_Update') || _p.has('PurchaseOrder_Create'));

                    var orderDetaildb = new kendo.data.DataSource(
                    {
                        type: "odata",
                        autoSync: true,
                        transport: {
                            read: {
                                url: "/api/purchaseOrders/" + scope.dataItem.Id + "/details?format=json&Includes=Product",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        change: function (ob) {
                            scope.dataItem.PurchaseOrderDetails = ob.items;
                        },
                        pageSize: pager.defaultList,
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            parse: function (response) {
                                scope.dataItem.TotalProductType = response.Total;
                                //do not display negative discount value 
                                angular.forEach(response.Data, function (r) {
                                    r.Description = r.Description ? r.Description : '';
                                    // get product name without unit in brackets
                                    r.ProductNameNoUnit = r.ProductName.replace(/ *\([^)]*\) */g, "");
                                });
                                return response;
                            }
                        }
                    });
                    scope.showpopup = function (id) {
                        scope["serialpopup" + id].showWindow();
                    }
                    //viewPurchasePrice
                    var subColumn = [
                            { field: "Product.Code", title: _l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                            { field: "ProductName", title: _l.product_Name, template: '#=ProductName#<span class="txtN txtI fs11 dpb txtGray">#=Description#</span>', headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },

                            { field: "Quantity", title: _l.quantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtC" }, attributes: { "class": "tdSLB txtC" } }
                            //{ field: "Discount", title: $scope._l.discount, format: "{0:n0}", headerAttributes: { "class": "tdPhone txtC" }, attributes: { "class": "tdPhone txtC" } },

                    ];
                    var colspans = 3;
                    if (scope.viewPurchasePrice) {
                        colspans += 2;
                        subColumn.splice(2, 0, { field: "Price", title: _l.price, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } });
                        subColumn.splice(4, 0, { field: "Discount", title: _l.discount, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } });
                        subColumn.splice(5, 0, { field: "SubTotal", title: _l.subTotalDetail, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal txtB" } });
                    }

                    elem.find("#tblsub").empty();
                    elem.find("#tblsub").kendoGrid({
                        dataSource: orderDetaildb,
                        pageable: { "pageSize": 10, "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": _l.pagerInfo + _l.invenroty_Text } },
                        dataBinding: emptyGridFix,
                        columns: subColumn,

                        dataBound: function (e) {
                            // add serial input
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    scope["serials" + row.Id] = row.SerialNumbers.split(",");
                                    scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",");

                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    if (row.SerialNumbers.split(",").length > maxShow)
                                        scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",").slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + scope._l.viewmore + '</a><kv-view-serial-popup kv-name="serialpopup' + row.Id + '" kv-source="serials' + row.Id + '"></kv-view-serial-popup>';
                                    var tags = angular.element($('<tr class="row-serial"><td colspan="' + colspans + '" ><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag}}</li></ul>' + popup + '</td></tr>'));
                                    var el = $compile(tags)(scope);
                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }

                                if (scope.dataSelectedProduct) {
                                    for (var i = 0; i < scope.dataSelectedProduct.length; i++) {
                                        if (row.Product.Id == scope.dataSelectedProduct[i]) {
                                            $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                        }
                                    }
                                }
                            });                            
                            if ($('tr').hasClass('tr-currentSelected')) {
                                e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                            }                            
                        },
                    });
                }

                if (scope.dataItem) {
                    loadDetail();
                } else {
                    scope.$watch('dataItem.Id', function (val) {
                        if (val) {
                            //scope.itemData.Id = val;
                            loadDetail();
                        }
                    });
                }
            },
            controller: [
                '$scope', '$rootScope', 'kvMessages', 'PurchaseOrderResource', 'logger', '$filter', 'kvConfirmBox', 'kvExportToExcel', 'kvPrinter', 'purchaseOrderStatusMap', 'printTypeMap', '$location', 'settings',
                function ($scope, $rootScope, _m, _ordersvc, _logger, $filter, _msgbox, _export, _print, _map, _printTypeMap, $location, _setting) {
                    $scope._l = _l;
                    $scope.viewUrl = viewUrl;
                    $scope.statusMap = _map;
                    $scope.settings = _setting;
                   
                    var voidSale = function (isvoidPayment) {


                        _ordersvc.delete({ Id: $scope.dataItem.Id, IsVoidPayment: isvoidPayment, CompareStatus: $scope.dataItem.StatusValue }, function (data) {
                            _logger.success($filter("stringFormat")(_m.purchaseorder_MsgDelSuccessfully, [data.Code]));
                            execCb($scope.onSave, $scope.dataItem);

                        }, function (err) {
                            _logger.error(getMessage(err));
                        });


                    };
                    $scope.voidOrder = function (item) {

                        var ivmsg = _msgbox.confirm($filter("stringFormat")($scope._l.purchaseorder_MsgDel, [item.Code]), $scope._l.titleVoidPurchaseOrder, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        ivmsg.confirm = function () {
                            if (item.PaidAmount && $scope.hasvoidPayment) {
                                var pmmsg = _msgbox.confirm($scope._l.invoice_MsgDelPurchaseOrder, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                                pmmsg.confirm = function () {
                                    voidSale(true);
                                };
                                pmmsg.cancel = function () {
                                    voidSale(false);
                                };
                            } else {
                                voidSale(false);
                            }
                        };


                    };
                    $scope.edit = function () {
                        $location.path("/" + viewUrl.purchaseOrder + "/" + $scope.dataItem.Id);
                    };
                    $scope.return = function () {
                        $location.path("/" + viewUrl.purchaseReturnList + "/" + $scope.dataItem.Id);
                    };
                    $scope.finishOrder = function () {
                        _ordersvc.save({ PurchaseOrder: { Id: $scope.dataItem.Id }, Complete: true }, function (data) {
                            _logger.success($filter("stringFormat")(_m.orderCompleted, [data.Code]));
                            execCb($scope.onSave, $scope.dataItem);
                        }, function (err) {
                            _logger.error(getMessage(err));
                        });
                    };
                    $scope.exportDetail = function () {
                        var id = $scope.dataItem.Id;
                        var type = "PurchaseOrderDetail";
                        var fileName = "ChiTietNhapHang_" + $scope.dataItem.Code.replace(/\>/g, ' ');
                        var data = { req: id };
                        _export.toExcel(type, fileName, data);
                    };
                    $scope.printContent = function () {
                        // $scope.dataItem.Discount = $scope.dataItem.Discount ? $scope.dataItem.Discount : 0;
                        _orders.getDetails({ purchaseorderId: $scope.dataItem.Id, Includes: ["Product"] }, function (detail) {
                            for (var i = 0; i < detail.Data.length; i++) {
                                // get product name without unit in brackets
                                detail.Data[i].ProductNameNoUnit = detail.Data[i].ProductName.replace(/ *\([^)]*\) */g, "");
                            }
                            $scope.dataItem.PurchaseOrderDetails = detail.Data;
                            $scope.dataItem.retailer = _session.retailer;
                            //_print.printfromtype("PurchaseOrder", $scope.dataItem);
                            _print.printfromtype(_printTypeMap.PurchaseOrder, $scope.dataItem);
                        }, function () {

                        });

                    };
                    $scope.update = function () {
                        if ($scope.dataItem.PaidAmount && $scope.hasUpdatePayment) {
                            var savebox = _msgbox.confirm(_l.msgWarningUpdate, _l.titleUpdateInvoice);
                            savebox.confirm = function () {
                                save(true);
                            };
                            savebox.cancel = function () {
                                save(false);
                            };
                        } else {
                            save(false);
                        }
                    };
                    $scope.PrintProduct = function (data) {
                        $rootScope.$broadcast("PrintBarCode", data);
                    };
                    function save(isUpdatePayment) {
                        var obj = $scope.dataItem;
                        obj.Status = obj.StatusValue;
                        if (obj.PurchaseOrderDetails && obj.PurchaseDate > new Date("2016-03-09")) {
                                for (var i = 0 ; i < obj.PurchaseOrderDetails.length ; i++) {
                                    obj.PurchaseOrderDetails[i].Allocation = Math.round((obj.Discount * ((obj.PurchaseOrderDetails[i].Price - (obj.PurchaseOrderDetails[i].Discount ? obj.PurchaseOrderDetails[i].Discount : 0)) * obj.PurchaseOrderDetails[i].Quantity)) / (obj.SubTotal * obj.PurchaseOrderDetails[i].Quantity));
                                }
                            }
                        var r = _ordersvc.save({ PurchaseOrder: obj, ListUpdate: true, IsUpdatePayment: isUpdatePayment });
                        r.$promise.then(callbackSuccess, callbackFail);
                    }

                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.purchase, data.Code]));
                        execCb($scope.onSave, $scope.dataItem);
                    }

                }
            ],
            templateUrl: _session.partialPath('purchaseorder-form.html')
        };
    }])
.directive('kvPurchaseOrderPopup', ['kvSession', '$rootScope', 'logger', 'UserResource', 'PurchaseOrderResource', 'kvConfirmBox', '$filter', 'kvLabel', 'kvMessages', 'purchaseOrderStatus', '$location',
    function (_session, $rootScope, _logger, _usersvc, _invoicesvc, _msgbox, $filter, _l, _m, _status, $location) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;

                    $scope.window = {
                        openDetail: function (data) {
                            $scope.wdPurchaseOrder.title($filter("stringFormat")("{0}", [_l.purchaseorder_Unit]));
                            $scope.dataItem = data;
                            $scope.wdPurchaseOrder.wrapper.addClass("k-window-poup k-window-fix k-window-purchaseOrderDetail");
                            $scope.wdPurchaseOrder.center().open();

                            //refresh($scope);
                        }
                    };

                    $scope.print = function () {
                        _logger.success("Action Print");
                        $scope.wdInvoiceDetail.close();
                    };

                    $scope.edit = function (id) {
                        $location.path("/" + viewUrl.purchaseOrder + "/" + id);

                    };

                    function callbackFail(err) {
                        _logger.error(getMessage(err));
                    }

                    function callbackSuccess(data) {
                        _logger.success($filter("stringFormat")(_m.updatedSuccess, [_l.invoice, data.Code]));
                        //$scope.refreshData();
                        execCb($scope.onSave);
                        $scope.wdInvoiceDetail.close();


                    }
                    $scope.loadRowDetail = function (id) {
                        $scope.invoices = new kendo.data.DataSource({
                            type: "odata",
                            autoSync: true,
                            transport: {
                                read: {
                                    url: "/api/purchaseOrders/" + id + "/details?format=json&Includes=Product",
                                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                                }
                            },
                            serverPaging: false,
                            serverFiltering: true,
                            serverSorting: true,
                            schema: {
                                data: "Data",
                                total: "Total"
                            }
                        });
                    };
                    $scope.dispose = function () {
                        $scope.dataItem = null;
                        //$scope.cursellers = null;
                        $scope.invoices = null;
                        $scope.onSave = null;
                        $scope.selectedProduct = null;
                    };

                    this.showInvoice = function (id, selectedProduct, onSaveHandler) {
                        $scope.onSave = onSaveHandler;
                        $scope.selectedProduct = selectedProduct;
                        //Includes=Branch&Includes=Total&Includes=SubTotal&Includes=Supplier&Includes=User
                        var inv = _invoicesvc.get({ purchaseorderId: id, Includes: ["Branch", "TotalQuantity", "Total", "SubTotal", "Supplier", "User"] });

                        inv.$promise.then(function (data) {
                            //  $scope.hasPayment = (data.PaymentCode != null);
                            //console.log('c0 ' + data.CreatedBy + ' code = ' + data.Code + ' id = ' + data.Id);
                            data.CreatedDate = kendo.parseDate(data.CreatedDate);
                            data.Status = _status[data.Status];
                            $scope.window.openDetail(data);
                            //var r = _usersvc.get({ BranchId: data.Branch.Id, IsSeller: true });

                            //r.$promise.then(function (users) {
                            //    $scope.cursellers = users.Data;
                            //    $scope.window.openDetail(data);
                            //});


                        });

                        $scope.loadRowDetail(id);
                    };


                    //inject to parent 
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }

                }
            ],
            templateUrl: _session.partialPath('purchaseorder-popup.html')
        };
    }])
.directive('kvPurchaseImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages', '$rootScope', 'settings',
    function (_session, _logger, $filter, _l, _m, $rootScope, _settings) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope.appSetting = _settings;
                    $scope._l = _l;
                    $scope._m = _m;
                    //$scope.IsReplaceExisting = true;
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                                _logger.error($scope._l.pricebook_MsgImportErrorFile);
                                e.preventDefault();
                            }
                        });
                        //e.data = { IsReplaceExisting: $scope.IsReplaceExisting };
                        $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
                    };

                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();
                        //$scope.IsReplaceExisting = true;
                    };
                    var onSuccessImport = function (e) {
                        var data = e.response.Data;
                        //console.log(data);
                        //if ($scope.IsReplaceExisting) {
                        $scope.$parent.cart.PurchaseOrderDetails = data;
                        $scope.$parent.cart.updateValue();

                        initSerialTags($scope.$parent.cart.PurchaseOrderDetails);
                        $scope.$parent.cartGridoption.dataSource.data($scope.$parent.cart.PurchaseOrderDetails);
                        //} else {
                        //    for(var v=0;v<data.length;v++ ){
                        //        $scope.$parent.cart.addDetail(data[v]);
                        //    }
                        //}
                        $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
                        $scope.importWindow.close();
                        refresh($scope.$parent);
                        //$scope.RefreshGrid();
                    };

                    var initSerialTags = function (items) {
                        var serialList = [];
                        var sourceLst = [];
                        for (var idx = 0; idx < items.length; idx++) {
                            var itm = items[idx];
                            if (itm.SerialNumbers) {
                                serialList = [];
                                sourceLst = [];
                                var lst = itm.SerialNumbers.split(",");
                                for (var s = 0; s < lst.length; s++) {
                                    serialList.push({ "text": lst[s] });
                                    sourceLst.push({ "SerialNumber": lst[s] });
                                }
                                $scope.$parent["tags" + itm.ProductId] = serialList;
                                $scope.$parent["serialModel" + itm.ProductId] = itm.SerialNumbers.split(",");
                                $scope.$parent["popupDS" + itm.ProductId] = sourceLst;
                            }
                        }
                    }

                    var onImportError = function (e) {
                        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                            $scope.ImportError = $rootScope._m.sessionExpire;
                        } else {
                            if (e.XMLHttpRequest.responseText) {
                                $scope.ImportError = e.XMLHttpRequest.responseText;
                            } else {
                                $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                            }
                        }
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };

                    var onImportCancel = function (e) {
                    };
                    $scope.showPopup = function () {
                        $scope.importWindow.wrapper.addClass("k-window-poup  k-window-masstel k-window-importPurchaseorder");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
                        $scope.importWindow.wrapper.find(".k-upload-status").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,

                        async: {
                            saveUrl: "/Files/ImportPurchaseOrderDetail",
                            removeUrl: "/Files/Remove",
                            autoUpload: false
                        },

                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: $scope._l.import_ChooseFile,
                            uploadSelectedFiles: $scope._l.import_Uploaded,
                            statusUploading: $scope._l.import_Uploading,
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }
                }
            ],
            templateUrl: _session.partialPath('purchase-import.html')
        };
    }]).controller('DesCtrl', ['$scope', 'logger', 'kvConfirmBox', '$rootScope', 'DiscountTypes', function ($scope, _logger, _msgbox, $rootScope, DiscountTypes) {
        $scope.discountTypes = DiscountTypes;

        $scope.onPoppingOut = function () {
            updatePrice($scope.currentRow);
            refresh($scope);
        };

        $scope.$watch('currentRow', updatePrice);

        var updatePrice = function (val) {
            //update discount type & discount value
            if (val) {
                $scope.adjustedPrice = val.OriginPrice - (val.Discount ? val.Discount : 0);
                if (val.DiscountRatio) {
                    $scope.DiscountValue = (val.Discount > 0.000001) ? val.DiscountRatio : null;
                    $scope.DiscountType = DiscountTypes.percent;
                }
                else {
                    //don't show negative discount
                    $scope.DiscountValue = (val.Discount > 0.000001) ? val.Discount : 0;
                    $scope.DiscountType = DiscountTypes.money;
                }
            }
        };

        $scope.discountOnItemChanged = function () {
            //make sure discount does not exceed price 
            if ($scope.DiscountType != DiscountTypes.percent) {
                if ($scope.DiscountValue > $scope.currentRow.Price)
                    $scope.DiscountValue = $scope.currentRow.Price;
                $scope.currentRow.Discount = $scope.DiscountValue;
            }
            else {
                if ($scope.DiscountValue > 100)
                    $scope.DiscountValue = 100;
                $scope.currentRow.DiscountRatio = $scope.DiscountValue;
                $scope.currentRow.Discount = Math.round($scope.currentRow.DiscountRatio / 100 * $scope.currentRow.Price);
            }

            $scope.adjustedPrice = $scope.currentRow.OriginPrice - $scope.currentRow.Discount;
            $scope.currentRow.priceAfterDiscount = $scope.adjustedPrice;
            $scope.UpdateItemCart($scope.currentRow);
        };

        $scope.discountTypeChanged = function (type) {
            if ((!$scope.currentRow.Discount && !$scope.currentRow.DiscountRatio) || $scope.currentRow.Discount < 0.000001)
                return;

            if (type == DiscountTypes.percent) {
                //update to equivalent percent 
                if ($scope.currentRow.Price != 0 && $scope.currentRow.Discount)
                    $scope.currentRow.DiscountRatio = $scope.currentRow.Discount / $scope.currentRow.Price * 100;
                else
                    $scope.currentRow.DiscountRatio = null;
                $scope.DiscountValue = $scope.currentRow.DiscountRatio;
            }
            else {
                if ($scope.currentRow.DiscountRatio)
                    $scope.currentRow.Discount = Math.round($scope.currentRow.DiscountRatio / 100 * $scope.currentRow.Price);

                $scope.DiscountValue = $scope.currentRow.Discount;
                $scope.currentRow.DiscountRatio = null;
            }
            $scope.discountOnItemChanged();
        };

        $rootScope.$on("adjustedPriceChangedOnItem", function (evt, data) {            
            if (data.DiscountRatio) {
                data.DiscountValue = (data.Discount > 0.000001) ? data.DiscountRatio : null;
                data.DiscountType = DiscountTypes.percent;
                if (data.Price == 0) {
                    data.DiscountRatio = null;
                    //force change to discount type VND 
                    $scope.DiscountType = DiscountTypes.money;
                    $scope.DiscountValue = 0;
                }
                data.Discount = Math.round(data.DiscountRatio / 100 * data.Price);
            }
            else {
                //don't show negative discount
                data.DiscountValue = (data.Discount > 0.000001) ? data.Discount : 0;
                data.DiscountType = DiscountTypes.money;
                data.DiscountRatio = null;
                //don't show negative discount
                if (data.DiscountValue > data.Price)
                    data.DiscountValue = data.Price;
                data.Discount = data.DiscountValue;
            }
            data.adjustedPrice = data.Price - data.Discount;
            data.priceAfterDiscount = data.adjustedPrice;
        });
    }]);;
'use strict'
kvApp.controller('PurchaseReturnListCtrl', ['$scope', 'BranchResource', 'kvSession', 'refundStatus', 'kendofilter', '$routeParams', 'PurchasePaymentResource', 'purchaseReturnGridColumns', 'kvExportToExcel', 'logger', '$filter', '$timeout', 'settings',
    function ($scope, _branches, _session, _refundStatus, _filter, $routeParams, _payments, returnGridColumns, _export, _logger, $filter, $timeout, _setting) {

        $scope.rights = {};
        $scope.rights.canAdd = $scope._p.has('PurchaseReturn_Create');
        $scope.rights.canDelete = $scope._p.has('PurchaseReturn_Delete');
        $scope.currentBranchId = _session.branch.Id;
        $scope.viewPrice = $scope._p.has('Product_PurchasePrice');
        var kvDropbox = {};
        $scope.branchids = $scope.currentBranch.Id ? [$scope.currentBranch.Id] : [];
        $scope.branches = _branches.get({ Permission: 'PurchaseReturn_Read' }, function () {
            $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];
        });
        //$scope.branches = { Data: [{ Name: 'test', Id: _session.branch.id }, { Name: 'test', Id: 112 }] };
        $scope.pageSizes = pager.pageSizes;
        //console.log($scope.branchids);
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };
        $scope.detailTemplate = kendo.template($("#templDetail").html());

        $scope.settings = _setting;
        $scope.bindedGrid;
        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();

        };
        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            //remove any other filter 
            $scope.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
        }


        //Function change page size
        $scope.refresh = function () {
            $scope.refunds.pageSize(parseInt($scope.pageSize));
        };
        $scope.refundStatus = [];
        for (var idx in _refundStatus) {
            //_invoiceStatus.map(function (s, idx) { return  });
            $scope.refundStatus.push({ key: idx, value: _refundStatus[idx] });
        }
        $scope.onsave = function () {
            $scope.refunds.read();
            // console.log("Save");
        };
        function filterbyExtention() {
            var para = {};
            para.ProductKey = $scope.filterProduct;
            para.SupplierKey = $scope.filterSupplier;
            para.UserNameKey = $scope.filterUserName;
            para.InvoiceKey = $scope.filterInvoice;
            para.SerialKey = $scope.filterSerial;
            return para;
        }
        $scope.refunds = new kendo.data.DataSource({
            type: "odata",
            autoSync: false,
            transport: {
                read: {
                    url: "/api/purchasereturns?format=json&Includes=Branch&Includes=PurchaseOrder&Includes=Supplier&Includes=TotalReturn&Includes=TotalQuantity&Includes=User&Includes=PaymentCode&Includes=TotalPayment&ForSummaryRow=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests               
                    //tranditional: true 
                    data: filterbyExtention
                }
            },
            pageSize: pager.defaultList,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }

                    if (response && response.TotalValue) {
                        this.totalValue = kendo.toString(response.TotalValue, "n0");    
                    }

                    this.hasSummaryRow = $scope.viewPrice;

                    if (response && response.Data) {
                        for (var i = 0 ; i < response.Data.length ; i++) {
                            var t = response.Data[i];
                            //console.log(t);
                            t.Supplier = t.Supplier ? t.Supplier : { Name: "" };
                            t.PurchaseOrder = t.PurchaseOrder ? t.PurchaseOrder : { Code: '' };
                            t.StatusValue = t.Status;
                            t.Status = _refundStatus[t.Status];
                            t.User = t.User ? t.User : { GivenName: '' };
                            // Summary row
                            if (t.Id < 0) {
                                t.ReturnDate = "";
                                t.Branch = "";
                            }
                            if(!t.ViewPrice)
                            {
                                t.TotalReturn = t.TotalPayment = "---";
                            }

                        }
                    }
                    return response;
                },
                model: {
                    fields: {
                        ReturnDate: { type: "date" },
                        'Branch.Name': { type: "string" }
                    }
                }
            }
        });

        if ($scope.viewPrice && returnGridColumns.length==7) {
            returnGridColumns.splice(6, 0, { "field": "TotalReturn", "title": $scope._l.total, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" }, isNumber: true, hidden: true });
        }
        $scope.grdColumns = returnGridColumns;

        $scope.export = function () {
            var filter = $scope.refunds.reader.kvFilter;
            var columns = [];

            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            columns = _export.getGridColumns("grdPurchaseReturns");
            var type = "PurchaseReturn";
            var fileName = "DanhSachTraHangNhap";
            var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
            _export.toExcel(type, fileName, data);
        };

        function initFilter() {

            var filter = [];
            if ($scope.filterName) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filterName, 'contains')], 'and');
            }
            if ($scope.filterDescription) {
                filter = _filter.append(filter, [_filter.newCondition('Description', $scope.filterDescription, 'contains')], 'and');
            }
            var values = $scope.branchids;
            var condition = [];
            if (values && values.length > 0) {
                for (var i = 0; i < values.length; i++) {
                    if (parseInt(values[i]) > 0) {
                        condition.push(_filter.newCondition("BranchId", parseInt(values[i]), "eq"));
                    }
                }
                filter = _filter.append(filter, condition, "or");
            }

            if ($scope.dateFilter.TimeRange === 'other') {
                condition = [];
                if ($scope.dateFilter.EndDate) {

                    var todate = new Date($scope.dateFilter.EndDate);
                    condition.push(_filter.newCondition("ReturnDate", $scope.dateFilter.StartDate, "ge"));
                    condition.push(_filter.newCondition("ReturnDate", new Date(todate.DateAdd(1)), "lt"));
                }
                filter = _filter.append(filter, condition, "and");
            } else if ($scope.dateFilter.TimeRange != '') {
                condition = [
                    _filter.newCondition("ReturnDate", $scope.dateFilter.TimeRange, "eq")
                ];
                filter = _filter.append(filter, condition, "or");
            }
            values = $scope.refundStatus;
            condition = [];
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) > 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                }
            }
            if (condition.length > 0) {
                filter = _filter.append(filter, condition, "or");
            }

            return filter;
        }
        //function updateDateRange() {
        //    var fromDate = new Date().IgnoreTime();
        //    var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);
        //    $scope.dateFilterRange = {
        //        fromDate: defStart,
        //        toDate: new Date().IgnoreTime()
        //    };
        //}

        //updateDateRange();
        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.EndDate == null || $scope.dateFilter.StartDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy');
            //$("#otherCheck").prettyCheckable("check");
            $scope.dateFilter.TimeRange = 'other';
            $scope.filterUpdated();
            //$scope.dateFilterPopup.close();
        };
        $scope.dateFilterUpdated = function () {
            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else {
                $scope.filterUpdated();
            }  
        };

        $scope.filterUpdated = function () {
            $scope.refunds.filter(initFilter());
        };

        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;
            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });

        };
    }])
    .controller('PurchaseReturnUpdateCtrl', ['$scope', 'logger', 'kendofilter', 'PurchaseReturnResource', 'PurchaseOrderResource', '$location', '$rootScope', '$routeParams', '$filter', 'kvPaymentDocType', 'kvConfirmBox', 'kvPaymentMethods', 'localCache', 'CommonServices', 'refundStatus', 'purchaseOrderStatusMap', 'UserResource', 'BankAccountResource', 'refundStatusMap', 'kvSession', 'ProductResource',
    function ($scope, _logger, _filter, _orders, _ordersvc, $location, $rootScope, $routeParams, $filter, paymentDocType, _msgBox, _paymentMethods, _localCache, common, _orderStatus, _orderMap, _users, _bankAccounts, _refundStatusMap, _session, _product) {
        $scope.orderMap = _orderMap;
        $scope.viewPrice = $scope._p.has('Product_PurchasePrice');
        $scope.returnMap = _refundStatusMap;
        $scope.currentDate = new Date();
        $scope.goTolist = function () {
            $location.path("/" + viewUrl.purchaseReturnList);
            refresh($scope);
        };
        $scope.customOptions = {
            // using {{angular}} templates:
            template: '<span><b>{{dataItem.Account}}</b><p>&nbsp;&nbsp;{{dataItem.Bank}}</p></span>',
            valueTemplate: '{{dataItem.Account}}'
        };
        $scope.UpdateCart = function (e) {
            var ddl = $('#ddlBankAccount');
            var currentAcc = $scope.cart ? $scope.cart.Account : null;

            ddl.prop('title', currentAcc ? currentAcc.Bank : "");
        }
        $scope.rights = {};
        $scope.rights.canAdd = $scope._p.has('PurchaseReturn_Create');
        function cancel() {
            _localCache.remove(keyStore, function () {
                $scope.goTolist();
            });
        };
        $scope.goBack = function () {
            if ($scope.cart && ($scope.cart.PurchaseReturnDetails.length > 0 || $scope.cart.Code)) {
                _msgBox.confirm($scope._l.purchasereturn_goback, $scope._l.cancel, false, $scope._l.confirmYes, $scope._l.confirmNo);
                //_msgBox.onConfirm = function () {
                //    $scope.saveData(false);
                //};
                _msgBox.onCancel = function () {
                    cancel();
                };
            } else {
                cancel();
            }
        };
        function loadBuyers() {
            var r = _users.getBuyers();
            r.$promise.then(function (result) {
                $scope.buyers = result;
                $scope.buyerOptions = {
                    dataSource: $scope.buyers.Data,
                    change: $scope.UpdateCart,
                    dataTextField: "GivenName",
                    dataValueField: "Id",
                    dataBound: function (e) {

                    }
                };
            }, function (err) {
                _logger.error(getMessage(err));
            });
        }
        $scope.$on('refreshGridOnChangeBranch', loadBuyers);
        loadBuyers();

        $scope.void = function () {
            _msgBox.confirm($scope._l.confirmVoidPurchaseOrder, $scope._l.titleVoidPurchaseOrder);
            _msgBox.onConfirm = function () {
                if ($scope.cart && $scope.cart.Code) {
                    _orders.delete({ Id: $scope.cart.Id }, function (data) {
                        _localCache.remove(keyStore, function () {
                            _logger.success($filter("stringFormat")($scope._m.voidSaleSuccessfully, [data.Code]));
                            $scope.goTolist();
                        });

                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                } else {
                    _localCache.remove(keyStore, function () {
                        //_logger.success(data.Code);
                        $scope.goTolist();
                    });
                }
            };
        };
        var itemId = $routeParams.id;
        if (!angular.isNumber(Number(itemId)) && itemId != 'new' && itemId.indexOf("temp_") === -1) {
            $scope.goTolist();
            _logger.error($scope._l.infomationInvalid);
        }
        var keyStore = $filter("stringFormat")("Return_purchaseOrder_{0}_{1}_{2}", [$scope.currentBranch.Id, $scope.currentUser.id, itemId]);
        // Edit Purchase Order

        $scope.paymentMethods = _paymentMethods;
        initData();
        $scope.cart = new Cart();

        $scope.changeSerials = function (e, item) {

            if (e.sender)
                var currentItems = e.sender.value();

            if (item && currentItems) {
                item.Quantity = currentItems.length;
                item.SerialNumbers = "";
                for (var k = 0; k < currentItems.length ; k++) {
                    item.SerialNumbers += "," + currentItems[k];
                }
                item.SerialNumbers = item.SerialNumbers.substring(1);
            }

            $scope.cart.updateValue();
        }

        $scope.tagAdded = function (tag, item) {
            var currentItems = item.Serials ? item.Serials.map(function (s) { return s.SerialNumber; }) : [];

            if (item && currentItems) {
                item.Quantity = currentItems.length;
                item.SerialNumbers = "";
                for (var k = 0; k < currentItems.length ; k++) {
                    item.SerialNumbers += "," + currentItems[k];
                }
                item.SerialNumbers = item.SerialNumbers.substring(1);
            }

            $scope.cart.updateValue();
        }

        // Add Product to Cart
        $scope.addProduct = function (data) {
            if (data.LatestPurchasePrice == 0) {
                var r = _product.history({ productId: data.Id, DocumentType: 2 });
                r.$promise.then(function (result) {
                    data.LatestPurchasePrice = result.Total > 0 ? data.LatestPurchasePrice : data.Cost;
                    $scope.cart.addItem(data);
                });
            }
            else {
                $scope.cart.addItem(data);
            }
        };
        // Supplier
        $scope.UpdateReturn = function () {
            $scope.cart.ReturnDate = this.value();
            $scope.cart.updateValue();
        };
        $scope.removeItem = function (id) {
            $scope.cart.removeItem(id);
        };
        $scope.changePayment = function (type) {
            $scope.cart.paymentMedthod = type;
        };
        $scope.saving = false;
        $scope.saveData = function (isComplete) {
            $scope.saving = true;
            if ($scope.cart.PayingAmount > 0) {
                var payment = {
                    Amount: $scope.cart.PayingAmount,
                    Method: $scope.cart.paymentMethodObj ? $scope.cart.paymentMethodObj.Id : 'Cash',
                    AccountId: $scope.cart.Account.Id
                };
                $scope.cart.addPayment(payment);
            }
            //console.log($scope.cart);

            $scope.cart.ReceivedById = $scope.cart.User.Id;
            $scope.cart.SupplierId = $scope.cart.Supplier ? $scope.cart.Supplier.Id : null;
            //var saveobj = new Cart($scope.cart);
            if (_session && _session.branch)
                $scope.cart.BranchId = _session.branch.Id;

            _orders.save({ PurchaseReturn: $scope.cart, Completed: isComplete }, function (data) {
                $scope.saving = true;
                _localCache.remove(keyStore, function () {
                    $scope.saving = false;
                    _logger.success($filter("stringFormat")($scope._m.updatedSuccess, [$scope._l.purchasereturn_MsgName, data.Code]));
                    $scope.goTolist();
                });

            }, function (err) {
                $scope.saving = false;
                _logger.error(getMessage(err));
                //_logger.error($scope._l.purchasereturnError);
            });
        };
        function getPurchaseReturn(o, useAllocation) {
            if (o.Status != _orderMap.Finalized) {
                _logger.error($scope._l.purchasereturn_MsgNotStatus);
                $scope.goTolist();
            } else {

                if (o.Id) {
                    $scope.cart.PurchaseOrderId = o.Id;
                };
                if (o.SupplierId) {
                    $scope.cart.SupplierId = o.SupplierId;
                    $scope.cart.Supplier = o.Supplier;
                }

                _ordersvc.getDetails({ purchaseorderId: itemId, Includes: ["Product", "ReturnQuantity", "ReturnSerials", "Product.ProductSerials"] }, function (detail) {
                    $scope.cart.PurchaseReturnDetails = convertDetailItem(detail.Data, useAllocation);
                    $scope.cart.PurchaseOrderDetails = detail.Data.filter(function (ele) {
                        return ele.Quantity > ele.ReturnQuantity;
                    });
                    var items = $scope.cart.PurchaseReturnDetails;
                    for (var idx = 0; idx < items.length; idx++) {
                        var itm = items[idx];
                        itm.IsLotSerialControl = itm.Product.IsLotSerialControl;
                        if (!itm.ProductSerials && itm.SerialNumbers) {
                            var ss = itm.SerialNumbers.split(",");
                            var ds = [];
                            var purchasedSerials = "";
                            for (var k = 0; k < ss.length; k++) {
                                if (!itm.ReturnSerials || !(itm.ReturnSerials.indexOf(ss[k]) > -1)) {
                                    ds.push({ "SerialNumber": ss[k], "text": ss[k] });
                                    purchasedSerials += "," + ss[k];
                                }
                            }
                            itm.ProductSerials = ds;
                            if (purchasedSerials.length > 0) {
                                itm.PurchaseOrderSerials = purchasedSerials.substring(1);
                            }
                        }
                    }
                    refresh($scope);
                },
                function (err) {
                    _logger.error(getMessage(err));
                });
            }
        }
        // Init Data
        function initData() {

            if (!isNaN(Number(itemId))) {
                $scope.fromInvoice = true;
                _ordersvc.get({ purchaseorderId: itemId, Includes: ["Supplier", "User"] }, function (o) {
                    if (o) {
                        if ((o.Discount > 0 || o.DiscountRatio > 0) && o.PurchaseDate > "2016-03-09") {
                            _msgBox.confirm($scope._l.purchaseReturnAlert, $scope._l.purchasereturn_MsgName, false, $scope._l.confirmYes, $scope._l.confirmNo);
                            _msgBox.onConfirm = function () {
                                getPurchaseReturn(o, true);
                            };
                            _msgBox.onCancel = function () {
                                getPurchaseReturn(o, false);
                            };
                        }
                        else {
                            getPurchaseReturn(o, false);
                        }                        
                    }
                    else {
                        _logger.error($scope._l.purchasereturn_NotFound);
                        $scope.goTolist();
                    }
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            } else {
                //Add new Purchase Order
                if (itemId.indexOf("temp_") > -1) {
                    var str = itemId.replace("temp_", "");
                    itemId = parseInt(str);
                    _orders.get({ returnId: itemId, Includes: ["Supplier", "User"] }, function (o) {
                        if (o) {
                            if (o.Status != _refundStatusMap.Pending) {
                                _logger.error($scope._l.purchasereturn_MsgNotStatus);
                                $scope.goTolist();
                            } else {

                                if (o.Id) {
                                    $scope.cart = new Cart(o);
                                    $scope.cart.PurchaseOrderId = o.PurchaseOrderId;
                                }

                                _orders.getDetails({ returnId: itemId, Includes: ["Product", "Product.ProductSerials", "SellQuantity"] }, function (detail) {
                                    $scope.cart.PurchaseReturnDetails = detail.Data;
                                    console.log(detail);
                                    var items = $scope.cart.PurchaseReturnDetails;
                                    for (var idx = 0; idx < items.length; idx++) {
                                        var itm = items[idx];
                                        itm.IsLotSerialControl = itm.Product.IsLotSerialControl;

                                        var serialDS = itm.ProductSerials;
                                        if ($scope.cart.PurchaseOrderId) {
                                            serialDS = itm.PurchaseOrderSerials;  // only return the serial in related purchase order 
                                        } 

                                        if (serialDS) {
                                            var ss = serialDS.split(",");
                                            var ds = [];
                                            for (var k = 0; k < ss.length; k++) {
                                                ds.push({ "SerialNumber": ss[k], "text": ss[k] });
                                            }
                                            itm.ProductSerials = ds;
                                        }
                                        if (itm.Product.IsLotSerialControl && itm.SerialNumbers) {
                                            var lst = itm.SerialNumbers.split(",");
                                            itm.Serials = lst;
                                        }

                                        // update quantity of related purchaseorder
                                        if ($scope.cart.PurchaseOrderId) {
                                            itm.BuyQuantity = itm.SellQuantity;
                                        }
                                    }

                                    $scope.cart.updateValue();
                                    refresh($scope);
                                },
                                    function (err) {
                                        _logger.error(getMessage(err));
                                    });
                            }
                        } else {
                            _logger.error($scope._l.purchasereturn_NotFound);
                            $scope.goTolist();
                        }
                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                } else {
                    _localCache.get(keyStore, function (data) {
                        var obj = !data ? data : JSON.parse(data);
                        if (obj && obj.PurchaseReturnDetails.length > 0) {
                            _msgBox.confirm($scope._l.purchasereturn_NotSaveServer, $scope._l.purchasereturn_MsgName, false, $scope._l.purchasereturn_MsgUseTo, $scope._l.confirmNo, true);
                            _msgBox.onConfirm = function () {
                                $scope.cart = new Cart(obj);

                                var items = $scope.cart.PurchaseReturnDetails;
                                for (var idx = 0; idx < items.length; idx++) {
                                    var itm = items[idx];
                                    if (itm.IsLotSerialControl && itm.SerialNumbers) {
                                        var lst = itm.SerialNumbers.split(",");
                                        itm.Serials = lst;
                                    }
                                }

                                refresh($scope);
                            };
                        }
                    });
                }


            }

        }
        function convertDetailItem(ls, useAllocation) {
            var retVal = [];
            if (ls) {
                for (var t = 0; t < ls.length; t++) {
                    var allocation = useAllocation == true ? ls[t].Allocation : 0;
                    if (ls[t].Quantity > ls[t].ReturnQuantity) {
                        retVal.push({ SerialNumbers: ls[t].SerialNumbers, ProductId: ls[t].Product.Id, Product: ls[t].Product, BuyPrice: ls[t].Price - ls[t].Discount - allocation, ReturnPrice: ls[t].Price - ls[t].Discount - allocation, Quantity: 0, ReturnQuantity: ls[t].ReturnQuantity, BuyQuantity: ls[t].Quantity, ReturnSerials: ls[t].ReturnSerials });
                    }
                }
            }
            return retVal;
        }
        function Cart(data, now) {
            now = now ? now : new Date();
            this.Code = data ? data.Code : null;
            this.PurchaseReturnDetails = (data && data.PurchaseReturnDetails) ? data.PurchaseReturnDetails : [];
            this.PurchaseOrderDetails = [];
            this.UserId = data ? data.UserId : $scope.currentUser.id;
            this.User = data && data.User ? data.User : $scope.currentUser;
            this.ReceivedById = data && data.User ? data.User.Id : $scope.currentUser.id;
            this.CompareReceivedById = data && data.User ? data.User.Id : $scope.currentUser.id;
            this.ReturnDate = (data && data.ReturnDate) ? kendo.parseDate(data.ReturnDate) : kendo.parseDate(now);
            this.CompareReturnDate = (data && data.ReturnDate) ? kendo.parseDate(data.ReturnDate) : kendo.parseDate(now);
            this.ModifiedDate = data ? kendo.parseDate(data.ModifiedDate) : kendo.parseDate(now);
            this.Description = data ? data.Description : '';
            this.Supplier = data ? data.Supplier : null;
            this.SupplierId = data ? data.SupplierId : null;
            this.SubTotal = data ? data.SubTotal : 0;
            this.Branch = data ? data.Branch : $scope.currentBranch;
            this.Status = data ? data.Status : _refundStatusMap.Pending;
            this.CompareStatus = data ? data.Status : _refundStatusMap.Pending;
            this.StatusValue = _orderStatus[this.Status];
            this.Discount = data ? data.Discount : 0;
            this.Id = data ? data.Id : 0;
            this.Total = data ? data.Total : 0;
            this.BalanceDue = data ? data.BalanceDue : 0;
            this.PaidAmount = data && data.PaidAmount ? data.PaidAmount : 0;
            this.PayingAmount = data ? data.PayingAmount : 0;
            this.ChangeAmount = data ? data.ChangeAmount : 0;
            this.Account = data && data.Account ? data.Account : {};
            this.paymentMethod = data && data.paymentMethod ? data.paymentMethod : 'Cash';
            var cart = this;
            this.paymentMethodObj = $scope.paymentMethods.kvfind(cart, function (a, b) {
                return a.Id === b.paymentMethod;
            });

        }
        function cartItem(product) {
            this.ProductId = product.Id;
            this.Product = { Name: product.Name, Code: product.Code, IsLotSerialControl: product.IsLotSerialControl };
            this.ProductName = product.Name;
            this.BuyPrice = product.LatestPurchasePrice;
            this.ReturnPrice = product.LatestPurchasePrice;
            //this.Quantity = 1;
            this.ReturnQuantity = 0;
            this.BuyQuantity = null;

            if (product.ProductSerials) {
                product.ProductSerials = product.ProductSerials.filter(function (s) { return s.Status > 0 })
              
                var ds = [];
                for (var k = 0; k < product.ProductSerials.length; k++) {
                    ds.push({ "SerialNumber": product.ProductSerials[k].SerialNumber, "text": product.ProductSerials[k].SerialNumber });
                }
                this.ProductSerials = ds;
               
            }
            //this.ProductSerials = product.ProductSerials;
            this.IsLotSerialControl = product.IsLotSerialControl;
            if (product.IsLotSerialControl)
                this.Quantity = 0;
            else
                this.Quantity = 1;
        }


        Cart.prototype.updateValue = function () {
            this.SubTotal = 0;
            this.TotalQuantity = 0;
            for (var i = 0 ; i < this.PurchaseReturnDetails.length ; i++) {
                this.SubTotal += this.PurchaseReturnDetails[i].ReturnPrice * this.PurchaseReturnDetails[i].Quantity;
                this.TotalQuantity += this.PurchaseReturnDetails[i].Quantity;
            }


            var discount = ((!isNaN(this.Discount)) ? this.Discount : 0);
            this.Total = this.SubTotal - discount;

            //this.PaidAmount = 0;
            //  if (this.PurchasePayments) {
            //      for (i = 0 ; i < this.PurchasePayments.length ; i++) {
            //         this.PaidAmount += this.PurchasePayments[i].Amount;
            //     }
            //   }
            this.BalanceDue = this.Total - this.PaidAmount;
            this.PayingAmount = this.PayingAmount ? this.PayingAmount : 0;
            this.ChangeAmount = 0 - (this.BalanceDue - this.PayingAmount);
            refresh($scope);
            //localStorage[keyStore] = JSON.stringify(this);
            var obj = JSON.stringify(this);
            _localCache.set(keyStore, obj);
        };
        Cart.prototype.removeItem = function (item) {
            for (var i = 0; i < this.PurchaseReturnDetails.length ; i++) {
                if (this.PurchaseReturnDetails[i].ProductId == item.ProductId) {
                    this.PurchaseReturnDetails.splice(i, 1);
                    break;
                }
            }
            this.updateValue();
        };
        Cart.prototype.addItem = function (product) {
            if (this.validObject(product)) {
                var found = null;
                var item;
                for (var i = 0; i < this.PurchaseReturnDetails.length; i++) {
                    item = this.PurchaseReturnDetails[i];
                    if (item.ProductId == product.Id) {
                        found = item;
                        if (this.validObjectDetail(product, item)) {
                            if (!product.IsLotSerialControl)
                                item.Quantity++;

                            //re-position to top 
                            this.PurchaseReturnDetails.splice(i, 1);
                            this.PurchaseReturnDetails.unshift(found);
                        }
                        break;
                    }
                }
                if (!found) {
                    item = new cartItem(product);
                    this.PurchaseReturnDetails.unshift(item);
                    found = item;
                }

                this.updateValue();
                return found;
            }
            return null;
        };
        Cart.prototype.validObjectDetail = function (product, detail) {
            if (detail.BuyQuantity && (detail.BuyQuantity < detail.ReturnQuantity + detail.Quantity + 1)) {
                _logger.error($filter("stringFormat")($scope._l.purchasereturn_MaxReturnProduct, [detail.BuyQuantity - detail.ReturnQuantity, product.Code]));
                return false;
            }
            return true;
        };
        Cart.prototype.validObject = function (product) {
            if (!this.PurchaseOrderId || this.PurchaseOrderId == 0) return true;
            var obj = this.PurchaseOrderDetails.filter(function (o) {
                return o.Product.Id == product.Id;
            });
            if (obj && obj.length > 0) {
                return true;
            } else {
                _logger.error($filter("stringFormat")($scope._l.purchasereturn_NotProductOrder, [product.Code]));
                return false;
            }

        };
        Cart.prototype.addPayment = function (payment) {
            this.PurchasePayments = this.PurchasePayments ? this.PurchasePayments : [];
            this.PurchasePayments.push(payment);
        };

        _bankAccounts.get({}, function (accounts) {
            accounts.Data.unshift({ Account: '--Chọn--', Id: null });
            $scope.bankAccounts = accounts.Data;
        });

        $scope.showSerialPopup = function (item) {
            if (item) {
                var model = "SerialModel";
                var source = item.ProductSerials;

                $scope.SerialModel = item.SerialNumbers ? item.SerialNumbers.split(",") : [];
                $scope["serialpopup"].showWindow(model, source, function (lst) {
                    var currentItems = lst;

                    if (item && currentItems) {
                        item.Quantity = currentItems.length;
                        item.SerialNumbers = "";
                        for (var k = 0; k < currentItems.length ; k++) {
                            item.SerialNumbers += "," + currentItems[k].SerialNumber;
                        }
                        item.SerialNumbers = item.SerialNumbers.substring(1);

                        var multiSelect = $("#serial_" + item.ProductId).data("kendoMultiSelect");
                        if (multiSelect) {
                            multiSelect.dataSource.filter({});
                            multiSelect.value(item.SerialNumbers.split(','));
                        }

                        var serialList = [];
                        for (var s = 0; s < lst.length; s++) {
                            serialList.push({ "SerialNumber": lst[s].SerialNumber });
                        }
                        item.Serials = serialList;
                    }
                    $scope.cart.updateValue();
                });
            }
        };
    }
    ])
.directive('kvPurchaseReturnPopup', ['kvSession', 'logger', 'UserResource', 'PurchaseReturnResource', 'refundStatus', '$filter', 'kvConfirmBox', 'kvLabel', 'kvMessages', function (_session, _logger, _usersvc, _refundsvc, _refundStatus, $filter, _msgbox, _l, _m) {
    return {
        restrict: 'E',
        scope: { popupName: '@kvName' },
        link: function (scope, elem, attrs) {
            elem.on('$destroy', function () {
                if (scope.$parent && scope.popupName) {
                    delete scope.$parent[scope.popupName];
                }
            });
        },
        controller: [
            '$scope', function ($scope) {
                $scope._l = _l;
                $scope._m = _m;
                $scope.window = {
                    openDetail: function (data) {
                        //$scope.dataItem = data;
                        //refresh($scope);
                        $scope.wdReturnDetail.wrapper.addClass("k-window-poup k-window-masstel k-window-returnDetail");
                        $scope.wdReturnDetail.center().open();

                    }
                };
                $scope.dispose = function () {
                    $scope.dataItem = null;
                    $scope.returns = null;
                    $scope.cursellers = null;
                    $scope.onSave = null;
                    $scope.selectedProduct = null;
                };


                $scope.refreshData = function () {
                    $rootScope.$broadcast('refreshPurchaseRefundGrid');
                };

                this.showReturn = function (id, selectedProduct, onSaveHandler) {
                    $scope.onSave = onSaveHandler;
                    $scope.selectedProduct = selectedProduct;
                    $scope.hasPayment = false;
                    $scope.refund = _refundsvc.get({ returnId: id, Includes: ["TotalReturn", "TotalQuantity", "Supplier", "Branch", "TotalPayment", "User"] }, function () {
                        $scope.wdReturnDetail.title($filter("stringFormat")("{0}", [$scope._l.purchasereturn_Name]));
                        $scope.refund.ReturnDate = $filter('parseDate')($scope.refund.ReturnDate);
                        $scope.refund.Supplier = $scope.refund.Supplier ? $scope.refund.Supplier : { Name: '' };
                        $scope.refund.Status = _refundStatus[$scope.refund.Status];
                    });
                    $scope.window.openDetail();

                };

                if ($scope.$parent && $scope.popupName) {
                    $scope.$parent[$scope.popupName] = this;
                }
            }
        ],
        templateUrl: _session.partialPath('purchase-return-popup.html')


    };
}])
.directive('purchaseRefundForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'PurchasePaymentResource', 'kvConfirmBox', 'refundStatusMap', 'UserResource', '$filter', 'kvMessages', 'PrivilegeHelper', '$compile', '$timeout',
    function (session, l, emptyGridFix, payments, msgbox, _status, _usersvc, $filter, _m, _p, $compile, $timeout) {
        

        return {
            restrict: 'E',
            scope: { dataSelectedProduct: '=kvDataSelectedProduct', dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {
                var colspan = 3;
                var detailColumns = [
                { field: "ProductCode", title: l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                { field: "ProductName", title: l.product_Name, headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
                { field: "Quantity", title: l.quantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtC" }, attributes: { "class": "tdSLB txtC" } }

                ];
                var cols = 3;
                scope.hasVoidPayment = _p.has('PurchasePayment_Delete');
                scope.hasUpdatePayment = _p.has('PurchasePayment_Update');
                function loadDetail(itemId) {
                    scope.viewPrice = scope.dataItem ? scope.dataItem.ViewPrice : false;                    
                    if (scope.viewPrice && cols == 3) {
                        cols += 2;
                        detailColumns.splice(3, 0,
                            { field: "BuyPrice", title: l.purchasereturn_PriceInput, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
                            { field: "ReturnPrice", title: l.purchasereturn_PriceReturn, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } }
                        );
                    }
                    scope.sellers = _usersvc.getByRole({ Role: 'PurchaseReturn', BranchId: scope.dataItem.BranchId });
                    scope.disabled = (scope.dataItem.StatusValue === _status.Void) || scope.noteditable || !_p.has("PurchaseReturn_Update");
                    scope.isDraft = (scope.dataItem.StatusValue === _status.Pending) && _p.has("PurchaseReturn_Update");
                    scope.hasVoid = _p.has('PurchaseReturn_Delete') && (scope.dataItem.StatusValue != _status.Void);
                    var returnDetails = new kendo.data.DataSource({
                        type: "odata",
                        transport: {
                            read: {
                                url: "/api/purchasereturns/" + itemId + "/details?format=json&Includes=ProductName&Includes=ProductCode",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        change: function (ob) {
                            scope.dataItem.ReturnDetails = ob.items;
                        },
                        serverPaging: false,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                        }

                    });

                    elem.find('.returnDetail').empty();
                    elem.find('.returnDetail').kendoGrid({
                        dataSource: returnDetails,
                        dataBinding: emptyGridFix,
                        columns: detailColumns,
                        dataBound: function (e) {
                            // add serial input
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    scope["serials" + row.Id] = row.SerialNumbers.split(",");
                                    scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",");

                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    if (row.SerialNumbers.split(",").length > maxShow)
                                        scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",").slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + scope._l.viewmore + '</a><kv-view-serial-popup kv-name="serialpopup' + row.Id + '" kv-source="serials' + row.Id + '"></kv-view-serial-popup>';
                                    var tags = angular.element($('<tr class="row-serial"><td colspan="' + colspan + '"><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag}}</li></ul>' + popup + '</td></tr>'));
                                    var el = $compile(tags)(scope);

                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }

                                if (scope.dataSelectedProduct) {
                                    for (var i = 0; i < scope.dataSelectedProduct.length; i++) {
                                        if (row.ProductId == scope.dataSelectedProduct[i]) {
                                            $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                        }
                                    }
                                }
                            });                            
                            if ($('tr').hasClass('tr-currentSelected')) {
                                e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                            }
                        },
                    });
                }

                scope.showpopup = function (id) {
                    scope["serialpopup" + id].showWindow();
                }

                if (scope.dataItem) {
                    loadDetail(scope.dataItem.Id);
                }
                else {
                    //do what ? 
                    scope.$watch('dataItem.Id', function (val) {
                        if (val)
                            loadDetail(val);
                    });
                }

            },
            controller: ['$scope', 'PurchaseReturnResource', 'logger', 'kvExportToExcel', 'kvPrinter', 'printTypeMap', 'settings', function ($scope, _refundsvc, _logger, _export, _print, _printTypeMap, _setting) {
                $scope._l = l;
                
                $scope.viewUrl = viewUrl;
                $scope.settings = _setting;
                //get payment 
                //if ($scope.dataItem) {
                //    payments.get({ ReturnId: $scope.dataItem.Id }, function (result) {
                //        if (result.Data && result.Data.length > 0) {
                //            $scope.hasPayment = true;
                //            $scope.dataItem.TotalPayment = result.Data.reduce(function (p, cur) { return p + cur.Amount; }, 0);
                //        }
                //    });
                //}
                //else {
                //    //insert a handler 
                //}
                function save(isUpdatePayment) {
                    var r = _refundsvc.save({ PurchaseReturn: $scope.dataItem, IsUpdatePayment: isUpdatePayment, IsUpdateStatus: true});
                    r.$promise.then(callbackSuccess, callbackFail);
                    if ($scope.wdReturnDetail) {
                        $scope.wdReturnDetail.close();
                    }
                }
                $scope.printContent = function () {
                    _print.printfromtype("PurchaseReturns", $scope.dataItem);
                };
                $scope.exportDetail = function () {
                    var id = $scope.dataItem.Id;
                    var type = "PurchaseReturnDetail";
                    var fileName = "ChiTietTraHangNhap_" + $scope.dataItem.Code;
                    var data = { req: id };
                    _export.toExcel(type, fileName, data);
                };

                function callbackFail(err) {
                    _logger.error(getMessage(err));
                }

                function callbackSuccess(data) {
                    _logger.success($filter("stringFormat")(_m.updatedSuccess, [$scope._l.lblRefund, data.Code]));
                    if ($scope.onSave) {
                        execCb($scope.onSave, $scope.dataItem);
                    }
                }

                $scope.update = function () {

                    if ($scope.dataItem.TotalPayment && $scope.hasUpdatePayment) {
                        var savebox = msgbox.confirm($scope._l.msgWarningUpdate, $scope._l.titleUpdateReturn);
                        savebox.confirm = function () {
                            save(true);
                        };
                        savebox.cancel = function () {
                            save(false);
                        };
                    } else {
                        save(false);

                    }
                };

                function voidRefund(isVoidPayment) {
                    _refundsvc.remove({ returnId: $scope.dataItem.Id, IsVoidPayment: isVoidPayment, CompareCode: $scope.dataItem.Code, CompareStatus: $scope.dataItem.StatusValue }, function () {
                        _logger.success($filter("stringFormat")($scope._l.msgDel, [$scope._l.purchasereturn_MsgDelSuccessTitle, $scope.dataItem.Code]));
                        execCb($scope.onSave, $scope.dataItem);
                        //callback? 
                    }, callbackFail);
                }
                $scope.paymentDetail = function (code) {
                    //$scope.$broadcast('showPaymentDetail', code);
                    $scope.returnpaymentPopup.showPayment(code, function () {
                        if ($scope.onSave) {
                            execCb($scope.onSave, $scope.dataItem);
                        }
                    });
                };
                $scope.cancel = function () {
                    var ivmsg = msgbox.confirm($filter("stringFormat")($scope._l.return_MsgDel, [$scope.dataItem.Code]), $scope._l.purchasereturn_MsgDelSuccessTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    ivmsg.confirm = function () {
                        voidRefund(true);
                        //if ($scope.dataItem.TotalPayment && $scope.hasVoidPayment) {
                        //    var pmmsg = msgbox.confirm($scope._l.invoice_MsgDelPurchaseOrder, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                        //    pmmsg.confirm = function () {
                        //        voidRefund(true);
                        //    };
                        //    pmmsg.cancel = function () {
                        //        voidRefund(false);
                        //    };
                        //} else {
                        //    voidRefund(false);
                        //}
                    };
                };
            }],
            templateUrl: session.partialPath('purchase-return-form.html')
        };
    }])
.factory('purchaseReturnGridColumns', ['kvLabel', function (l) {
    return [
        { "field": "Code", "title": l.purchasereturn_Code, headerAttributes: { "class": "tdCode16" }, attributes: { "class": "tdCode16" } },
        { "field": "ReturnDate", "title": l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true },
        { "field": "Supplier.Name", "title": l.supplier, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
        { "field": "Branch.Name", "title": l.branch, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
        { "field": "User.GivenName", "title": l.employee, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
        { "field": "Description", "title": l.note, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true, template: "{{dataItem.Description|truncateDesc}}" },
        { "field": "Status", "title": l.status, headerAttributes: { "class": "tdStatusM" }, attributes: { "class": "tdStatusM" } }
    ];
}]).controller('serialPopupCtrl', ['$scope', function ($scope) {
    $scope.showpopup = function (item) {
        if (item) {
            var model = "SerialModel";
            var source = item.ProductSerials;

            $scope.SerialModel = item.Serials;
            $scope["serialpopup"].showWindow(model, source, function (lst) {
                var currentItems = lst;

                if (item && currentItems) {
                    item.Quantity = currentItems.length;
                    item.SerialNumbers = "";
                    for (var k = 0; k < currentItems.length ; k++) {
                        item.SerialNumbers += "," + currentItems[k].SerialNumber;
                    }
                    item.SerialNumbers = item.SerialNumbers.substring(1);
                    
                    var multiSelect = $("#serial_" + item.ProductId).data("kendoMultiSelect");
                    if (multiSelect) {
                        multiSelect.dataSource.filter({});
                        multiSelect.value(item.SerialNumbers.split(','));
                    }

                    item.Serials = item.SerialNumbers.split(',');
                }
                $scope.$parent.cart.updateValue();
            });
        }
    };
}]);
;
'use strict'
function truncate(str) {
    var ww = $(window).width();
    var limit = 30;
    if (ww < 768) limit = 10;
    if (str && str.length > limit) {
        str = str.substr(0, limit) + '...';
        return str;
    }
    return str;
}

kvApp.controller('ReportCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', 'SaleReportResource', '$timeout', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, _saleReportResource, $timeout, _auditTrail) {
            $scope.hasBothType = false;
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.report_PerDay, Key: 'PurchaseDate', isBoth: true, hasChart: true, Report: 'Sale.SaleByTime' },
                    { Name: $scope._l.sale_ReportProfit, Key: 'Profit', isBoth: false, isLandcape: true, hasChart: true, Report: 'Sale.SaleProfitByInvoice' },
                    { Name: $scope._l.discountOrder, Key: 'InvoiceDiscount', isBoth: false, isLandcape: false, hasChart: false, Report: 'Sale.SaleDiscountByInvoice' },
                    { Name: $scope._l.refund, Key: 'Refund', isBoth: true, isLandcape: false, hasChart: false, Report: 'Sale.SaleByRefund' },
                    { Name: $scope._l.report_PerUser, Key: 'SoldBy', isBoth: true, hasChart: true, Report: 'Sale.SaleByUser' },
                    { Name: $scope._l.report_PerBranch, Key: 'Branch', isBoth: true, hasChart: true, Report: 'Sale.BranchSaleReport' }
                ];

            function getAuthorizedReports(reportList) {
                var base = 'SaleReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("Sale.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }

            function updateChartTitle() {
                if ($scope.saleDayChart) {
                    //timeLabels = getTimeLables();
                    //var title = timeLabels[$scope.filter.TimeRange];
                    //if ($scope.filter.TimeRange === 'other') {
                    //    title += ' ' + $scope.lblOtherTimeFilter;
                    //} else {
                    //    title += ' ' + getCurTimeLabel($scope.filter.TimeRange);
                    //}
                    var title = $scope._l.report_ProfitText + " " + $scope.filter.dateLable;
                    $scope.saleDayChart.setOptions({
                        title: {
                            text: title
                        }
                    });
                }
                if ($scope.report.ViewType == 'Profit') {
                    var title = $scope._l.sale_ReportProfit + " " + $scope.filter.dateLable;
                    $scope.saleProfitDayChart.setOptions({
                        title: {
                            text: title
                        }
                    });
                }
            }

            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noCodeFilter = r.noCodeFilter;
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        $scope.report.hasChart = r.hasChart;
                        //   console.log($scope.filter);
                        break;
                    }
                }
                if (!$scope.report.hasChart) {
                    $scope.report.Mode = 'data';
                    $scope.report.showing = true;
                }
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            $scope.report = {
                ViewType: $scope.reportTypes[defaultReportType].Key,
                showing: false,
                init: false,
                hasChart: $scope.reportTypes[defaultReportType].hasChart,
                Mode: $scope.reportTypes[defaultReportType].hasChart == true ? 'chart' : 'data',
                Report: $scope.reportTypes[defaultReportType].Report
            };
            _common.getTime(function (cur) {
                $scope.curDate = cur;
                updateChartTitle(); //update label
            }, function () { });
            $scope.report.init = false;
            $scope.filter = {};
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];

            //function getQuarter(d) {
            //    var m = d.getMonth();
            //    return parseInt(m / 3 + 1);
            //}

            //function getCurTimeLabel(timeRange) {
            //    if (timeRange == 'month') {
            //        return $scope.curDate ? $filter('date')($scope.curDate, 'MM/yyyy') : '';
            //    } else if (timeRange == 'year') {
            //        return $scope.curDate ? $scope.curDate.getFullYear() : '';
            //    } else if (timeRange == 'quarter') {
            //        return $scope.curDate ? ('Q' + getQuarter($scope.curDate) + ' ' + $scope.curDate.getFullYear()) : '';
            //    } else {
            //        return '';
            //    }
            //}


            $scope.filter.TimeRange = 'thisweek';
            $scope.reportTypeChanged = function () {
                updateFilter();
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                } else if (!$scope.report.showing && !$scope.report.init && $scope.report.hasChart) {
                    $scope.refreshReport();
                }
            }
            updateFilter();
            $scope.ChangeViewType = function (type) {
                updateFilter();
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }
            }

            function getBigReport(callback) {
                _saleReportResource.useBigReport({ Filter: getReportFilter(), ViewType: $scope.report.ViewType }, function (data) {
                    execCb(callback, data);
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            }

            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");

            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {                
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var rp;
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            $scope.hasBothType = report.isBoth;
                            rp = report.Report;
                            if ($scope.hasBothType && $scope.reportView) {
                                rp = rp + "LC";
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else if (report.isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }
                            break;
                        }
                    }
                    getBigReport(function (data) {
                        if (data) console.log('CountOfReport: ' + data.Count + ' ------ ThresholdReport: ' + threshold.document);
                        if (data && data.Count > threshold.document && $scope.report.ViewType != 'Refund') {
                            rp = rp.replace('Sale.', 'Sale.Big');
                        }                        
                        viewer.reportSource({
                            report: rp,
                            parameters: { filter: getReportFilter(), viewType: report.Key }
                        });
                        viewer.refreshReport();
                        viewer.scale({
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale
                        });
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Bán hàng, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }                    
                } else {
                    $scope.hasBothType = false;
                    if ($scope.report.ViewType == 'PurchaseDate')
                        $scope.saleByDayCols.dataSource.read();
                    if ($scope.report.ViewType == 'Profit')
                        $scope.saleProfitByDayCols.dataSource.read();
                    else if ($scope.report.ViewType == 'Branch')
                        $scope.branchPie.dataSource.read();
                    else if ($scope.report.ViewType == 'SoldBy')
                        $scope.salepersonBars.dataSource.read();
                    else if ($scope.report.ViewType == 'Customer')
                        $scope.customerBarOptions.dataSource.read();
                }
            }


            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                if ($scope.report.ViewType !== 'Branch' && $scope.report.ViewType !== 'Customer' && $scope.report.ViewType !== 'CustomerProductReport') {

                    $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                    $scope.currentEmployeeIds = angular.copy($scope.filter.EmployeeIds);
                }
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                if ($scope.report.ViewType == 'Customer' && $scope.report.Mode == 'chart')
                    f.Top = 10;
                else delete f.Top;
                return JSON.stringify(f);
            }

            function getChartParams() {
                var r = {
                    Filter: getReportFilter(),
                    ViewType: $scope.report.ViewType
                };
                return r;
            }

            //var getTimeLables = function () {
            //    return {
            //        'month': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenueMonth : $scope._l.report_ProfitMonth,
            //        'quarter': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenueQuarter : $scope._l.report_ProfitQuarter,
            //        'year': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenueYear : $scope._l.report_ProfitYear,
            //        'other': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenuePeriod : $scope._l.report_ProfitPeriod
            //    };
            //}
            var commonDs = {
                transport: {
                    read: {
                        url: "/api/charts/sale/?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                },
                sort: {
                    field: "Subject",
                    dir: "asc"
                }
            };

            var options = _chartHelper.getSaleColOptions(),
                daySaleDs = angular.copy(commonDs),
                daySaleProfitDs = angular.copy(commonDs),
                optionsprofit = _chartHelper.getSaleColOptions();
            $scope.saleByDayCols = options;
            daySaleDs.group = {
                field: "Group"
            };
            options.series =
            [
                {
                    type: "column",
                    field: "Value",
                    name: "#= group.value #"
                }
            ];

            $scope.saleProfitByDayCols = optionsprofit;
            optionsprofit.seriesDefaults = {
                type: "column",
                stack: false
            };
            optionsprofit.series =
            [
                {
                    field: "Profit",
                    name: $scope._l.sale_ReportProfit
                },
                {
                    field: "Revenue",
                    name: $scope._l.totalCostTitle
                },
                {
                    field: "TotalCost",
                    name: $scope._l.product_PriceCost
                }
            ];
            //optionsprofit.title = {
            //    text: $scope._l.sale_ReportProfit +  " "+ $scope.filter.dateLable
            //};
            daySaleDs.schema = {
                parse: function (response) {
                    _chartHelper.getSaleChartParseFunc($scope.saleDayChart).call(this, response);
                    updateChartTitle();
                    return response;
                }
                //parse: getResponseHandler(function () { return $scope.saleDayChart })
            };

            daySaleProfitDs.schema = {
                parse: function (response) {
                    _chartHelper.getSaleProfitChartParseFunc($scope.saleProfitDayChart).call(this, response);
                    updateChartTitle();

                    return response;
                }
            };

            optionsprofit.dataSource = new kendo.data.DataSource(daySaleProfitDs);

            options.dataSource = new kendo.data.DataSource(daySaleDs);
            //var timeLabels = getTimeLables();
            //options.title = {
            //text: timeLabels[$scope.filter.TimeRange]//"Doanh thu theo thoi gian"
            //};

            var pieOptions = _chartHelper.getBranchChartOptions(),
                pieDS = angular.copy(commonDs);
            pieOptions.dataSource = new kendo.data.DataSource(pieDS);

            pieOptions.title = {
                position: "top",
                text: $scope._l.report_saleBranchChartTitle
            };
            $scope.branchPie = pieOptions;


            var barDS = angular.copy(commonDs);

            function getResponseHandler(chart) {
                return function (response) {
                    angular.forEach(response, function (r) {
                        var ts = $filter('parseDate')(r.Subject);
                        r.Subject = ts && r.Subject.indexOf("/") > -1 ? $filter('date')(ts, "dd/MM") : r.Subject;
                    });
                    var max = response.reduce(function (ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                    chart = typeof chart === 'function' ? chart.call(null) : chart;
                    chart.setOptions({
                        valueAxis: {
                            majorUnit: _chartHelper.caliberate(max)
                        }
                    });
                    return response;
                }
            }

            var customerDS = angular.copy(barDS);
            customerDS.schema = {
                parse: getResponseHandler(function () { return $scope.customerChart })
            }
            customerDS.sort = {
                field: "Value",
                dir: "desc"
            }

            barDS.schema = {
                parse: getResponseHandler(function () { return $scope.salepersonChart })
            }
            barDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var commonOpt = {
                theme: 'flat',
                legend: {
                    visible: false,
                    position: 'bottom'
                },
                seriesDefaults: {
                    type: "bar"
                },
                series:
                [
                    {
                        field: "Value",
                        name: "User",
                    }
                ],
                seriesColors: ["#7fba00", "#ffa800", "#00aff0", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                categoryAxis: {
                    field: "Subject",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        template: "#:truncate(value)#"
                    }
                },
                valueAxis: {
                    labels: {
                        template: app.config.chartLabelTemplate
                    },
                    majorUnit: 1000000,
                    line: {
                        visible: true
                    },
                    minorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    format: "N0",
                    template: "${ kendo.toString(value, 'N0')} - ${ category }"
                }
            }

            var salepersonOptions = angular.copy(commonOpt);
            salepersonOptions.dataSource = new kendo.data.DataSource(barDS);
            salepersonOptions.title = {
                text: $scope._l.report_saleUserChartTitle
            };

            $scope.salepersonBars = salepersonOptions;
            var customerBarOptions = commonOpt;
            customerBarOptions.dataSource = new kendo.data.DataSource(customerDS);
            customerBarOptions.title = {
                text: $scope._l.report_SaleTop10CustmerTitle
            };
            $scope.customerBarOptions = customerBarOptions;

            $scope.changeReportMode = function () {
                updateFilter();
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }
            }

            function initReport() {

                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            if ($scope.reportTypes[i].isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }

                            break;
                        }
                    }

                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html',
                            //'/ReportViewer/templates/telerikReportViewerTemplate.html',
                            reportSource: {
                                report: $scope.report.Report,
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                            },
                            renderingBegin: function () {
                                console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;

            //init at the first time
            if ($scope.report.Mode == 'data') {
                initReport();
            }
        }
])
    .controller('ReportProductCtrl', [
        '$scope', 'settings', 'kvSession', 'logger', '$filter', 'ChartHelper', 'ProductReportResource', '$timeout', 'AuditTrailResource', 'kvExportToExcel',
        function ($scope, _settings, _session, _logger, $filter, _chartHelper, _productReportResource, $timeout, _auditTrail, _export) {
            $scope.branches = _session.branchs;
            $scope.hasBothType = false;
            var reportTypes = [
                {
                    Name: $scope._l.report_ProductSale,
                    Key: 'ProductBySale',
                    Report: 'Product.ProductBySale',
                    barSeries: [{ field: 'Value', name: "Subject" }],
                    isBoth: true,
                    hasChart: true
                },
                {
                    Name: $scope._l.report_ProductProfit,
                    isBoth: false,
                    isLandcape: true,
                    Key: 'ProductByProfit',
                    barSeries: [{ field: 'Value', name: "Subject" }],
                    Report: 'Product.ProductByProfit',
                    hasChart: true
                },
                {
                    Name: $scope._l.menu_damageItem,                    
                    isBoth: false,
                    isLandcape: false,
                    Key: 'ProductByDamageItem',                    
                    Report: 'Product.ProductByDamageItem',
                    hasChart: false,
                    noProductType: true
                },
                {
                    Name: $scope._l.report_ProductStock,
                    Key: 'ProducInOutStock',
                    Report: 'Product.ProducInOutStock',
                    isBoth: false,
                    isLandcape: true,
                    hasChart: false,
                    noProductType: true
                },
                {
                    Name: $scope._l.report_ProductStockDetail,
                    Key: 'ProducInOutStockDetail',
                    Report: 'Product.ProducInOutStockDetail',
                    isBoth: false,
                    isLandcape: true,
                    barSeries: [{ field: 'Value', name: "Subject" }],
                    barLabel: $scope._l.report_MaxStock,
                    hasChart: true,
                    noProductType: true
                },
                {
                    Name: $scope._l.report_productByUserTitle,
                    isBoth: false,
                    isLandcape: false,
                    Key: 'ProductByUser',
                    Report: 'Product.ProductByUser',
                    hasChart: false
                },
                  {
                      Name: $scope._l.report_productByCustomerTitle,
                      isBoth: false,
                      isLandcape: false,
                      Key: 'ProductByCustomer',
                      Report: 'Product.ProductByCustomer',
                      hasChart: false
                  },

                {
                    Name: $scope._l.report_productBySuplierTitle,
                    isBoth: false,
                    isLandcape: false,
                    Key: 'ProductBySupplier',
                    Report: 'Product.ProductBySupplier',
                    hasChart: false
                },
            ];

            function getAuthorizedReports(reportList) {
                var base = 'ProductReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("Product.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }


            $scope.reportTypes = getAuthorizedReports(reportTypes);

            var defaultReportType = 0;
            $scope.report = {
                ViewType: $scope.reportTypes[defaultReportType].Key,
                showing: false,
                init: false,
                hasChart: $scope.reportTypes[defaultReportType].hasChart,
                Mode: $scope.reportTypes[defaultReportType].hasChart == true ? 'chart' : 'data',
                Report: $scope.reportTypes[defaultReportType].Report
            };
            $scope.filter = { noPageSize: true };
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';

            $scope.reportTypeChanged = function () {
                updateFilter();
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                } else if (!$scope.report.showing && !$scope.report.init && $scope.report.hasChart) {
                    $scope.refreshReport();
                }
            }

            function getBigReport(callback) {
                var r = _productReportResource.useBigReport({ Filter: getReportFilter(), ViewType: $scope.report.ViewType });
                r.$promise.then(function (result) {
                    execCb(callback, result);
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            }

            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.showing) {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                if ($scope.report.showing) {
                    $(".report-loading").hide();
                    var rp = $scope.report.source,
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                        }
                    }
                    if ($scope.hasBothType && $scope.reportView) {
                        rp = rp + "LC";
                        $scope.report.scale = scale.landcape;
                        $('.mainWrap').addClass("mainWrapReport");
                    } else if ($scope.report.isLandcape) {
                        $scope.report.scale = scale.landcape;
                        $('.mainWrap').addClass("mainWrapReport");
                    } else {
                        $scope.report.scale = scale.portable;
                        $('.mainWrap').removeClass("mainWrapReport");
                    }
                    var viewer = $("#reportViewer").data("telerik_ReportViewer");
                    getBigReport(function (data) {
                        if (data) {
                            console.log('isCate: ' + data.isCate);
                            console.log('CountOfReport: ' + data.Count + ' ------ ThresholdReport: ' + threshold.document);
                            if ($scope.report.ViewType == 'ProductByProfit') {
                                if (data.isCate) {
                                    rp = "Product.BigProductByProfit";
                                }
                            }
                            else
                                if (data.Count > threshold.document || data.isCate) {
                                    rp = rp.replace('Product.', 'Product.Big');
                                    if (data.isCate == false && $scope.report.ViewType != 'ProductBySupplier') {
                                        rp += 'ByCat';
                                    }
                                }
                        }
                        viewer.reportSource({
                            report: rp,
                            parameters: { filter: getReportFilter() }
                        });
                        viewer.refreshReport();
                        viewer.scale({
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale
                        });
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Hàng hóa, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                } else {
                    $scope.hasBothType = false;
                    if ($scope.report.ViewType == 'ProductBySale') {
                        $scope.topProductChartOptions.dataSource.read();
                    } else if ($scope.report.ViewType == 'ProducInOutStockDetail') {
                        $scope.topProductInChartOptions.dataSource.read();
                        $scope.topProductOutChartOptions.dataSource.read();
                    } else if ($scope.report.ViewType == 'ProductByProfit') {
                        $scope.topProfitChartOptions.dataSource.read();
                        $scope.topProfitRatioChartOptions.dataSource.read();
                    }
                }
            }

            $scope.filterByDateRange = function () {
                if (!$scope.filter.StartDate && !$scope.filter.EndDate) {
                    _logger.error($scope._l.errInputDateTimeFilter);
                    return;
                }

                $scope.lblOtherTimeFilter = ($scope.filter.StartDate ? $filter('date')($scope.filter.StartDate, 'dd/MM/yyyy') : '') + ($scope.filter.EndDate && !$scope.filter.noEndDate ? (" - " + $filter('date')($scope.filter.EndDate, 'dd/MM/yyyy')) : '');
                $scope.filter.TimeRange = 'other';
                $scope.refreshReport();
            };


            $scope.ChangeViewType = function (type) {
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }
            }

            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.report.source = r.Report;
                        $scope.hasBothType = r.isBoth;
                        $scope.report.isLandcape = r.isLandcape;
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noCodeFilter = r.noCodeFilter && (!$scope.report.showing || $scope.report.ViewType == 'CustomerProductReport' || $scope.report.ViewType == 'UserProductReport');
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        $scope.report.barSeries = r.barSeries;
                        $scope.report.barLabel = r.barLabel;
                        $scope.report.hasChart = r.hasChart;
                        break;
                    }
                }
                if (!$scope.report.hasChart) {
                    $scope.report.Mode = 'data';
                    $scope.report.showing = true;
                }
            }

            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }
                delete f['pTypeFilterValues'];
                return JSON.stringify(f);
            }

            function getChartParams() {
                return { Filter: getReportFilter(), viewType: $scope.report.ViewType };
            }

            $scope.changeReportMode = function () {
                updateFilter();
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }
            }

            $scope.ExportAll = function () {
                var type = "";
                var fileName = "";
                var currentTime = $filter('date')(new Date(), '_dd.MM.yyyy_HH.mm');
                switch ($scope.report.ViewType) {
                    case "ProductBySale":
                        type = "ProductBySaleRecord";
                        fileName = "BaoCaoBanHangTheoHangHoa";
                        break;
                    case "ProducInOutStockDetail":
                        type = "ProductInOutStockDetailRecord";
                        fileName = "BaoCaoXuatNhapTonChiTiet";
                        break;
                    default:
                        type = "ProductInOutStockRecord";
                        fileName = "BaoCaoXuatNhapTon";
                        break;
                }
                var data = { req: getReportFilter() };
                _export.toExcel(type, fileName + currentTime, data);
            }

            function initReport() {
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }

                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html',
                            reportSource: {
                                report: $scope.report.Report,
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                            },
                            renderingBegin: function () {
                                console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;

            function getResponseHandler(chart) {
                return function (response) {
                    var max = response.reduce(function (ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                    chart = typeof chart === 'function' ? chart.call(null) : chart;
                    var unit = _chartHelper.caliberate(max);
                    var maxval = _chartHelper.caliberateMax(max);
                    maxval = maxval <= max ? max + unit : maxval;
                    chart.setOptions({
                        title: $scope.report.barLabel,
                        series: $scope.report.barSeries,
                        valueAxis: {
                            max: maxval,
                            majorUnit: unit
                        }
                    });
                    return response;
                }
            }

            var commonOpt = _chartHelper.getTopProductOptions(),
                topProductInOptions = angular.copy(commonOpt),
                topProductOutOptions = angular.copy(commonOpt);
            var commonDs = {
                transport: {
                    read: {
                        url: "/api/charts/product?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                }
            };


            // for topProductChart
            var topProductDS = angular.copy(commonDs);
            topProductDS.schema = {
                parse: getResponseHandler(function () { return $scope.topProductChart })
            }
            topProductDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var topProductOptions = angular.copy(commonOpt);
            topProductOptions.dataSource = new kendo.data.DataSource(topProductDS);
            topProductOptions.title = {
                text: $scope._l.report_productTop10ChartTitle
            };
            $scope.topProductChartOptions = topProductOptions;

            // for topProfitChart
            var topProfitDS = angular.copy(commonDs);
            topProfitDS.schema = {
                parse: getResponseHandler(function () { return $scope.topProfitChart })
            }
            topProfitDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var topProfitOptions = angular.copy(commonOpt);
            topProfitOptions.dataSource = new kendo.data.DataSource(topProfitDS);
            topProfitOptions.title = {
                text: $scope._l.report_MaxProfit
            };
            $scope.topProfitChartOptions = topProfitOptions;

            // for topProfitRatioChart
            var topProfitRatioDS = {
                transport: {
                    read: {
                        url: "/api/charts/product?format=json",
                        dataType: "json",
                        data: function () {
                            var p = getChartParams();
                            p.Type = 1;
                            p.viewType = 'ProductByProfit';
                            return p;
                        }
                    }
                }
            };

            topProfitRatioDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var profitRatioOpt = {
                theme: 'flat',
                legend: {
                    visible: false,
                    position: 'bottom'
                },
                seriesDefaults: {
                    type: "bar"
                },
                series: [{ field: 'Value', name: "Subject" }],
                seriesColors: ["#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                categoryAxis: {
                    field: "Subject",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        template: "#:truncate(value)#"
                    }
                },
                valueAxis: {
                    labels: {
                        format: "P0",
                    },
                    line: {
                        visible: true
                    },
                    minorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    format: "P2",
                    template: "${ kendo.toString(value, 'P2') } - ${ category }"
                    
                }
            }
            var topProfitRatioOptions = angular.copy(profitRatioOpt);
            topProfitRatioOptions.dataSource = new kendo.data.DataSource(topProfitRatioDS);
            topProfitRatioOptions.title = {
                text: $scope._l.report_10ProductProfit
            };
            $scope.topProfitRatioChartOptions = topProfitRatioOptions;

            // for topProductInOutStock
            topProductInOptions.seriesDefaults = {
                type: "bar",
                stack: true,
                gap: 1
            };
            topProductInOptions.series = [
                { field: 'ReturnInQuantity', name: $scope._l.refund },
                { field: 'PurchaseQuantity', name: $scope._l.order_Name },
                { field: 'TransferInQuantity', name: $scope._l.transfer_Receive },
                { field: 'StockTakeInQuantity', name: $scope._l.stockTake },
                { field: 'ManufacturingInQuantity', name: $scope._l.manufacturing }
            ];

            topProductInOptions.title = $scope._l.report_topProductIn;
            topProductInOptions.legend = {
                position: 'top'
            };
            topProductInOptions.dataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/api/charts/product?format=json",
                        dataType: "json",
                        data: function () {
                            var p = getChartParams();
                            p.viewType = "ProducInOutStockDetail";
                            p.Type = 1;
                            return p;
                        }
                    }
                },
                sort: {
                    field: "Value",
                    dir: "desc"
                },
                schema: {
                    parse: function (response) {
                        var max = 0, val = 0;
                        for (var i = 0; i < response.length; i++) {
                            val = 0;
                            for (var k = 0; k < topProductInOptions.series.length; k++) {
                                var temp = Math.abs(response[i][topProductInOptions.series[k].field]);
                                val += (temp ? temp : 0);
                            }
                            if (val > max)
                                max = val;
                        }
                        //console.log(max);
                        $scope.topProductInChart.setOptions({
                            valueAxis: {
                                majorUnit: _chartHelper.caliberate(max)
                            }
                        });
                        return response;
                    }
                }
            });


            $scope.topProductInChartOptions = topProductInOptions;


            topProductOutOptions.seriesDefaults = {
                type: "bar",
                stack: true,
                gap: 1
            };
            topProductOutOptions.series = [
                { field: 'ReturnPurchaseOutQuantity', name: $scope._l.purchasereturn_Name },
                { field: 'SaleOutQuantity', name: $scope._l.invoices_SaleText },
                { field: 'TransferTakeOutQuantity', name: $scope._l.fulfillment },
                { field: 'StockTakeOutQuantity', name: $scope._l.stockTake },
                { field: 'ManufacturingOutQuantity', name: $scope._l.manufacturing },
                { field: 'DamageOutQuantity', name: $scope._l.menu_damageItem }
            ];

            topProductOutOptions.title = $scope._l.report_topProductOut;
            topProductOutOptions.legend = {
                position: 'top'
            };

            topProductOutOptions.dataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/api/charts/product?format=json",
                        dataType: "json",
                        data: function () {
                            var p = getChartParams();
                            p.viewType = "ProducInOutStockDetail";
                            p.Type = 2;
                            return p;
                        }
                    }
                },
                sort: {
                    field: "Value",
                    dir: "desc"
                },
                schema: {
                    parse: function (response) {
                        var max = 0, val = 0;
                        for (var i = 0; i < response.length; i++) {
                            val = 0;
                            for (var k = 0; k < topProductOutOptions.series.length; k++) {
                                var temp = Math.abs(response[i][topProductOutOptions.series[k].field]);
                                val += (temp ? temp : 0);
                            }
                            if (val > max)
                                max = val;
                        }
                        //console.log(max);
                        $scope.topProductOutChart.setOptions({
                            valueAxis: {
                                majorUnit: _chartHelper.caliberate(max)
                            }
                        });
                        return response;
                    }
                }
            });

            $scope.topProductOutChartOptions = topProductOutOptions;
            updateFilter();
            if ($scope.report.showing) {
                initReport();
            } else {
                $scope.hasBothType = false;
            }
        }
    ])
    .factory('ChartHelper', [
        'kvSession', '$filter', function (_session, $filter) {


            function calculateNearTenthNumber(value) {
                if (!value)
                    return null;

                var temp = Math.round(value);
                var decimalUnit = Math.pow(10, temp.toString().length - 1);

                var ret = Math.ceil(value / decimalUnit) * decimalUnit;

                return ret;
            }

            function calibrateAxisMax(value, max) {

                var ret = calculateNearTenthNumber(value);

                // for negative part of axis: display correctly major line
                if (max) {

                    var major = caliberate(max);

                    if (ret > major)
                        ret = Math.ceil(ret / major) * major;
                    else {
                        if ((ret / major) < 0.00001)
                            ret = ret / 0.00001;
                    }
                }

                return ret;
            }

            function caliberate(maxVal) {
                if (!maxVal) {
                    //return a default value 
                    return 1000000;
                }
                var preferred = 10, step = Math.round(maxVal / preferred);

                var d = calculateNearTenthNumber(step);
                if (!d)
                    d = Math.pow(10, step.toString().length);

                return d;
            }

            function getSaleColOptions() {
                return {
                    theme: 'flat',
                    //renderAs: 'canvas',
                    legend: {
                        visible: true,
                        position: 'bottom',
                        legend: {
                            margin: {
                                top: 10
                            }
                        }

                    },
                    seriesDefaults: {
                        type: "column",
                        stack: true
                    },
                    seriesColors: ["#06941a", "#1969cc", "#fe9900", "#e94977", "#009ac6", "#e43c0d", "#5eaa02", "#bf302a", "#9d1599", "#000099", "#660033", "#663300", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"], // edit color pie, line charts
                    categoryAxis: {
                        field: "Subject",
                        majorGridLines: {
                            visible: false
                        },
                        labels: {
                            rotation: -60,
                            padding: {
                                top: 0
                            }
                        }
                    },
                    valueAxis: {
                        labels: {
                            template: app.config.chartLabelTemplate,
                            step: 1
                        },
                        minorGridLines: {
                            step: 2,
                        },

                        majorUnit: 1000000,
                        line: {
                            visible: true
                        }
                    },
                    tooltip: {
                        visible: true,
                        template: "#=series.name#: #= kendo.toString(value, 'n0') #  #= ( (value != dataItem.Total && dataItem.Total) ?  ' / ' + kendo.toString(dataItem.Total,'n0') : '') #"
                    }
                    //  legendItemClick: onLegendItemClick
                    //render: onRender
                };
            }

            function onRender(e) {
                console.log(e);
                //onLegendItemClick(e);
            }

            function onLegendItemClick(e) {

                try {

                    var data = e.sender.options.series[e.seriesIndex].data;
                    var field = e.sender.options.series[e.seriesIndex].field;
                    field = field.substring(field.indexOf('.') + 1);

                    for (var i = 0; i < data.length; i++) {
                        if (data[i].Data[field]) {
                            if (e.series.visible) // hide
                            {
                                data[i].total -= data[i].Data[field];

                            } else {
                                data[i].total += data[i].Data[field];
                            }
                        }
                    }

                    // re calculate the axis
                    // get field of series
                    var fields = [];
                    var sVisible = [];
                    var srs = e.sender.options.series;
                    var fd = "";
                    for (var j = 0; j < srs.length; j++) {
                        fd = srs[j].field.substring(srs[j].field.indexOf('.') + 1);
                        fields.push(fd);
                        sVisible.push(srs[j].visible);
                    }

                    //
                    var max = 0;
                    var positiveMax = 0, negativeMax = 0;

                    for (var i = 0; i < data.length; i++) {

                        var temp = 0;
                        var tempPos = 0, tempNeg = 0;
                        var value = 0;
                        for (var k = 0; k < fields.length; k++) {
                            value = data[i].Data[fields[k]];
                            if (value) {
                                if ((!e.series.visible && field == fields[k]) || (fields[k] != field && sVisible[k])) // show
                                {
                                    temp += Math.abs(value);
                                    if (value > 0)
                                        tempPos += value;
                                    else {
                                        tempNeg += Math.abs(value);
                                    }
                                }
                            }
                        }

                        max = max > temp ? max : temp;

                        positiveMax = positiveMax > tempPos ? positiveMax : tempPos;
                        negativeMax = negativeMax > tempNeg ? negativeMax : tempNeg;
                    }


                    // set new axis value
                    e.sender.options.valueAxis.max = calibrateAxisMax(positiveMax);
                    e.sender.options.valueAxis.min = -calibrateAxisMax(negativeMax, max);

                    e.sender.options.valueAxis.majorUnit = caliberate(max);

                    //refresh
                    e.sender.refresh();
                } catch (err) {
                    console.log(err);
                }
            }

            function getBranchSaleOptions() {
                return {
                    theme: 'flat',
                    //renderAs: 'canvas',
                    legend: {
                        visible: false,
                        position: 'bottom'
                    },
                    chartArea: {
                        background: ""
                    },
                    seriesDefaults: {
                        type: 'pie',
                        labels: {
                            visible: true,
                            background: "transparent",
                            //template: "#= category #: #= value#%"
                            template: "#= category # - #= kendo.format('{0:P}', percentage)#",
                            position: "outsideEnd"
                        }
                    },
                    series: [
                        {
                            field: 'Total',
                            categoryField: 'Subject',
                            padding: 40
                        }
                    ],
                    //seriesColors: ["#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#009ac6", "#e94977", "#5eaa02", "#bf302a"], // edit color pie, line charts
                    seriesColors: ["#06941a", "#1969cc", "#fe9900", "#e94977", "#009ac6", "#e43c0d", "#5eaa02", "#bf302a", "#9d1599", "#000099", "#660033", "#663300", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                    tooltip: {
                        visible: true,
                        format: "{0:n0}"
                    }
                };
            }

            function getBranchChartOptions() {
                return {
                    theme: 'flat',
                    //renderAs: 'canvas',
                    legend: {
                        visible: true,
                        position: 'bottom'
                    },
                    chartArea: {
                        background: ""
                    },
                    seriesDefaults: {
                        type: 'pie',
                        labels: {
                            visible: true,
                            background: "transparent",
                            //template: "#= category #: #= value#%"
                            template: "#= category # - #= kendo.format('{0:P}', percentage)#",
                            position: "outsideEnd"
                        }
                    },
                    series: [
                        {
                            field: 'Value',
                            categoryField: 'Subject',
                            padding: 40
                        }
                    ],
                    //seriesColors: ["#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#009ac6", "#e94977", "#5eaa02", "#bf302a"], // edit color pie, line charts
                    seriesColors: ["#06941a", "#1969cc", "#fe9900", "#e94977", "#009ac6", "#e43c0d", "#5eaa02", "#bf302a", "#9d1599", "#000099", "#660033", "#663300", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                    tooltip: {
                        visible: true,
                        format: "{0:n0}"
                    }
                };
            }

            function getTopProductOptions() { // TOP 10 HÀNG HÓA BÁN CHẠY TRONG THÁNG
                return {
                    theme: 'flat',
                    //renderAs:'canvas',
                    legend: {
                        visible: false,
                        position: 'bottom'
                    },
                    seriesDefaults: {
                        type: "bar"
                    },
                    seriesColors: ["#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                    //seriesColors: ["#06941a", "#1969cc", "#fe9900", "#e94977", "#009ac6", "#e43c0d", "#5eaa02", "#bf302a", "#9d1599", "#000099", "#660033", "#663300"],
                    categoryAxis: {
                        field: "Subject",
                        majorGridLines: {
                            visible: false
                        },
                        labels: {
                            template: kendo.template("#:truncate(value)#")
                        }
                    },
                    valueAxis: {
                        labels: {
                            template: app.config.chartLabelTemplate
                        },
                        majorUnit: 1000000,
                        line: {
                            visible: true
                        },
                        minorGridLines: {
                            visible: false
                        }
                    },
                    tooltip: {
                        visible: true,
                        template: "${kendo.toString(value, 'n0')} - ${category}"
                    }
                }
            }

            function getSaleParseFunc(chartObj) {
                return function (response) {
                    //var max = 0; 
                    var series = [], max = 0, seriesKey = {};
                    var positiveMax = 0, negativeMax = 0;

                    angular.forEach(response, function (r) {

                        var ts = $filter('parseDate')(r.Subject), temp = 0, tempTotal = 0;
                        var tempPos = 0, tempNeg = 0;

                        r.Subject = ts ? $filter('date')(ts, "dd/MM") : r.Subject;
                        r.ts = ts;
                        for (var k in r.Data) {
                            seriesKey[k] = 1;
                            temp += Math.abs(r.Data[k]);
                            tempTotal += r.Data[k];

                            if (r.Data[k] > 0)
                                tempPos += r.Data[k];
                            else
                                tempNeg += Math.abs(r.Data[k]);
                        }
                        r.total = tempTotal;
                        //console.log(r.ts);
                        max = max > temp ? max : temp;

                        positiveMax = positiveMax > tempPos ? positiveMax : tempPos;
                        negativeMax = negativeMax > tempNeg ? negativeMax : tempNeg;

                    });

                    for (var key in seriesKey) {
                        var branchId = parseInt(key.split("_")[1], 10);
                        var branchName = ($.grep(_session.branchs, function (b) { return b.id == branchId; }))[0].name;
                        series.push({
                            field: "Data." + key,
                            name: branchName
                        });
                    }

                    if (series) {
                        series.sort(function (a, b) { return a.name.localeCompare(b.name); });
                    }


                    //update major unit 
                    var chart = typeof (chartObj) == 'function' ? chartObj.call(null) : chartObj;
                    chart.setOptions({
                        valueAxis: {
                            max: calibrateAxisMax(positiveMax),
                            min: -calibrateAxisMax(negativeMax, max),
                            majorUnit: caliberate(max)
                            //majorUnit: 5000000
                        },
                        series: series,
                        RangeMax: max,
                        PosMax: positiveMax,
                        NegMax: negativeMax
                    });

                    //sort response 
                    if (response && response.length > 0 && response[0].ts)
                        response.sort(function (a, b) { return a.ts - b.ts; });
                    //console.log(response);
                    return response;
                }
            }

            function getSaleProfitChartParseFunc(chartObj) {
                return function (response) {
                    var max = 0;
                    // var series = [], max = 0, seriesKey = {};
                    //var positiveMax = 0, negativeMax = 0;

                    angular.forEach(response, function (r) {

                        var temp = 0, ts = $filter('parseDate')(r.Subject);
                        // var tempPos = 0, tempNeg = 0;

                        r.Subject = ts && r.Subject.indexOf("/") > -1 ? $filter('date')(ts, "dd/MM") : r.Subject;
                        //  r.ts = ts;


                        temp = r.Profit;
                        temp = temp > r.Revenue ? temp : r.Revenue;
                        temp = temp > r.TotalCost ? temp : r.TotalCost;
                        max = max > temp ? max : temp;

                    });

                    //update major unit 
                    var chart = typeof (chartObj) == 'function' ? chartObj.call(null) : chartObj;
                    chart.setOptions({
                        valueAxis: {
                            majorUnit: caliberate(max)
                        }

                    });

                    return response;
                }
            }

            function getSaleChartParseFunc(chartObj) {
                return function (response) {
                    var max = 0;
                    // var series = [], max = 0, seriesKey = {};
                    var positiveMax = 0, negativeMax = 0;

                    angular.forEach(response, function (r) {

                        var temp = 0, ts = $filter('parseDate')(r.Subject);
                        var tempPos = 0, tempNeg = 0;

                        r.Subject = ts && r.Subject.indexOf("/") > -1 ? $filter('date')(ts, "dd/MM") : r.Subject;
                        //  r.ts = ts;


                        temp = Math.abs(r.Value);


                        if (r.Total > 0)
                            tempPos += r.Total;
                        else
                            tempNeg += Math.abs(r.Total);

                        //console.log(r.ts);
                        max = max > temp ? max : temp;

                        positiveMax = positiveMax > tempPos ? positiveMax : tempPos;
                        negativeMax = negativeMax > tempNeg ? negativeMax : tempNeg;

                    });


                    //update major unit 
                    
                    var chart = typeof (chartObj) == 'function' ? chartObj.call(null) : chartObj;
                    if (chart) {
                        chart.setOptions({
                            valueAxis: {
                                max: calibrateAxisMax(positiveMax),
                                min: -calibrateAxisMax(negativeMax, max),
                                majorUnit: caliberate(positiveMax)
                            },
                            RangeMax: max,
                            PosMax: positiveMax,
                            NegMax: negativeMax
                        });
                    }
                    

                    //sort response 
                    //if (response && response.length > 0 && response[0].ts)
                    //  response.sort(function (a, b) { return a.ts - b.ts; });
                    //console.log(response);
                    return response;
                }
            }

            function getSalePerformanceParseFunc(chartObj) {
                return function (response) {
                    //var max = 0; 
                    var series = [], max = 0, seriesKey = {};
                    var positiveMax = 0, negativeMax = 0;

                    angular.forEach(response, function (r) {

                        var ts = r.Subject, temp = 0, tempTotal = 0;
                        var tempPos = 0, tempNeg = 0;
                        //r.Subject = r.Subject;
                        r.ts = ts;
                        for (var k in r.Data) {
                            seriesKey[k] = 1;
                            temp += Math.abs(r.Data[k]);
                            tempTotal += r.Data[k];

                            if (r.Data[k] > 0)
                                tempPos += r.Data[k];
                            else
                                tempNeg += Math.abs(r.Data[k]);
                        }
                        r.total = tempTotal;
                        //console.log(r.ts);
                        max = max > temp ? max : temp;

                        positiveMax = positiveMax > tempPos ? positiveMax : tempPos;
                        negativeMax = negativeMax > tempNeg ? negativeMax : tempNeg;
                    });

                    for (var key in seriesKey) {
                        var branchId = parseInt(key.split("_")[1], 10);
                        var branchName = ($.grep(_session.branchs, function (b) { return b.id == branchId; }))[0].name;
                        series.push({
                            field: "Data." + key,
                            name: branchName
                        });
                    }
                    if (series.length>0) {
                        series.sort(function (a, b) { return a.name.localeCompare(b.name); });
                    }

                    //console.log("Max = " + max);
                    //update major unit 
                    var chart = typeof (chartObj) == 'function' ? chartObj.call(null) : chartObj;
                    chart.setOptions({
                        valueAxis: {
                            max: calibrateAxisMax(positiveMax),
                            min: -calibrateAxisMax(negativeMax, max),
                            majorUnit: caliberate(max)
                        },
                        series: series,
                        RangeMax: max,
                        PosMax: positiveMax,
                        NegMax: negativeMax
                    });

                    //sort response 
                    //if (response && response.length > 0 && response[0].ts)
                    //    response.sort(function (a, b) { return a.ts - b.ts; });
                    //console.log(response);
                    return response;
                }
            }

            return {
                caliberate: caliberate,
                caliberateMax: calibrateAxisMax,
                getSaleParseFunc: getSaleParseFunc,
                getSaleChartParseFunc: getSaleChartParseFunc,
                getSaleProfitChartParseFunc: getSaleProfitChartParseFunc,
                getSaleColOptions: getSaleColOptions,
                getSalePerformanceParseFunc: getSalePerformanceParseFunc,
                getBranchSaleOptions: getBranchSaleOptions,
                getBranchChartOptions: getBranchChartOptions,
                getTopProductOptions: getTopProductOptions
            };
        }
    ])
    .controller('ReportDayEndCtrl', [
        '$scope', 'kvSession', '$filter', 'kvPaymentMethods', 'CashGroupResource', '$timeout', 'AuditTrailResource',
        function ($scope, _session, $filter, paymentMethods, _cashgroup, $timeout, _auditTrail) {
            $scope.branches = _session.branchs;
            $scope.paymentMethods = paymentMethods;
            $scope.showCashGroup = false;
            $scope.groups = $scope.groups ? $scope.groups : [];
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.report_totalByDocumentTitle, Key: 'ByDocument', Report: 'EndOfDay.EndOfDayDocument', isBoth: true, noCodeFilter: true, noProductType: true, noVariants: true, noCategoryFilter: true, noDebt: true, noCustomerGroup: true, noCashGroupType: true },
                    { Name: $scope._l.report_EndOfDayByCashFlow, Key: 'ByCashFlow', Report: 'EndOfDay.EndOfDayCashFlow', isBoth: true, noCodeFilter: true, noProductType: true, noVariants: true, noCategoryFilter: true, noDebt: true, noCustomerGroup: true },
                    { Name: $scope._l.report_EndOfDayByProduct, Key: 'ByProduct', Report: 'EndOfDay.EndOfDayProduct', isBoth: true, noDebt: true, noMethodPay: true, noCustomerGroup: true, noCashGroupType: true }
                ];

            function getAuthorizedReports(reportList) {
                var base = 'EndOfDayReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("EndOfDay.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            $scope.report = { ViewType: $scope.reportTypes[defaultReportType].Key, showing: false, init: false, Mode: 'data', Report: 'EndOfDay.EndOfDayDocument' };

            $scope.filter = {};
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';
            //init at the first time
            initReport()

            //add for customer 
            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noCodeFilter = r.noCodeFilter;
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        //add for customer filter
                        $scope.filter.noCustomerGroup = r.noCustomerGroup;
                        $scope.filter.noCustomerCode = r.noCustomerCode;
                        $scope.filter.noDebt = r.noDebt;
                        //console.log($scope.filter);
                        $scope.report.barSeries = r.barSeries;
                        $scope.report.barLabel = r.barLabel;
                        $scope.report.noMethodPay = r.noMethodPay;
                        $scope.report.noCashGroupType = r.noCashGroupType;
                        break;
                    }
                }
            }

            $scope.reportTypeChanged = function () {
                if ($scope.report.ViewType == 'ByCashFlow') {
                    var CusPurchasePayment = -1,
                        CusPayment = -2,
                        SuppPurchasePayment = -3,
                        SuppPayment = -4;
                    //DePurchasePayment = -5,
                    //DePayment = -6;
                    $scope.groups = _cashgroup.get({ Type: null }, function (result) {
                        //insert default filter
                        var val1 = { Id: CusPurchasePayment, Name: $scope._l.report_CusPurchasePaymentText };
                        var val2 = { Id: CusPayment, Name: $scope._l.report_CusPaymentText };
                        var val3 = { Id: SuppPurchasePayment, Name: $scope._l.report_SuppPurchasePaymentText };
                        var val4 = { Id: SuppPayment, Name: $scope._l.report_SuppPaymentText };
                        //var val5 = { Id: DePurchasePayment, Name: "Thu tiền trả ĐTGH" };
                        //var val6 = { Id: DePayment, Name: "Chi tiền ĐTGH hoàn trả" };
                        //result.Data.unshift(var6);
                        //result.Data.unshift(val5);
                        result.Data.unshift(val4);
                        result.Data.unshift(val3);
                        result.Data.unshift(val2);
                        result.Data.unshift(val1);
                    });
                }
                updateFilter();
                $scope.refreshReport();
            }
            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.showing) {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                var rp;
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            $scope.hasBothType = report.isBoth;
                            rp = report.Report;
                            if ($scope.hasBothType && $scope.reportView) {
                                rp = rp + "LC";
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else if (report.isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }
                            break;
                        }
                    }

                    viewer.reportSource({
                        report: rp,
                        parameters: { filter: getReportFilter(), viewType: report.Key }
                    });
                    viewer.refreshReport();
                    viewer.scale({
                        scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                        scale: $scope.report.scale
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Cuối ngày, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                } else {
                    $scope.hasBothType = false;
                }
            }
            updateFilter();

            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                return JSON.stringify(f);
            }

            function getReportParam() {
                var drillThrough = {
                    BranchIds: $scope.filter.BranchIds,
                    TimeRange: 'other'
                };
                drillThrough.StartDate = $scope.filter.TransDate.IgnoreTime();
                drillThrough.EndDate = drillThrough.StartDate.DateAdd(1);

                var f = {
                    curDate: $filter('date')($scope.filter.TransDate, 'dd/MM/yyyy'),
                    branchId: $scope.filter.BranchIds.join(","),
                    filter: JSON.stringify(drillThrough) //mainly for the drill through report 
                };
                return f;
            }

            $scope.updateDayEndReport = function () {
                var viewer = $("#reportViewer").data("telerik_ReportViewer");

                viewer.reportSource({
                    report: viewer.reportSource().report,
                    parameters: getReportParam()
                });
                viewer.refreshReport();
            }

            var getTimeLables = function () {
                return {
                    'month': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenueMonth : $scope._l.report_ProfitMonth,
                    'quarter': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenueQuarter : $scope._l.report_ProfitQuarter,
                    'year': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenueYear : $scope._l.report_ProfitYear,
                    'other': $scope.report.ViewType == 'PurchaseDate' ? $scope._l.report_RevenuePeriod : $scope._l.report_ProfitPeriod
                };
            }
            $scope.changeReportMode = function () {
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }
            }
            $scope.ChangeViewType = function (type) {
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }
            }

            function initReport() {
                $scope.filter.TransDate = new Date().IgnoreTime();
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }
                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html', //'/ReportViewer/templates/telerikReportViewerTemplate.html',

                            reportSource: {
                                report: $scope.report.Report,
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                                //this.refreshReport();
                            },
                            renderingBegin: function () {
                                console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;
        }
    ])
    .controller('ReportSideBarCtrl', [
        '$scope', function ($scope) {
            $scope.handleMobile = function () {
                $('.boxLeft li').click(function (e) {
                    console.log(e);
                    //   alert(true);
                    //if ($wWidth <= 768) {
                    //    $('.mainLeft').hide();
                    //    $('.mainRight').removeClass("mobilePro mobileRight");
                    //    e.stopPropagation();
                    //}
                });
            };
        }
    ]).
    controller('ReportFinancialCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', '$timeout', 'RetailerResource', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, $timeout, _retailer, _auditTrail) {
            $scope.branches = _session.branchs;
            $scope.financialYears = [];
            _retailer.getInitYear(function (data) {
                var createdYear = data.Year;    
                var curYear = new Date().getFullYear(); 
                $scope.filter.Year = curYear;
                while(curYear >= createdYear){
                    $scope.financialYears.push(curYear);
                    curYear--;
                }                
            });
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.report_FinancialSale, Key: 'SalePerformance', Report: 'SalePerformanceReport' }
                ];

            function getAuthorizedReports(reportList) {
                var base = 'FinancialReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    if ($scope._p.has(base + r.Report))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            _common.getTime(function (cur) {
                $scope.curDate = cur;
                //update label
                updateChartTitle();
            },function(){});

            function getQuarter(d) {
                var m = d.getMonth();
                return parseInt(m / 3 + 1);
            }

            function getCurTimeLabel(timeRange) {
                if (timeRange == 'month') {
                    return $scope.curDate ? $filter('date')($scope.curDate, 'MM/yyyy') : '';
                } else if (timeRange == 'year') {
                    return $scope.curDate ? $scope.curDate.getFullYear() : '';
                } else if (timeRange == 'quarter') {
                    return $scope.curDate ? ('Q' + getQuarter($scope.curDate) + ' ' + $scope.curDate.getFullYear()) : '';
                } else {
                    return '';
                }
            }

            function updateChartTitle() {
                if ($scope.saleDayChart) {
                    timeLabels = getTimeLables();
                    var title = timeLabels[$scope.filter.TimeRange];
                    $scope.saleDayChart.setOptions({
                        title: {
                            text: $scope._l.profit + ' ' + title
                        }
                    });
                }
            }

            $scope.report = { ViewType: $scope.reportTypes[defaultReportType].Key, showing: false, init: false, Mode: 'chart', Report: 'SaleReport' };
            $scope.filter = {};
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'quarter';            
            $scope.reportTypeChanged = function () {
                //update default branch filter 
                $scope.filter.BranchIds = $scope.currentBranchIds;
                $scope.refreshReport();
            }
            //$scope.report.scale = scale.landcape;
            $('.mainWrap').addClass("mainWrapReport");
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            break;
                        }
                    }

                    viewer.reportSource({
                        report: report.Report, //viewer.reportSource().report,
                        parameters: { filter: getReportFilter(), viewType: report.Key }
                    });
                    viewer.refreshReport();
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Tài chính, mối quan tâm ' + report.Name + ' (' + report + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                } else {
                    //refresh chart 
                    // console.log("Chart");
                    if ($scope.report.ViewType == 'SalePerformance') {
                        $scope.saleByDayCols.dataSource.read();
                    }
                }
            }

            $scope.filterByDateRange = function () {
                if (!$scope.filter.StartDate && !$scope.filter.EndDate) {
                    _logger.error($scope._l.errInputDateTimeFilter);
                    return;
                }
                $scope.lblOtherTimeFilter = ($scope.filter.StartDate ? $filter('date')($scope.filter.StartDate, 'dd/MM/yyyy') : "") + " - " + ($scope.filter.EndDate ? $filter('date')($scope.filter.EndDate, 'dd/MM/yyyy') : "");
                $scope.filter.TimeRange = 'other';
                //$scope.dateFilterPopup.close();
                $scope.refreshReport();
            };

            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                //console.log(f.BranchIds);
                return JSON.stringify(f);
            }

            function getChartParams() {
                var r = {
                    Filter: getReportFilter(),
                    viewType: $scope.report.ViewType
                };
                return r;
            }


            var getTimeLables = function () {
                return {
                    'month': $scope._l.lblTimeFilterbyMonth,
                    'quarter': $scope._l.lblTimeFilterbyQuarter,
                    'year': $scope._l.lblTimeFilterbyYear

                };
            }
            var daySaleDs = {
                transport: {
                    read: {
                        url: "/api/report/financial?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                }
            };


            var options = _chartHelper.getSaleColOptions();
            daySaleDs.schema = {
                parse: function (response) {
                    if (response)
                    {
                        _chartHelper.getSalePerformanceParseFunc($scope.saleDayChart).call(this, response);
                        updateChartTitle();
                    } else {
                        return [];
                    }
                    
                    return response;
                }
            };
            options.dataSource = new kendo.data.DataSource(daySaleDs);
            var timeLabels = getTimeLables();
            options.title = {
                text: timeLabels[$scope.filter.TimeRange] //"Doanh thu theo thoi gian"
            };

            $scope.saleByDayCols = options;

            $scope.changeReportMode = function () {
                $scope.report.showing = !($scope.report.Mode == 'chart');
                // console.log($scope.report.showing);
                if ($scope.report.showing)
                    initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }

            }

            function initReport() {
                console.log("Init Viewer");
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }

                    //console.log($scope.report);
                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html', //'/ReportViewer/templates/telerikReportViewerTemplate.html',

                            reportSource: {
                                //report: "KiotViet.Reports.SaleReport, KiotViet.Reports",
                                report: $scope.report.Report, //"SaleReport",
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: scale.landcape,
                            ready: function () {
                                //this.refreshReport();
                            },
                        });
                }
                $scope.report.showing = true;
                $('.mainWrap').addClass("mainWrapReport");
            }

            $scope.initReport = initReport;
        }
    ]).
    controller('ReportLiabilitiesCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', '$timeout', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, $timeout, _auditTrail) {
            $scope.DebtFrom = 100;
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.customerDebt, Key: 'LiabilitiesReport', Report: 'CustomerDebtReport' },
                    { Name: $scope._l.supplierDebt, Key: 'SupplierDebtReport', Report: 'SupplierDebtReport' }
                ];

            function getAuthorizedReports(reportList) {
                var base = 'LiabilitiesReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    if ($scope._p.has(base + r.Report))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            _common.getTime(function (cur) {
                $scope.curDate = cur;
                //update label
                // updateChartTitle();
            });
            $scope.report = { ViewType: $scope.reportTypes[defaultReportType].Key, showing: false, init: false, Mode: 'data', Report: $scope.reportTypes[defaultReportType].Report };
            $scope.filter = {};
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';
            $scope.reportTypeChanged = function () {
                //update default branch filter 
                $scope.filter.BranchIds = $scope.currentBranchIds;
                $scope.refreshReport();
            }
            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }
            
            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    if (!viewer) {
                        initReport();
                    }
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            break;
                        }
                    }
                    if (report && viewer) {
                        viewer.reportSource({
                            report: report.Report,
                            parameters: { filter: getReportFilter(), viewType: report.Key }
                        });
                        viewer.refreshReport();
                    }
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Công nợ, mối quan tâm ' + report.Name + ' (' + report + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                }
            }

            $scope.filterByDateRange = function () {
                if (!$scope.filter.StartDate) {
                    _logger.error($scope._l.errInputDateTimeFilter);
                    return;
                }
                $scope.lblOtherTimeFilter = $scope._l.from + ": " + ($scope.filter.StartDate ? $filter('date')($scope.filter.StartDate, 'dd/MM/yyyy') : "");
                $scope.filter.TimeRange = 'other';
                //$scope.dateFilterPopup.close();
                $scope.refreshReport();
            };


            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                }
                //  f.Keyword = $scope.filter.keywordParam;
                f.DebtFrom = $scope.DebtFrom;
                f.DebtTo = $scope.DebtTo;
                //console.log(f.BranchIds);
                return JSON.stringify(f);
            }

            $scope.changeReportMode = function () {
                $scope.report.showing = !($scope.report.Mode == 'chart');
                //console.log($scope.report.showing);
                if ($scope.report.showing)
                    initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }

            }

            function initReport() {
                console.log("Init Viewer");
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }
                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html', //'/ReportViewer/templates/telerikReportViewerTemplate.html',

                            reportSource: {
                                //report: "KiotViet.Reports.SaleReport, KiotViet.Reports",
                                report: $scope.report.Report, //"SaleReport",
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                                //this.refreshReport();
                            },
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;
        }
    ])
    .controller('ReportCustomerCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', 'CustomerReportResource', '$timeout', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, _customerReportResource, $timeout, _auditTrail) {
            $scope.hasBothType = false;
            $scope.branches = _session.branchs;                        
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.report_CustomerSale, Key: 'Sale', Report: 'Customer.CustomerSale', isBoth: true, noCodeFilter: true, noProductType: true, noVariants: true, noCategoryFilter: true, noDebt: true, hasChart: true },
                    { Name: $scope._l.report_CustomerProduct, Key: 'Product', Report: 'Customer.CustomerProduct', isBoth: false, noCodeFilter: true, noProductType: true, noVariants: true, noCategoryFilter: true, noDebt: true, hasChart: false, isLandcape: true },
                    //{ Name: $scope._l.report_CustomerProductSold, Key: 'ProductSold', Report: 'Customer.CustomerProductSold', isBoth: false, noDebt: true, hasChart: false },
                    { Name: $scope._l.report_Liabilities, Key: 'Debt', Report: 'Customer.BigCustomerDebt', isBoth: false, noCodeFilter: true, noProductType: true, noVariants: true, noCategoryFilter: true, hasChart: true },
                    { Name: $scope._l.profit, Key: 'Profit', Report: 'Customer.CustomerProfit', isBoth: false, isLandcape: true, noDebt: true, hasChart: false }
                ];

            function getAuthorizedReports(reportList) {
                var base = 'CustomerReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("Customer.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            _common.getTime(function (cur) {
                $scope.curDate = cur;
                //updateChartTitle();
            }, function () { });

            function getQuarter(d) {
                var m = d.getMonth();
                return parseInt(m / 3 + 1);
            }


            /*function updateChartTitle() {
                if ($scope.customerSaleChart || $scope.customerDebtChart) {
                    timeLabels = getTimeLables();
                    var title = timeLabels[$scope.filter.TimeRange];
                    if ($scope.filter.TimeRange === 'other') {
                        title += ' ' + $scope.lblOtherTimeFilter;
                    } else {
                        title += ' ' + getCurTimeLabel($scope.filter.TimeRange);
                    }

                    $scope.customerSaleChart.setOptions({
                        title: {
                            text: title
                        }
                    });
                    $scope.customerDebtChart.setOptions({
                        title: {
                            text: title
                        }
                    });
                }
            }*/

            $scope.report = {
                ViewType: $scope.reportTypes[defaultReportType].Key,
                hasChart: $scope.reportTypes[defaultReportType].hasChart,
                showing: false,
                init: false,
                Mode: $scope.reportTypes[defaultReportType].hasChart == true ? 'chart' : 'data',
                Report: $scope.reportTypes[defaultReportType].Report
            };
            $scope.filter = {};
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';
            $scope.filter.FromDebt = 100;
            $scope.reportTypeChanged = function () {
                updateFilter();
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                } else if (!$scope.report.showing && !$scope.report.init && $scope.report.hasChart) {
                    $scope.refreshReport();
                }
            }

            function getBigReport(callback) {
                if ($scope.report.ViewType) {
                    _customerReportResource.useBigReport({ Filter: getReportFilter(), ViewType: $scope.report.ViewType }, function (data) {
                        execCb(callback, data);
                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                }
                else {
                    execCb(callback);
                }
            }

            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                var rp;
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            $scope.hasBothType = report.isBoth;
                            rp = report.Report;
                            if ($scope.hasBothType && $scope.reportView) {
                                rp = rp + "LC";
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else if (report.isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }
                            break;
                        }
                    }
                    getBigReport(function (data) {
                        if (data) {
                            console.log('CountOfCustomer: ' + data.Customer + ' ------ ThresholdCustomer: ' + threshold.customer);
                            console.log('CountOfReport: ' + data.Count + ' ------ ThresholdReport: ' + threshold.document);                            
                            if ($scope.report.ViewType == 'Debt' && data.Customer < threshold.customer) {
                                rp += 'Lv2';
                            }
                            else {
                                if (data.Count > threshold.document || data.Customer >= threshold.customer) {
                                    if ($scope.report.ViewType != 'Debt') {
                                        rp = rp.replace('Customer.', 'Customer.Big');
                                    }
                                    if (data.Customer < threshold.customer) {
                                        rp += 'Lv2';
                                    }
                                }
                            }
                        }
                        viewer.reportSource({
                            report: rp,
                            parameters: { filter: getReportFilter(), viewType: report.Key }
                        });
                        viewer.refreshReport();
                        viewer.scale({
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale
                        });
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Khách hàng, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                } else {
                    $scope.hasBothType = false;
                    if ($scope.report.ViewType == 'Sale') {
                        $scope.customerSaleBars.dataSource.read();
                    } else if ($scope.report.ViewType == 'Debt') {
                        $scope.customerDebtBars.dataSource.read();
                    }
                }
            }
            updateFilter();

            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noCodeFilter = r.noCodeFilter;
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        //add for customer filter
                        $scope.filter.noCustomerGroup = r.noCustomerGroup;
                        $scope.filter.noCustomerCode = r.noCustomerCode;
                        $scope.filter.noDebt = r.noDebt;
                        //    console.log($scope.filter);
                        $scope.report.barSeries = r.barSeries;
                        $scope.report.barLabel = r.barLabel;
                        $scope.report.hasChart = r.hasChart;
                        break;
                    }
                }
                if (!$scope.report.hasChart) {
                    $scope.report.Mode = 'data';
                    $scope.report.showing = true;
                }
            }

            $scope.ChangeViewType = function (type) {
                updateFilter();
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }

            }

            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                if (($scope.report.ViewType == 'Sale' || $scope.report.ViewType == 'Debt') && $scope.report.Mode == 'chart')
                    f.Top = 10;
                else f.Top = null;
                return JSON.stringify(f);
            }

            function getChartParams() {
                var r = {
                    Filter: getReportFilter(),
                    viewType: $scope.report.ViewType
                };
                return r;
            }


            var commonOpt = {
                theme: 'flat',
                legend: {
                    visible: false,
                    position: 'bottom'
                },
                seriesDefaults: {
                    type: "bar"
                },
                series:
                [
                    {
                        field: "Value",
                        name: "Subject",
                    }
                ],
                seriesColors: ["#7fba00", "#ffa800", "#00aff0", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                categoryAxis: {
                    field: "Subject",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        template: "#:truncate(value)#"
                    }

                },
                valueAxis: {
                    labels: {
                        template: app.config.chartLabelTemplate
                    },
                    majorUnit: 1000000,
                    line: {
                        visible: true
                    },
                    minorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    template: "${kendo.toString(value, 'n0')} - ${category}"
                }
            }

            var commonDs = {
                transport: {
                    read: {
                        url: "/api/charts/customer?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                }
            };

            function getResponseHandler(chart) {
                return function (response) {
                    var max = response.reduce(function (ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                    chart = typeof chart === 'function' ? chart.call(null) : chart;
                    var unit = _chartHelper.caliberate(max);
                    var maxval = _chartHelper.caliberateMax(max);
                    maxval = maxval <= max ? max + unit : maxval;
                    chart.setOptions({
                        valueAxis: {
                            max: maxval,
                            majorUnit: unit
                        }
                    });
                    return response;
                }
            }

            var customerSaleDS = angular.copy(commonDs);
            customerSaleDS.schema = {
                parse: getResponseHandler(function () { return $scope.customerSaleChart })
            }
            customerSaleDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var customerSaleOptions = angular.copy(commonOpt);
            customerSaleOptions.dataSource = new kendo.data.DataSource(customerSaleDS);
            customerSaleOptions.title = {
                text: $scope._l.report_Top10CustomerPayTitle
            };
            $scope.customerSaleBars = customerSaleOptions;

            var customerDebtDS = angular.copy(commonDs);
            customerDebtDS.schema = {
                parse: getResponseHandler(function () { return $scope.customerDebtChart })
            }
            customerDebtDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var customerDebtOptions = angular.copy(commonOpt);
            customerDebtOptions.dataSource = new kendo.data.DataSource(customerDebtDS);
            customerDebtOptions.title = {
                text: $scope._l.report_Top10CustomerDebtTitle
            };
            $scope.customerDebtBars = customerDebtOptions;

            $scope.changeReportMode = function () {
                updateFilter();
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }

            }

            function initReport() {
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }
                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html', //'/ReportViewer/templates/telerikReportViewerTemplate.html',

                            reportSource: {
                                //report: "KiotViet.Reports.SaleReport, KiotViet.Reports",
                                report: $scope.report.Report, //"SaleReport",
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                                //this.refreshReport();

                            },
                            renderingBegin: function () {
                                //console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;

            //init at the first time
            if ($scope.report.Mode == 'data') {
                initReport();
            }
        }
    ])
    .controller('ReportSupplierCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', '$timeout', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, $timeout, _auditTrail) {
            $scope.hasBothType = false;
            $scope.branches = _session.branchs;
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.purchase_TitleAdd, isBoth: true, Key: 'PurchaseOrder', Report: 'Supplier.PurchaseOrderReport', noCodeFilter: true, noVariants: true, noCategoryFilter: true, noProductType: true, hasChart: true },
                    { Name: $scope._l.report_pucharetBySuplierTitle, isBoth: false, Key: 'Supplier', Report: 'Supplier.SupplierInforReport', noCodeFilter: true, noVariants: true, noCategoryFilter: true, noProductType: true, hasChart: false },
                    //{ Name: $scope._l.product, isBoth: false, Key: 'Product', Report: 'Supplier.ByProductReport', hasChart: false },
                    { Name: $scope._l.report_Liabilities, isBoth: false, Key: 'Liabilities', Report: 'Supplier.BigByLiabilitiesReport', noCodeFilter: true, noVariants: true, noCategoryFilter: true, noProductType: true, hasChart: true },
                ];

            function getAuthorizedReports(reportList) {
                var base = 'SupplierReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("Supplier.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            //_common.getTime(function (cur) {
            //    $scope.curDate = cur;
            //    //update label
            //    updateChartTitle();
            //}, function () { });

            function getQuarter(d) {
                var m = d.getMonth();
                return parseInt(m / 3 + 1);
            }

            function getCurTimeLabel(timeRange) {
                if (timeRange == 'month') {
                    return $scope.curDate ? $filter('date')($scope.curDate, 'MM/yyyy') : '';
                } else if (timeRange == 'year') {
                    return $scope.curDate ? $scope.curDate.getFullYear() : '';
                } else if (timeRange == 'quarter') {
                    return $scope.curDate ? ('Q' + getQuarter($scope.curDate) + ' ' + $scope.curDate.getFullYear()) : '';
                } else {
                    return '';
                }
            }

            //var getTimeLables = function () {
            //    return {
            //        'month': $scope.report.ViewType === "PurchaseOrder" ? $scope._l.report_RevenueMonth : $scope._l.report_ProfitMonth,
            //        'quarter': $scope.report.ViewType === "'PurchaseOrder" ? $scope._l.report_RevenueQuarter : $scope._l.report_ProfitQuarter,
            //        'year': $scope.report.ViewType === "PurchaseOrder" ? $scope._l.report_RevenueYear : $scope._l.report_ProfitYear,
            //        'other': $scope.report.ViewType === "PurchaseOrder" ? $scope._l.report_RevenuePeriod : $scope._l.report_ProfitPeriod

            //    };
            //}

            //function updateChartTitle() {
            //    if ($scope.purchaseOrderChart || $scope.liabilitiesChart) {
            //        var timeLabels = getTimeLables();
            //        var title = timeLabels[$scope.filter.TimeRange];
            //        if ($scope.filter.TimeRange === "other") {
            //            title += " " + $scope.lblOtherTimeFilter;
            //        } else {
            //            title += " " + getCurTimeLabel($scope.filter.TimeRange);
            //        }

            //        $scope.purchaseOrderChart.setOptions({
            //            title: {
            //                text: title
            //            }
            //        });
            //        $scope.liabilitiesChart.setOptions({
            //            title: {
            //                text: title
            //            }
            //        });
            //    }
            //}

            $scope.report = {
                ViewType: $scope.reportTypes[defaultReportType].Key,
                showing: false,
                init: false,
                hasChart: $scope.reportTypes[defaultReportType].hasChart,
                Mode: $scope.reportTypes[defaultReportType].hasChart == true ? 'chart' : 'data',
                Report: $scope.reportTypes[defaultReportType].Report
            };
            $scope.filter = {};
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';
            $scope.filter.DebtFrom = 100;
            $scope.reportTypeChanged = function () {
                updateFilter();
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                } else if (!$scope.report.showing && !$scope.report.init && $scope.report.hasChart) {
                    $scope.refreshReport();
                }
            }
            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                var rp;
                if ($scope.report.Mode === "data") {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            $scope.hasBothType = report.isBoth;
                            rp = report.Report;
                            if ($scope.hasBothType && $scope.reportView) {
                                rp = rp + "LC";
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else if (report.isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }
                            break;
                        }
                    }

                    viewer.reportSource({
                        report: rp,
                        parameters: { filter: getReportFilter(), viewType: report.Key }
                    });
                    viewer.refreshReport();
                    viewer.scale({
                        scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                        scale: $scope.report.scale
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Nhà cung cấp, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                } else {
                    $scope.hasBothType = false;
                    if ($scope.report.ViewType === "PurchaseOrder") {
                        $scope.purchaseOrderBars.dataSource.read();
                    } else if ($scope.report.ViewType === "Liabilities") {
                        $scope.liabilitiesBars.dataSource.read();
                    }
                }
            }
            updateFilter();
            $scope.ChangeViewType = function (type) {
                updateFilter();
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }
            }

            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noCodeFilter = r.noCodeFilter;
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        $scope.report.hasChart = r.hasChart;
                        //console.log($scope.filter);
                        break;
                    }
                }
                if (!$scope.report.hasChart) {
                    $scope.report.Mode = 'data';
                    $scope.report.showing = true;
                }
            }

            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                if ($scope.report.ViewType !== 'PurchaseOrder') {
                    $scope.currentSupplierIds = angular.copy($scope.filter.SupplierIds);
                    $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                    $scope.currentEmployeeIds = angular.copy($scope.filter.EmployeeIds);
                }
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                if (($scope.report.ViewType == 'PurchaseOrder' || $scope.report.ViewType == 'Liabilities') && $scope.report.Mode == 'chart')
                    f.Top = 10;
                else f.Top = null;
                return JSON.stringify(f);
            }

            function getChartParams() {
                var r = {
                    Filter: getReportFilter(),
                    viewType: $scope.report.ViewType
                };
                return r;
            }

            var commonOpt = {
                theme: 'flat',
                legend: {
                    visible: false,
                    position: 'bottom'
                },
                seriesDefaults: {
                    type: "bar"
                },
                series:
                [
                    {
                        field: "Value",
                        name: "Subject",
                    }
                ],
                seriesColors: ["#7fba00", "#ffa800", "#00aff0", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                categoryAxis: {
                    field: "Subject",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        template: "#:truncate(value)#"
                    }
                },
                valueAxis: {
                    labels: {
                        template: app.config.chartLabelTemplate
                    },
                    majorUnit: 1000000,
                    line: {
                        visible: true
                    },
                    minorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    template: "${kendo.toString(value, 'n0')} - ${category}"
                }
            }

            var commonDs = {
                transport: {
                    read: {
                        url: "/api/charts/supplier?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                }
            };

            var purchaseOrderDS = angular.copy(commonDs);

            function getResponseHandler(chart) {
                return function (response) {
                    var max = response.reduce(function (ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                    chart = typeof chart === 'function' ? chart.call(null) : chart;
                    var unit = _chartHelper.caliberate(max);
                    var maxval = _chartHelper.caliberateMax(max);
                    maxval = maxval <= max ? max + unit : maxval;
                    chart.setOptions({
                        valueAxis: {
                            max: maxval,
                            majorUnit: unit
                        }
                    });
                    return response;
                }
            }

            purchaseOrderDS.schema = {
                parse: getResponseHandler(function () { return $scope.purchaseOrderChart })
            }
            purchaseOrderDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var purchaseOrderOptions = angular.copy(commonOpt);
            purchaseOrderOptions.dataSource = new kendo.data.DataSource(purchaseOrderDS);
            purchaseOrderOptions.title = {
                text: $scope._l.report_Top10SupplierPurcharseTitle
            };
            $scope.purchaseOrderBars = purchaseOrderOptions;

            var liabilitiesDS = angular.copy(purchaseOrderDS);
            liabilitiesDS.schema = {
                parse: getResponseHandler(function () { return $scope.liabilitiesChart })
            }
            liabilitiesDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var liabilitiesBarOptions = commonOpt;
            liabilitiesBarOptions.dataSource = new kendo.data.DataSource(liabilitiesDS);
            liabilitiesBarOptions.title = {
                text: $scope._l.report_Top10SupplierDebtTitle
            };
            $scope.liabilitiesBars = liabilitiesBarOptions;

            $scope.changeReportMode = function () {
                updateFilter();
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }
            }

            function initReport() {
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }

                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html',
                            reportSource: {
                                report: $scope.report.Report,
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                            },
                            renderingBegin: function () {
                                console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;

            //init at the first time
            if ($scope.report.Mode == 'data') {
                initReport();
            }
        }
    ])
    .controller('ReportUserCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', 'UserReportResource', '$timeout', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, _userReportResource, $timeout, _auditTrail) {
            $scope.hasBothType = false;
            $scope.branches = _session.branchs;
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.report_Sale, isBoth: true, Key: 'BySale', Report: 'User.BySaleReport', noCodeFilter: true, noVariants: true, noCategoryFilter: true, noProductType: true, hasChart: true },
                    { Name: $scope._l.report_UserProduct, isBoth: false, hasChart: false, Key: 'ByUser', Report: 'User.ByUserReport' },
                    //{ Name: $scope._l.product, isBoth: false, hasChart: false, Key: 'ByProduct', Report: 'User.ByProductReport' },
                    { Name: $scope._l.sale_ReportProfit, isBoth: false, Key: 'ByProfit', Report: 'User.ByProfitReport', isLandcape: true, hasChart: false },
                ];

            function getAuthorizedReports(reportList) {
                var base = 'UserReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("User.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            _common.getTime(function (cur) {
                $scope.curDate = cur;
                //update label
                updateChartTitle();
            }, function () { });

            function getQuarter(d) {
                var m = d.getMonth();
                return parseInt(m / 3 + 1);
            }

            function getCurTimeLabel(timeRange) {
                if (timeRange == 'month') {
                    return $scope.curDate ? $filter('date')($scope.curDate, 'MM/yyyy') : '';
                } else if (timeRange == 'year') {
                    return $scope.curDate ? $scope.curDate.getFullYear() : '';
                } else if (timeRange == 'quarter') {
                    return $scope.curDate ? ('Q' + getQuarter($scope.curDate) + ' ' + $scope.curDate.getFullYear()) : '';
                } else {
                    return '';
                }
            }

            function updateChartTitle() {
                if ($scope.saleDayChart) {
                    var timeLabels = getTimeLables();
                    var title = timeLabels[$scope.filter.TimeRange];
                    if ($scope.filter.TimeRange === 'other') {
                        title += ' ' + $scope.lblOtherTimeFilter;
                    } else {
                        title += ' ' + getCurTimeLabel($scope.filter.TimeRange);
                    }

                    $scope.saleDayChart.setOptions({
                        title: {
                            text: title
                        }
                    });
                }
            }

            $scope.report = {
                ViewType: $scope.reportTypes[defaultReportType].Key,
                showing: false,
                hasChart: $scope.reportTypes[defaultReportType].hasChart,
                init: false,
                Mode: $scope.reportTypes[defaultReportType].hasChart == true ? 'chart' : 'data',
                Report: $scope.reportTypes[defaultReportType].Report
            };

            $scope.filter = {};
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';
            $scope.reportTypeChanged = function () {
                updateFilter();
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                } else if (!$scope.report.showing && !$scope.report.init && $scope.report.hasChart) {
                    $scope.refreshReport();
                }
            }
            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");

            function getBigReport(callback) {
                if ($scope.report.ViewType == 'ByUser') {
                    var r = _userReportResource.useBigReport({ Filter: getReportFilter(), ViewType: $scope.report.ViewType });
                    r.$promise.then(function (result) {
                        execCb(callback, result);
                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                }
                else {
                    execCb(callback);
                }
            }
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                var rp;
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            $scope.hasBothType = report.isBoth;
                            rp = report.Report;
                            if ($scope.hasBothType && $scope.reportView) {
                                rp = rp + "LC";
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else if (report.isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }
                            break;
                        }
                    }
                    getBigReport(function (data) {
                        if (data) console.log('CountOfReport: ' + data.Count + ' ------ ThresholdReport: ' + threshold.document);
                        if (data && data.Count > threshold.document) {
                            rp = rp.replace('User.', 'User.Big');
                        }
                        viewer.reportSource({
                            report: rp,
                            parameters: { filter: getReportFilter(), viewType: report.Key }
                        });
                        viewer.refreshReport();
                        viewer.scale({
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale
                        });
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Nhân viên, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                }
                else {
                    $scope.hasBothType = false;
                    if ($scope.report.ViewType == 'BySale') {
                        $scope.salepersonBars.dataSource.read();
                    }
                }
            }
            updateFilter();
            $scope.ChangeViewType = function (type) {
                updateFilter();
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }
            }

            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noCodeFilter = r.noCodeFilter;
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        $scope.report.hasChart = r.hasChart;
                        //console.log($scope.filter);
                        break;
                    }
                }
                if (!$scope.report.hasChart) {
                    $scope.report.Mode = 'data';
                    $scope.report.showing = true;
                }
            }

            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                if ($scope.report.ViewType !== 'ByProduct') {
                    $scope.currentSupplierIds = angular.copy($scope.filter.SupplierIds);
                    $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                    $scope.currentEmployeeIds = angular.copy($scope.filter.EmployeeIds);
                }
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                if ($scope.report.ViewType == 'BySale' && $scope.report.Mode == 'chart')
                    f.Top = 10;
                else f.Top = null;
                return JSON.stringify(f);
            }

            function getChartParams() {
                var r = {
                    Filter: getReportFilter(),
                    viewType: $scope.report.ViewType
                };
                return r;
            }

            var getTimeLables = function () {
                return {
                    'month': $scope.report.ViewType == 'BySale' ? $scope._l.report_RevenueMonth : $scope._l.report_ProfitMonth,
                    'quarter': $scope.report.ViewType == 'BySale' ? $scope._l.report_RevenueQuarter : $scope._l.report_ProfitQuarter,
                    'year': $scope.report.ViewType == 'BySale' ? $scope._l.report_RevenueYear : $scope._l.report_ProfitYear,
                    'other': $scope.report.ViewType == 'BySale' ? $scope._l.report_RevenuePeriod : $scope._l.report_ProfitPeriod
                };
            }
            var commonDs = {
                transport: {
                    read: {
                        url: "/api/charts/user?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                }
            };

            var barDS = angular.copy(commonDs);

            function getResponseHandler(chart) {
                return function (response) {
                    var max = response.reduce(function (ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                    chart = typeof chart === 'function' ? chart.call(null) : chart;
                    var unit = _chartHelper.caliberate(max);
                    var maxval = _chartHelper.caliberateMax(max);
                    maxval = maxval <= max ? max + unit : maxval;
                    chart.setOptions({
                        valueAxis: {
                            max: maxval,
                            majorUnit: unit
                        }
                    });
                    return response;
                }
            }

            barDS.schema = {
                parse: getResponseHandler(function () { return $scope.salepersonChart })
            }
            barDS.sort = {
                field: "Value",
                dir: "desc"
            }

            var commonOpt = {
                theme: 'flat',
                legend: {
                    visible: false,
                    position: 'bottom'
                },
                seriesDefaults: {
                    type: "bar"
                },
                seriesColors: ["#7fba00", "#ffa800", "#00aff0", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                series:
                [
                    {
                        field: "Value",
                        name: "Subject",
                    }
                ],
                categoryAxis: {
                    field: "Subject",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        template: "#:truncate(value)#"
                    }
                },
                valueAxis: {
                    labels: {
                        template: app.config.chartLabelTemplate
                    },
                    majorUnit: 1000000,
                    line: {
                        visible: true
                    },
                    minorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    template: "${kendo.toString(value, 'n0')} - ${category}"
                }
            }

            var salepersonOptions = angular.copy(commonOpt);
            salepersonOptions.dataSource = new kendo.data.DataSource(barDS);
            salepersonOptions.title = {
                text: $scope._l.report_RevenueSoldBy
            };

            $scope.salepersonBars = salepersonOptions;

            $scope.changeReportMode = function () {
                updateFilter();
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }
            }

            function initReport() {
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }
                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html',

                            reportSource: {
                                report: $scope.report.Report,
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                                //this.refreshReport();
                            },
                            renderingBegin: function () {
                                console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;

            //init at the first time
            if ($scope.report.Mode == 'data') {
                initReport();
            }
        }
    ])
    .controller('ReportPurchaseOrderCtrl', [
        '$scope', 'kvSession', 'logger', '$filter', 'CommonServices', 'ChartHelper', 'orderStatus', 'PurchaseOrderReportResource', '$timeout', 'AuditTrailResource',
        function ($scope, _session, _logger, $filter, _common, _chartHelper, orderStatus, _purchaseOrderReportResource, $timeout, _auditTrail) {
            $scope.hasBothType = false;
            $scope.branches = _session.branchs;
            $scope.orderStates = [];
            for (var i in orderStatus) {
                // don't include Void = 4 into filter
                if (i != 4)
                    $scope.orderStates.push({ id: i, name: orderStatus[i] });
            }
            var defaultReportType = 0,
                reports = [
                    { Name: $scope._l.product, isBoth: true, Key: 'ByProduct', hasChart: true, noDebt: true, Report: 'PurchaseOrder.ByProductReport' },
                    { Name: $scope._l.transactions, isBoth: true, Key: 'ByDoc', hasChart: true, noCustomerGroup: true, noDebt: true, Report: 'PurchaseOrder.ByDocReport' }
                ];

            function getAuthorizedReports(reportList) {
                var base = 'OrderReport_', result = [];
                for (var i = 0; i < reportList.length; i++) {
                    var r = reportList[i];
                    var rname = r.Report.replace("PurchaseOrder.", "");
                    if ($scope._p.has(base + rname))
                        result.push(r);
                }
                return result;
            }

            $scope.reportTypes = getAuthorizedReports(reports);
            _common.getTime(function (cur) {
                $scope.curDate = cur;
            }, function () { });

            function updateFilter() {
                for (var i = 0; i < $scope.reportTypes.length; i++) {
                    if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                        var r = $scope.reportTypes[i];
                        $scope.filter.noEndDate = r.noEndDate;
                        $scope.filter.noDateFilter = r.noDateFilter;
                        $scope.filter.noProductType = r.noProductType;
                        $scope.filter.noCodeFilter = r.noCodeFilter;
                        $scope.filter.noVariants = r.noVariants;
                        $scope.filter.noCategoryFilter = r.noCategoryFilter;
                        $scope.filter.noCustomerGroup = r.noCustomerGroup;
                        $scope.filter.noDebt = r.noDebt;
                        $scope.report.hasChart = r.hasChart;
                        break;
                    }
                }
                if (!$scope.report.hasChart) {
                    $scope.report.Mode = 'data';
                    $scope.report.showing = true;
                }
            }
            $scope.report = { ViewType: $scope.reportTypes[defaultReportType].Key, showing: false, init: false, hasChart: true, Mode: 'chart', Report: 'PurchaseOrder.ByProductReport' };
            $scope.filter = {};
            $scope.currentBranchIds = [_session.branch.id];
            $scope.filter.BranchIds = [_session.branch.id];
            $scope.filter.TimeRange = 'thisweek';
            $scope.reportTypeChanged = function () {
                updateFilter();
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                } else if (!$scope.report.showing && !$scope.report.init && $scope.report.hasChart) {
                    $scope.refreshReport();
                }
            }

            function getBigReport(callback) {
                _purchaseOrderReportResource.useBigReport({ Filter: getReportFilter(), ViewType: $scope.report.ViewType }, function (data) {
                    execCb(callback, data);
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            }


            $scope.report.scale = scale.portable;
            $('.mainWrap').removeClass("mainWrapReport");


            updateFilter();
            var trigger;
            $scope.refreshReport = function () {
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").show();
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                }
                else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.waitingDatePicker = function () {
                var b = false;
                $(".k-animation-container").each(function (item) {
                    if ($(this).find(".k-list").attr("aria-hidden") == "false") {
                        b = true;
                        return;
                    }
                });
                if ($(".reportLeft .reportsort").hasClass("reportsortActive") || b) {
                    if (trigger) {
                        $timeout.cancel(trigger);
                    }
                    trigger = $timeout($scope.waitingDatePicker, filterReportDelay);
                } else {
                    $scope.refreshReport_Org();
                }
            }

            $scope.refreshReport_Org = function () {
                var rp;
                if ($scope.report.Mode === 'data') {
                    $(".report-loading").hide();
                    //$(".report-loading").show();
                    var viewer = $("#reportViewer").data("telerik_ReportViewer"),
                        report = null;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            report = $scope.reportTypes[i];
                            $scope.hasBothType = report.isBoth;
                            rp = report.Report;
                            if ($scope.hasBothType && $scope.reportView) {
                                rp = rp + "LC";
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else if (report.isLandcape) {
                                $scope.report.scale = scale.landcape;
                                $('.mainWrap').addClass("mainWrapReport");
                            } else {
                                $scope.report.scale = scale.portable;
                                $('.mainWrap').removeClass("mainWrapReport");
                            }
                            break;
                        }
                    }
                    getBigReport(function (data) {
                        if (data) console.log('CountOfReport: ' + data.Count + ' ------ ThresholdReport: ' + threshold.detail);
                        if (data && data.Count > threshold.detail) {
                            rp = rp.replace('PurchaseOrder.', 'PurchaseOrder.Big');
                        }
                        viewer.reportSource({
                            report: rp,
                            parameters: { filter: getReportFilter(), viewType: report.Key }
                        });
                        viewer.refreshReport();
                        viewer.scale({
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale
                        });
                    });
                    // audit trail for report
                    if (auditTrailReport) {
                        var logReport = {
                            FunctionId: 28,
                            Action: 1,
                            UserId: _session.user.id,
                            BranchId: _session.branch.id,
                            RetailerId: _session.retailer.id,
                            Content: _session.user.username + ' truy cập báo cáo Đặt hàng, mối quan tâm ' + report.Name + ' (' + rp + ') ' + ' với tham số: ' + getReportFilter()
                        }
                        _auditTrail.save({ log: logReport });
                    }
                }
                else {
                    $scope.hasBothType = false;
                    if ($scope.report.ViewType == 'ByProduct') {
                        $scope.productBars.dataSource.read();
                    } else if ($scope.report.ViewType == 'ByDoc') {
                        $scope.documentBars.dataSource.read();
                    }
                }
            }

            $scope.ChangeViewType = function (type) {
                updateFilter();
                if ($scope.reportView != type) {
                    $scope.reportView = type;
                    $scope.refreshReport();
                }
            }


            function getReportFilter() {
                var f = angular.copy($scope.filter);
                // add timeStamp to avoid Telerik report's server-cache 
                f.timeStamp = new Date();
                if ($scope.report.ViewType !== 'ByProduct') {
                    $scope.currentBranchIds = angular.copy($scope.filter.BranchIds);
                    $scope.currentEmployeeIds = angular.copy($scope.filter.EmployeeIds);
                }
                if (f.TimeRange !== 'other') {
                    delete f['StartDate'];
                    delete f['EndDate'];
                } else {
                    if (f.StartDate) {
                        f.StartDate = f.StartDate.IgnoreTime();
                    }
                    if (f.EndDate) {
                        f.EndDate = f.EndDate.IgnoreTime();
                        f.EndDate = f.EndDate.DateAdd(1);
                    }
                }

                if (($scope.report.ViewType == 'ByProduct' || $scope.report.ViewType == 'ByDoc') && $scope.report.Mode == 'chart')
                    f.Top = 10;
                else f.Top = null;
                return JSON.stringify(f);
            }

            function getChartParams() {
                var r = {
                    Filter: getReportFilter(),
                    viewType: $scope.report.ViewType
                };
                return r;
            }

            function getResponseHandler(chart) {
                return function (response) {
                    var max = response.reduce(function (ac, p) { return ac > Math.abs(p.Value) ? ac : Math.abs(p.Value); }, 0);
                    chart = typeof chart === 'function' ? chart.call(null) : chart;
                    var unit = _chartHelper.caliberate(max);
                    var maxval = _chartHelper.caliberateMax(max);
                    maxval = maxval <= max ? max + unit : maxval;
                    chart.setOptions({
                        valueAxis: {
                            max: maxval,
                            majorUnit: unit
                        }
                    });
                    return response;
                }
            }

            var commonDs = {
                transport: {
                    read: {
                        url: "/api/charts/purchaseorder?format=json",
                        dataType: "json",
                        data: getChartParams
                    }
                }
            };

            var commonOpt = {
                theme: 'flat',
                legend: {
                    visible: false,
                    position: 'bottom'
                },
                seriesDefaults: {
                    type: "bar"
                },
                series:
                [
                    {
                        field: "Value",
                        name: "Subject",
                    }
                ],
                seriesColors: ["#7fba00", "#ffa800", "#00aff0", "#009ac6", "#e94977", "#5eaa02", "#bf302a", "#1969cc", "#e43c0d", "#fe9900", "#06941a", "#9d1599", "#a0410d", "#9e0b0f", "#a3620a", "#003663", "#4b0049", "#603913", "#662d91", "#004a80", "#64be5c", "#231f20", "#00652e", "#006c6e", "#2f69b3", "#ba006f", "#f05ba1", "#2e0557", "#382526", "#e11b22", "#645e00", "#81ca9c", "#2b6447", "#00a5e4", "#645faa", "#26247b", "#e3e41a", "#dd5928", "#3300ff", "#444444", "#c9009d", "#004f5d"],
                categoryAxis: {
                    field: "Subject",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        template: "#:truncate(value)#"
                    }
                },
                valueAxis: {
                    labels: {
                        template: app.config.chartLabelTemplate
                    },
                    majorUnit: 1000,
                    line: {
                        visible: true
                    },
                    minorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    template: "${value} - ${category}"
                }
            }

            var productDS = angular.copy(commonDs);
            productDS.schema = {
                parse: getResponseHandler(function () { return $scope.productChart })
            }
            productDS.sort = {
                field: "Value",
                dir: "desc"
            }
            var productOptions = angular.copy(commonOpt);
            productOptions.dataSource = new kendo.data.DataSource(productDS);
            productOptions.title = {
                text: $scope._l.report_Top10ProductReturnTitle
            };
            $scope.productBars = productOptions;

            var documentDS = angular.copy(commonDs);
            documentDS.schema = {
                parse: getResponseHandler(function () { return $scope.documentChart })
            }
            documentDS.sort = {
                field: "Value",
                dir: "desc"
            }
            var documentOptions = commonOpt;
            documentOptions.dataSource = new kendo.data.DataSource(documentDS);
            documentOptions.title = {
                text: $scope._l.report_Top10CustomerReturnTitle
            };
            $scope.documentBars = documentOptions;

            $scope.changeReportMode = function () {
                updateFilter();
                $scope.report.showing = !($scope.report.Mode == 'chart');
                if ($scope.report.showing)
                    $scope.initReport();
                if ($scope.report.init) {
                    $scope.filter.timeStamp = new Date();
                    $scope.refreshReport();
                }
            }

            function initReport() {
                if (!$scope.report.init) {
                    $scope.report.init = true;
                    for (var i = 0; i < $scope.reportTypes.length; i++) {
                        if ($scope.reportTypes[i].Key === $scope.report.ViewType) {
                            $scope.report.Report = $scope.reportTypes[i].Report;
                            break;
                        }
                    }

                    $("#reportViewer")
                        .telerik_ReportViewer({
                            serviceUrl: "/webapi/reports/",
                            templateUrl: '/Content/reportviewer/partial/telerikReportViewerTemplate.html',

                            reportSource: {
                                report: $scope.report.Report,
                                parameters: { filter: getReportFilter(), viewType: $scope.report.ViewType }
                            },
                            viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                            scale: $scope.report.scale,
                            ready: function () {
                                //this.refreshReport();
                            },
                            renderingBegin: function () {
                                //   console.log('show');
                            }
                        });
                }
                $scope.report.showing = true;
            }

            $scope.initReport = initReport;
        }
    ]);
;
'use strict'
kvApp.controller('ReturnListCtrl', ['$scope', 'BranchResource', 'kvSession', 'refundStatus', 'kendofilter', '$routeParams', 'PaymentResource', 'returnGridColumns', 'kvExportToExcel', 'logger', '$filter', 'refundStatusMap', '$timeout','paymentMethods','settings','SurchargeResource',
    function ($scope, _branches, _session, _refundStatus, _filter, $routeParams, _payments, returnGridColumns, _export, _logger, $filter, _status, $timeout, _paymentMethod, _setting, _surcharge) {
        $scope.filter = {};
        $scope.filter.branchids = $scope.currentBranch.Id ? [$scope.currentBranch.Id] : [];
        $scope.branches = _branches.get({ Permission: 'Invoice_Read' }, function () {
            $scope.filter.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];
        });
        $scope.currentBranchId = _session.branch.Id;
        var kvDropbox = {};
        //$scope.filter.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch.Id];

        //$scope.branches = { Data: [{ Name: 'test', Id: _session.branch.id }, { Name: 'test', Id: 112 }] };
        $scope.pageSizes = pager.pageSizes;
        //console.log($scope.branchids);
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };
        $scope.detailTemplate = kendo.template($("#templDetail").html());

        $scope.bindedGrid;
        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };
        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            //remove any other filter 
            $scope.filter.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
        }

        $scope.settings = _setting;
        //Function change page size
        $scope.refresh = function () {
            $scope.refunds.pageSize(parseInt($scope.pageSize));
        };
        $scope.refundStatus = [];
        for (var idx in _refundStatus) {
            //_invoiceStatus.map(function (s, idx) { return  });
            if (idx == _status.Done)
                $scope.refundStatus.push({ key: idx, value: _refundStatus[idx], checked: true });
            else
                $scope.refundStatus.push({ key: idx, value: _refundStatus[idx], checked: false });

        }
        $scope.onsave = function () {
            $scope.refunds.read();
            // console.log("Save");
        };
        function filterbyExtention() {
            var para = {};
            para.ProductKey = $scope.filterProduct;
            para.CustomerKey = $scope.filterCustomer;
            para.UserNameKey = $scope.filterUserName;
            para.InvoiceKey = $scope.filterInvoice;
            para.SerialKey = $scope.filterSerial;
            return para;
        }

        var r2 = _surcharge.get({ Permission: 'Surcharge_Read' });
        r2.$promise.then(function (dp) {
            $scope.surcharges = dp.Data;
        });

        $scope.refunds = new kendo.data.DataSource({
            type: "odata",
            autoSync: false,
            transport: {
                read: {
                    url: "/api/returns?format=json&Includes=Branch&Includes=Invoice&Includes=Customer&Includes=TotalReturn&Includes=TotalQuantity&Includes=TotalPayment&Includes=ReceivedBy&Includes=PaymentCode&Includes=PaymentId&Includes=Payments&Includes=User&ForSummaryRow=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests               
                    //tranditional: true 
                    data: filterbyExtention
                }
            },
            pageSize: pager.defaultList,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    //console.log(response);
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    if (response && (response.TotalValue || response.TotalValue == 0)) {
                        this.totalValue = kendo.toString(response.TotalValue, "n0");
                        this.hasSummaryRow = true;
                    }
                    if (response && response.Data) {
                        for (var i = 0 ; i < response.Data.length ; i++) {
                            var t = response.Data[i];
                            //console.log(t);
                            t.Customer = t.Customer ? t.Customer : { Name: $scope._l.guest };
                            t.Branch = t.Branch ? t.Branch : { Name: '' };
                            t.Invoice = t.Invoice ? t.Invoice : { Code: '' };
                            t.StatusValue = t.Status;
                            t.Status = _refundStatus[t.Status];
                            t.TotalPayment *= -1;
                            t.ReceivedBy = t.ReceivedBy ? t.ReceivedBy : { GivenName: '' };
                            t.TotalPayment = Math.abs(t.TotalPayment);
                            if (t.Payments && t.Payments.length > 0) {
                                t.PaymentMethod = _paymentMethod[t.Payments[0].Method];
                            }
                            // Summary row
                            if (t.Id < 0) {
                                t.ReturnDate = "";
                                t.Customer = "";
                                //t.TotalPayment = "";
                            }

                            // final return amount
                            t.ReturnAmount = t.TotalReturn - (t.ReturnDiscount ? t.ReturnDiscount : 0) - (t.ReturnFee ? t.ReturnFee : 0);

                            //
                            t.surcharges = $scope.surcharges;
                        }
                    }
                    return response;
                },
                model: {
                    fields: {
                        ReturnDate: { type: "date" },
                        'Branch.Name': { type: "string" },
                        'Invoice.Code': { type: "string" }
                    }
                }
            }
        });

        $scope.grdColumns = returnGridColumns;

        $scope.export = function () {
            var filter = $scope.refunds.reader.kvFilter;
            var columns = [];

            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            columns = _export.getGridColumns("grdReturns");

            var type = "Return";
            var fileName = "DanhSachTraHang";
            var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
            _export.toExcel(type, fileName, data);
        };
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filterName = $routeParams.Code;
            //remove any other filter 
            $scope.filter.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
        }

        function initFilter() {

            var filter = [];
            if ($routeParams.Code) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
            } else {
                if ($scope.filterName) {
                    filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filterName, 'contains')], 'and');
                }
                if ($scope.filterDescription) {
                    filter = _filter.append(filter, [_filter.newCondition('Description', $scope.filterDescription, 'contains')], 'and');
                }
                var values = $scope.filter.branchids;
                var condition = [];
                if (values && values.length > 0) {
                    for (var i = 0; i < values.length; i++) {
                        if (parseInt(values[i]) > 0) {
                            condition.push(_filter.newCondition("BranchId", parseInt(values[i]), "eq"));
                        }
                    }
                    filter = _filter.append(filter, condition, "or");
                }
                if ($scope.dateFilter.TimeRange == 'other') {
                    condition = [];
                    if ($scope.dateFilter.StartDate) {

                        var todate = new Date($scope.dateFilter.EndDate);
                        condition.push(_filter.newCondition("ReturnDate", $scope.dateFilter.StartDate, "ge"));
                        condition.push(_filter.newCondition("ReturnDate", new Date(todate.DateAdd(1)), "lt"));
                    }
                    filter = _filter.append(filter, condition, "and");
                } else if ($scope.dateFilter.TimeRange != '') {
                    condition = [
                        _filter.newCondition("ReturnDate", $scope.dateFilter.TimeRange, "eq")
                    ];
                    filter = _filter.append(filter, condition, "or");
                }
                values = $scope.refundStatus;
                condition = [];
                for (var k = 0; k < values.length; k++) {
                    if (values[k].checked && parseInt(values[k].key) > 0) {
                        condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                    }
                }
                if (condition.length > 0) {
                    filter = _filter.append(filter, condition, "or");
                }
            }
            return filter;
        }

        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
            //$("#otherCheck").prettyCheckable("check");
            $scope.dateFilter.TimeRange = 'other';
            $scope.filterUpdated();
            //$scope.dateFilterPopup.close();
        };

        $scope.dateFilterUpdated = function () {
            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else {
                $scope.filterUpdated();
            }
        };

        $scope.filterUpdated = function () {
            $scope.refunds.filter(initFilter());
        };

        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;
            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });

        };
    }])
.directive('kvReturnPopup', ['kvSession', 'logger', 'UserResource', 'ReturnResource', '$filter', 'kvConfirmBox', 'kvLabel', 'kvMessages', 'refundStatus', function (_session, _logger, _usersvc, _refundsvc, $filter, _msgbox, _l, _m, _refundStatus) {
    return {
        restrict: 'E',
        scope: { popupName: '@kvName' },
        link: function (scope, elem, attrs) {
            elem.on('$destroy', function () {
                if (scope.$parent && scope.popupName) {
                    delete scope.$parent[scope.popupName];
                }
            });
        },
        controller: [
            '$scope', function ($scope) {
                $scope._l = _l;
                $scope._m = _m;
                $scope.window = {
                    openDetail: function (data) {
                        //$scope.dataItem = data;
                        //refresh($scope);
                        $scope.wdReturnDetail.wrapper.addClass("k-window-poup k-window-masstel k-window-returnDetail");
                        $scope.wdReturnDetail.center().open();

                    }
                };

                $scope.dispose = function () {
                    $scope.dataItem = null;
                    $scope.returns = null;
                    $scope.cursellers = null;
                    $scope.onSave = null;
                    $scope.selectedProduct = null;
                };


                $scope.refreshData = function () {
                    $rootScope.$broadcast('refreshRefundGrid');
                };

                this.showReturn = function (id, selectedProduct, onSaveHandler) {
                    $scope.onSave = onSaveHandler;
                    $scope.selectedProduct = selectedProduct;
                    $scope.hasPayment = false;
                    $scope.refund = _refundsvc.get({ returnId: id, Includes: ["TotalReturn", "TotalQuantity", "Customer", "Branch", "TotalPayment", "ReceivedBy", "NewInvoice", "User", "PaymentCode", "PaymentId", "Payments"] }, function () {
                        $scope.wdReturnDetail.title($filter("stringFormat")("{0}", [$scope._l.lblRefund]));
                        $scope.refund.ReturnDate = kendo.parseDate($scope.refund.ReturnDate);
                        $scope.refund.Status = _refundStatus[$scope.refund.Status];
                        $scope.refund.Customer = $scope.refund.Customer ? $scope.refund.Customer : { Name: $scope._l.guest };
                        $scope.refund.TotalPayment = Math.abs($scope.refund.TotalPayment);
                        $scope.refund.ReturnAmount = $scope.refund.TotalReturn - ($scope.refund.ReturnDiscount ? $scope.refund.ReturnDiscount : 0) - ($scope.refund.ReturnFee ? $scope.refund.ReturnFee : 0);

                        if ($scope.refund.NewInvoice) {
                            $scope.refund.TotalInvoice = $scope.refund.NewInvoice.Total;
                        }

                        if (!$scope.refund.NewInvoiceId)
                            $scope.refund.SumTotal = $scope.refund.ReturnAmount;
                        else
                        {
                            $scope.refund.SumTotal = $scope.refund.ReturnAmount > $scope.refund.TotalInvoice ? Math.abs($scope.refund.ReturnAmount - $scope.refund.TotalInvoice) : 0;
                        }

                        
                    });
                    $scope.window.openDetail();

                };

                if ($scope.$parent && $scope.popupName) {
                    $scope.$parent[$scope.popupName] = this;
                }
            }
        ],
        templateUrl: _session.partialPath('return-popup.html')


    };
}])
.directive('refundForm', ['kvSession', 'kvLabel', 'kvEmptyGridFix', 'PaymentResource', 'kvConfirmBox', 'refundStatusMap', 'UserResource', '$filter', 'kvMessages', 'PrivilegeHelper','$compile','$timeout','ReturnResource',
    function (session, l, emptyGridFix, payments, msgbox, _status, _usersvc, $filter, _m, _p, $compile, $timeout, _returnsvc) {

        var detailColumns = [
                { field: "ProductCode", title: l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                { field: "ProductName", title: l.product_Name, headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
                { field: "Quantity", title: l.quantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtC" }, attributes: { "class": "tdSLB txtC" } },
                { field: "SellPrice", title: l.priceSale, format: "{0:n0}", headerAttributes: { "class": "tdPrice" }, attributes: { "class": "tdPrice" } },
                { field: "Price", title: l.refund_price, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } }
        ];

        return {
            restrict: 'E',
            scope: { dataSelectedProduct: '=kvDataSelectedProduct', dataItem: '=kvDataItem', noteditable: '=kvDisabled', onSave: '=kvOnSave' },
            link: function (scope, elem, attrs) {
                scope.hasvoidPayment = _p.has("Payment_Delete");
                scope.hasUpdatePayment = _p.has("Payment_Update");
                //console.log(scope.returnDetails.data()); 
                function loadDetail(itemId) {
                    
                    scope.sellers = _usersvc.getByRole({ Role: 'Return', BranchId: scope.dataItem.BranchId });
                    scope.disabled = (scope.dataItem.StatusValue == _status.Void) || scope.noteditable || !_p.has("Return_Update");
                    scope.hasVoid = _p.has('Return_Delete') && (scope.dataItem.StatusValue != _status.Void);

                    scope.return = _returnsvc.get({ returnId: itemId,Includes: ["TotalPayment","TotalReturn","Invoice"] }, function (data) {
                        scope.dataItem.CustomerDebt = data.CustomerDebt;
                        scope.dataItem.CustomerOldDebt = data.CustomerOldDebt;
                        scope.newInvoice = data.Invoice;
                        

                        if (scope.dataItem.TotalInvoice && scope.dataItem.ReturnAmount < scope.dataItem.TotalInvoice) {
                            scope.dataItem.SumTotal = 0;
                        }

                        if (!scope.dataItem.NewInvoiceId) {
                            scope.dataItem.SumTotal = scope.dataItem.ReturnAmount;
                            scope.dataItem.ReturnSumTotal = scope.dataItem.ReturnAmount;
                        }
                    });

                    var returnDetails = new kendo.data.DataSource({
                        type: "odata",
                        transport: {
                            read: {
                                url: "/api/returns/" + itemId + "/details?format=json&Includes=ProductName&Includes=ProductSName&Includes=ProductCode&Includes=Product",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        change: function (ob) {
                            scope.dataItem.ReturnDetails = ob.items;
                        },
                        serverPaging: false,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total",
                            parse: function (response) {
                                //do not display negative discount value 
                                angular.forEach(response.Data, function (r) {
                                    r.Description = r.Product.Description ? r.Product.Description : '';
                                    r.Unit = r.Product.Unit ? r.Product.Unit : '';
                                    r.Note = r.Product.OrderTemplate ? r.Product.OrderTemplate : '';
                                    r.BasePrice = r.Product.BasePrice;
                                    // get product name without unit in brackets
                                    r.ProductNameNoUnit = r.ProductName.replace(/ *\([^)]*\) */g, "");
                                    r.Discount = r.SellPrice - r.Price;
                                });
                                return response;
                            }
                        }
                    });

                    scope.showpopup = function (id) {
                        scope["serialpopup" + id].showWindow();
                    }

                    elem.find(".returnDetail").empty();
                    elem.find('.returnDetail').kendoGrid({
                        dataSource: returnDetails,
                        dataBinding: emptyGridFix,
                        columns: detailColumns,
                        dataBound: function (e) {
                            // add serial input
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    scope["serials" + row.Id] = row.SerialNumbers.split(",");
                                    scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",");
                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    if (row.SerialNumbers.split(",").length > maxShow)
                                        scope["truncatedSerials" + row.Id] = row.SerialNumbers.split(",").slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + scope._l.viewmore + '</a><kv-view-serial-popup kv-name="serialpopup' + row.Id + '" kv-source="serials' + row.Id + '"></kv-view-serial-popup>';
                                    var tags = angular.element($('<tr class="row-serial"><td colspan="5"><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag}}</li></ul>' + popup + '</td></tr>'));
                                    var el = $compile(tags)(scope);
                                
                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }

                                if (scope.dataSelectedProduct) {
                                    for (var j = 0; j < scope.dataSelectedProduct.length; j++) {
                                        if (row.ProductId == scope.dataSelectedProduct[j]) {
                                            $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                        }
                                    }
                                }
                            });
                            if ($('tr').hasClass('tr-currentSelected')) {
                                e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                            }
                        },
                    });
                }
                if (scope.dataItem) {
                    loadDetail(scope.dataItem.Id);
                }
                else {
                    //do what ? 
                    scope.$watch('dataItem.Id', function (val) {
                        if (val)
                            loadDetail(val);
                    });
                }

            },
            controller: ['$scope', 'ReturnResource', 'logger', 'kvExportToExcel', 'kvPrinter', 'printTypeMap', 'settings', function ($scope, _refundsvc, _logger, _export, _print, _printTypeMap, _setting) {
                $scope._l = l;
                $scope.viewUrl = viewUrl;
                $scope.settings = _setting;

                function save(isUpdatePayment) {
                    var r = _refundsvc.save({ Return: $scope.dataItem, IsUpdatePayment: isUpdatePayment });
                    r.$promise.then(callbackSuccess, callbackFail);
                    if ($scope.wdReturnDetail) {
                        $scope.wdReturnDetail.close();
                    }
                }
                $scope.printContent = function () {
                    
                    $scope.dataItem.retailerInfo = {
                        "name": session.retailer.name,
                        "address": session.retailer.address,
                        "phone": session.retailer.phone,
                        "logo": session.retailer.logo
                    };

                    if ($scope.dataItem.Customer && $scope.dataItem.Customer.Debt)
                        $scope.dataItem.Customer.OldDebt = $scope.dataItem.Customer.Debt;

                    if ($scope.dataItem.InvoiceDetails && $scope.dataItem.InvoiceDetails.length > 0) {
                        $scope.dataItem.NewItems = $scope.dataItem.InvoiceDetails;
                        _print.printfromtype(_printTypeMap.NewRefund, $scope.dataItem);
                    }                        
                    else
                        _print.printfromtype(_printTypeMap.Refund, $scope.dataItem);
                };
                $scope.exportDetail = function () {
                    var id = $scope.dataItem.Id;
                    var type = "ReturnDetail";
                    var fileName = "ChiTietTraHang_" + $scope.dataItem.Code;
                    var data = { req: id };
                    _export.toExcel(type, fileName, data);
                };

                function callbackFail(err) {
                    _logger.error(getMessage(err));
                }

                function callbackSuccess(data) {
                    _logger.success($filter("stringFormat")(_m.updatedSuccess, [$scope._l.lblRefund, data.Code]));
                    if ($scope.onSave) {
                        execCb($scope.onSave, $scope.dataItem);
                    }
                }

                $scope.update = function () {
                    if ($scope.dataItem.TotalPayment && $scope.hasUpdatePayment) {
                        var savebox = msgbox.confirm($scope._l.msgWarningUpdate, $scope._l.titleUpdateReturn);
                        savebox.confirm = function () {
                            save(true);
                        };
                        savebox.cancel = function () {
                            save(false);
                        };
                    } else {
                        save(false);

                    }
                };
                $scope.paymentDetail = function (code) {
                    //$scope.$broadcast('showPaymentDetail', code);
                    $scope.returnpaymentPopup.showPayment(code, function () {
                        if ($scope.onSave) {
                            execCb($scope.onSave, $scope.dataItem);
                        }
                    });
                };
                function voidRefund(isvoidPayment) {
                    _refundsvc.remove({ returnId: $scope.dataItem.Id, IsVoidPayment: isvoidPayment, CompareCode: $scope.dataItem.Code }, function () {
                        _logger.success($filter("stringFormat")($scope._l.msgDel, [$scope._l.return_TitleDel, $scope.dataItem.Code]));
                        execCb($scope.onSave, $scope.dataItem);
                        //callback? 
                    }, callbackFail);
                }

                $scope.cancel = function () {
                    var msg = $filter("stringFormat")($scope._l.return_MsgDel, [$scope.dataItem.Code]);
                    if ($scope.dataItem.NewInvoiceId)
                        msg = $filter("stringFormat")($scope._l.voidNewReturnConfirm, [$scope.dataItem.Code]);

                    var ivmsg = msgbox.confirm(msg, $scope._l.return_TitleDel, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                    ivmsg.confirm = function () {
                        var hasPayment = $scope.dataItem.TotalPayment > 0;
                        if ($scope.dataItem.NewInvoiceId)
                            hasPayment = true;

                        if (hasPayment && $scope.hasvoidPayment) {
                            var pmmsg = msgbox.confirm($scope._l.invoice_MsgDelPurchaseOrder, _m.voidSale, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                            pmmsg.confirm = function () {
                                voidRefund(true);
                            };
                            pmmsg.cancel = function () {
                                voidRefund(false);
                            };
                        } else {
                            voidRefund(false);
                        }
                    };
                };
            }],
            templateUrl: session.partialPath('return-form.html')
        };
    }])
.factory('returnGridColumns', ['kvLabel', function (l) {
    return [
        { "field": "Code", "title": l.refund_Code, headerAttributes: { "class": "tdCode16" }, attributes: { "class": "tdCode16" } },
        { "field": "Invoice.Code", "title": l.invoiceCode, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" }, hidden: true },
        { "field": "ReturnDate", "title": l.lblTime, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true },
        { "field": "Customer.Name", "title": l.customer, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
        { "field": "Branch.Name", "title": l.branch, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
        { "field": "ReceivedBy.GivenName", "title": l.employee, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
        { "field": "Description", "title": l.note, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true, template:"{{dataItem.Description|truncateDesc}}" },
        { "field": "TotalReturn", "title": l.subTotal, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdName txtR" }, attributes: { "class": "tdName txtR" }, isNumber: true, hidden: true },
        { "field": "ReturnFee", "title": l.returnFee, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdName txtR" }, attributes: { "class": "tdName txtR" }, isNumber: true, hidden: true },
        { "field": "ReturnDiscount", "title": l.discount, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdName txtR" }, attributes: { "class": "tdName txtR" }, isNumber: true, hidden: true },
        { "field": "TotalPayment", "title": l.refundToCustomer, sortable: false, format: "{0:n0}", headerAttributes: { "class": "tdName txtR" }, attributes: { "class": "tdName txtR" }, isNumber: true },
        { "field": "Status", "title": l.status, headerAttributes: { "class": "tdStatusM" }, attributes: { "class": "tdStatusM" } }
    ];
}]);
'use strict'
kvApp.controller('PosSettingCtrl', ['$scope', 'SettingResource', 'logger', '$timeout', '$window', 'RetailerResource', 'settings',
    function ($scope, _setting, _logger, $timeout, $window, _retailer, kvSettings) {
        $scope.retailer = _retailer.getCurrent({}, function () {
            $scope.logourl = $scope.retailer.LogoUrl;
        });

        $scope.metaShowUp = [];
        $scope.metaHide = [];
        $scope.kvSettings = kvSettings;
        $scope.isSettingSMS = angular.copy(kvSettings.SMSEmailMarketing);

        $scope.meta = _setting.getPosMetadata(function (res) {
            angular.forEach(res, function (m) {
                if (m.Key == 'ElectronicScalesCodePad' || m.Key == 'ChecksumCodePad') {
                    $scope.metaHide.push(m);
                }
                else {
                    $scope.metaShowUp.push(m);                    
                }
            });
        });

        //$scope.settings = $scope._setting;        
        $scope.locked = false;
        $scope.updatePosSetting = function () {
            $("#LoadingPanel").show();
            if ($scope.locked)
                return;
            $scope.locked = true;
            $scope._setting = $scope.settings;
            _setting.savePosParam({ Settings: $scope._setting }, function () {
                _logger.success($scope._l.setting_UpdateSuccess);
                $scope.locked = false;
                $window.location.reload(); // #501
            }, function (er) {
                $("#LoadingPanel").hide();
                _logger.error(getMessage(er));
                $scope.locked = false;
            });
        }
        //a quick hack to make pretty-checkable work with ng-model on first-load
        //will inspect the problem more carefully when the time allows
        $scope.settings = {};
        $timeout(function () {
            $scope.settings = $scope._setting;
        }, 500, true);
        $scope.helpClick = function (m) {
            $scope.selectedItem = m;
        };
        $scope.toggleSetting = function (m) {
            if (m.Key == 'AllowSellWhenOutStock') {
                for (var i = 0; i < $scope.metaShowUp.length; i++) {
                    if ($scope.metaShowUp[i].Key == 'AllowSellWhenOrderOutStock') {
                        var itm = $scope.metaShowUp[i];
                    }
                }
                if ($scope.settings[m.Key] == true) {
                    $scope.settings['AllowSellWhenOrderOutStock'] = true;
                    itm.disabled = true;
                }
                else {
                    itm.disabled = false;
                }
            }
        }
        $scope.settingPop = function (m) {
            $scope.UseElectronicScalesPopup.title(m.Name);
            $scope.UseElectronicScalesPopup.wrapper.addClass("k-window-poup k-window-masstel k-window-settingPop");
            $scope.UseElectronicScalesPopup.center().open();
        }

        $scope.closeWindow = function () {
            $scope.UseElectronicScalesPopup.close();
        };

        $scope.isNumberKey = function (evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        }

        $scope.ChangeImage = function () {
            var logoImg = $('#logo')[0].files[0];
            var extension = logoImg.name.split('.').pop();
            if (!(extension.toLowerCase() == "jpg" ||
                  extension.toLowerCase() == "jpeg" ||
                  extension.toLowerCase() == "gif" ||
                  extension.toLowerCase() == "bmp" ||
                  extension.toLowerCase() == "png")) {
                _logger.error($scope._l.product_NotFileImage);
                return false;
            }
            if (logoImg.size > maxSizeLogo) {
                _logger.error($scope._l.files_MaxSize);
                return false;
            }
            var reader = new FileReader();
            reader.onload = function () {
                $scope.logourl = reader.result;
                refresh($scope);
            };
            reader.readAsDataURL($('#logo')[0].files[0]);
        }
        $scope.uploadLogo = function () {
            if ($scope.retailer.Phone && $scope.retailer.CompanyName && $scope.retailer.CompanyAddress) {
                $("#LoadingPanel").show();
                var blobFile = $('#logo')[0].files[0];

                var fd = new FormData();
                if (blobFile) {
                    fd.append("file", blobFile);
                }
                fd.append("name", $scope.retailer.CompanyName);
                fd.append("phone", $scope.retailer.Phone);
                fd.append("address", $scope.retailer.CompanyAddress);
                fd.append("language", $scope.retailer.Language);
                $.ajax({
                    url: "/Files/UploadLogo",
                    type: "POST",
                    data: fd,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        // .. do something
                        _logger.success($scope._l.setting_UpdateSuccess);
                        $window.location.reload();
                    },
                    error: function (er) {
                        $("#LoadingPanel").hide();
                        _logger.error(er.responseText);
                    }
                });
            } else {
                _logger.error($scope._m.globalValidateSummary);
            }
        }
}])
.controller('HelpItemCtrl', ['$scope', function ($scope) {
    $scope.$watch('selectedItem', function (val) {

    });
}])
.controller('AuditTrailCtrl', ['$scope', 'UserResource', 'kvSession', 'kendofilter', 'kvLabel', 'BranchResource', '$routeParams', '$filter', 'functionType', 'auditTrailAction', 'UserResource', 'kvExportToExcel', 'AuditTrailResource', 'PrivilegeHelper',
function ($scope, _users, _session, _filter, labels, _branches, $routeParams, $filter, functionType, _auditTrailAction, _user, _export, _auditTrail,_p) {
    $scope._l = labels;
    $scope.pageSizes = pager.pageSizes;
    $scope.pageSize = pager.defaultList;    
    $scope.filters = {};
    $scope.functions = [];
    $scope.isAll = _p.hasRole('Global');
    for (var i in functionType) {
        $scope.functions.push({ Id: i, Name: functionType[i] });
    }
    $scope.logActions = [];
    for (var i in _auditTrailAction) {
        if (_auditTrailAction[i] != "Xem") {
            $scope.logActions.push({ key: i, value: _auditTrailAction[i] });
        }        
    }
    $scope.pageSizes = pager.pageSizes;
    var kvDropbox = {};
    if ($routeParams.filter) {
        kvDropbox = JSON.parse($routeParams.filter);
    }
    $scope.currentBranchId = _session.branch.Id;
    $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;
    $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
    $scope.branches = _branches.get({ Permission: 'Branch_Read' }, function () {

    });
    $scope.functionids = [];
    $scope.userids = [];
    $scope.users = _user.get({ Permission: 'User_Read' }, function () {
    });
    $scope.dateFilter = (kvDropbox.dateFilter) ? kvDropbox.dateFilter : 'today';
    var now = new Date();
    now = now.setHours(0, 0, 0, 0);
    var fromDate = new Date(now);
    var defStart = $scope.dateFilter == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);
    $scope.dateFilterRange = {
        fromDate: kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart),
        toDate: kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now))
    };

    $scope.detailLogInit = function (e) {
        var detailRow = e.detailRow;
        if (e.data.IsLoading) {
            $("#LoadingPanel").show();
        }
        _auditTrail.get({ Id: e.data.Id }, function (data) {
            $("#LoadingPanel").hide();
            detailRow.find("#tblInfo").html(data.Content);
        }, function (err) {
            $("#LoadingPanel").hide();
            _logger.error(getMessage(err));
        });


        detailRow.find(".tabstrip").kendoTabStrip({
            animation: false,
            activate: function (tabevent) { }
        });

    };
    $scope.grdColumns = [
        { "field": "UserName", "title": $scope._l.cashflow_lblUser, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" } },

        { "field": "FunctionName", "title": $scope._l.at_FunctionName, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" } },
         { "field": "CreatedDate", "title": $scope._l.at_CreatedDate, format: "{0:dd/MM/yyyy HH:mm:ss}", headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
        { "field": "ActionName", "title": $scope._l.at_Action, headerAttributes: { "class": "tdTime" }, attributes: { "class": "tdTime" }, hidden: true },
         { "field": "SubContent", "title": $scope._l.at_Content, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
        { "field": "BranchName", "title": $scope._l.at_Branch, headerAttributes: { "class": "tdBranch" }, attributes: { "class": "tdBranch" }, hidden: true }

    ];
    if ($scope.isAll) {
        $scope.grdColumns.push({ "field": "IpSource", "title": "IP", headerAttributes: { "class": "tdTime" }, attributes: { "class": "tdTime" }, hidden: true });
    } else {
        for (var j = 0; j < $scope.grdColumns.length; j++) {
            if ($scope.grdColumns[j].field === 'IpSource') {
                $scope.grdColumns.splice(j, 1);
            }
        }
    }

    $scope.export = function () {
        var filter = $scope.logs.dataSource.reader.kvFilter;
        var columns = _export.getGridColumns("grdLogs");

        var type = "AuditLog";
        var fileName = "LichSuThaoTac";
        var data = { column: JSON.stringify(columns), req: JSON.stringify(filter) };
        _export.toExcel(type, fileName, data);
    };

    // Bind data for Main Gridview
    $scope.bindedGrid;
    $scope.logs = {
        dataSource: new kendo.data.DataSource({
            type: "odata",
            autoSync: true,

            transport: {
                read: {
                    url: "/api/logs?format=json",
                    dataType: "json",
                }
            },

            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    angular.forEach(response.Data, function (r) {
                        r.SubContent = $filter('truncateDesc')(r.SubContent);
                    });
                    return response;
                },
                model: {
                    fields: {
                        CreatedDate: { type: "date" }
                    }
                }
            }
        }),
        columns: $scope.grdColumns,
        dataBound: $scope.emptyGridFix,
        dataBinding: function (e) {
            $scope.bindedGrid = e.sender;
            $scope.$apply();
        },
        detailTemplate: kendo.template($("#logDetailTmpl").html()),
        detailInit: $scope.detailLogInit,
        detailExpand: $scope.grvDetailExpand,
    };
    function initFilter() {
        var filter = [];

        var values = $scope.branchids;

        var condition = [];
        if (values && values.length > 0) {
            values.push({ Id: 0 });
            for (var k = 0; k < values.length; k++) {
                if (parseInt(values[k].Id) >= 0) {
                    condition.push(_filter.newCondition("BranchId", parseInt(values[k].Id), "eq"));
                }
            }
            filter = _filter.append(filter, condition, "or");
        }
        if ($scope.dateFilter != 'alltimes' && $scope.dateFilterRange.fromDate) {
            condition = [];
            var todate = new Date($scope.dateFilterRange.toDate);
            condition.push(_filter.newCondition("CreatedDate", $scope.dateFilterRange.fromDate, "ge"));
            condition.push(_filter.newCondition("CreatedDate", new Date(todate.DateAdd(1)), "lt"));
            filter = _filter.append(filter, condition, "and");
        }
        return filter;
    }
    $scope.filterByKeyWord = function () {
        if ($scope.filterDescription) {
            var condition = [
           _filter.newCondition("Content", $scope.filterDescription, "contains")
            ];
            _filter.filter($scope.logs.dataSource, condition, "and");
        } else {
            _filter.remove($scope.logs.dataSource, "Content");
        }
    };
    $scope.filterbyAction = function () {
        var values = $scope.logActions;
        var condition = [];
        var count = 0;
        for (var k = 0; k < values.length; k++) {
            if (values[k].checked && parseInt(values[k].key) >= 0) {
                condition.push(_filter.newCondition("Action", parseInt(values[k].key), "eq"));
                count++;
            }
        }
        if (count > 0) {
            _filter.filter($scope.logs.dataSource, condition, "or");
        } else {
            _filter.remove($scope.logs.dataSource, "Action");
        }
    };
    $scope.filterbyBranch = function () {
        var values = $scope.branchids;

        var condition = [];
        if (values && values.length > 0) {
            values.push({ Id: 0 });
            for (var k = 0; k < values.length; k++) {
                if (parseInt(values[k].Id) >= 0) {
                    condition.push(_filter.newCondition("BranchId", parseInt(values[k].Id), "eq"));
                }
            }
            _filter.filter($scope.logs.dataSource, condition, "or");
        } else {
            _filter.remove($scope.logs.dataSource, "BranchId");
        }
    };
    $scope.filterbyUser = function () {
        var values = $scope.userids;
        var condition = [];
        if (values && values.length > 0) {
            for (var k = 0; k < values.length; k++) {
                if (parseInt(values[k].Id) > 0) {
                    condition.push(_filter.newCondition("UserId", parseInt(values[k].Id), "eq"));
                }
            }
            _filter.filter($scope.logs.dataSource, condition, "or");
        } else {
            _filter.remove($scope.logs.dataSource, "UserId");
        }
    };
    $scope.filterbyFunction = function () {
        var values = $scope.functionids;
        var condition = [];
        if (values && values.length > 0) {
            for (var k = 0; k < values.length; k++) {
                if (parseInt(values[k].Id) > 0) {
                    condition.push(_filter.newCondition("FunctionId", parseInt(values[k].Id), "eq"));
                }
            }
            _filter.filter($scope.logs.dataSource, condition, "or");
        } else {
            _filter.remove($scope.logs.dataSource, "FunctionId");
        }
    }
    var ischecking = false;
    $scope.filterByDateRange = function () {
        if ($scope.dateFilterRange.fromDate == null || $scope.dateFilterRange.toDate == null) {
            if (!ischecking) {
                ischecking = true;
                _logger.error($scope._l.errInputDateTimeFilter);
                setTimeout(function () { ischecking = false; }, 3000);
            }
            return;
        }

        $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilterRange.fromDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilterRange.toDate, 'dd/MM/yyyy');
        var condition = [];
        if ($scope.dateFilterRange.fromDate) {
            var todate = new Date($scope.dateFilterRange.toDate);
            condition.push(_filter.newCondition("CreatedDate", $scope.dateFilterRange.fromDate, "ge"));
            condition.push(_filter.newCondition("CreatedDate", new Date(todate.DateAdd(1)), "lt"));
        }
        _filter.filter($scope.logs.dataSource, condition, "and");
        $scope.dateFilter = 'other';
        //$scope.dateFilterPopup.close();
    };
    $scope.filterbyDate = function () {
        if ($scope.dateFilter == 'alltimes') {
            _filter.remove($scope.logs.dataSource, "CreatedDate");
            return;
        }
        var fnow = new Date();
        fnow = fnow.setHours(0, 0, 0, 0);
        var ffromDate = new Date(fnow);
        var defStartchange = $scope.dateFilter == 'thisweek' ? ffromDate.GetfirstDayOfWeek() : ($scope.dateFilter == 'thismonth' ? ffromDate.GetfirstDayOfMonth() : ffromDate);
        $scope.dateFilterRange.fromDate = defStartchange;
        $scope.dateFilterRange.toDate = new Date(fnow);
        $scope.lblOtherTimeFilter = null;
            
        if ($scope.dateFilterRange.fromDate) {
            var condition = [];
            var todate = new Date($scope.dateFilterRange.toDate);
            condition.push(_filter.newCondition("CreatedDate", $scope.dateFilterRange.fromDate, "ge"));
            condition.push(_filter.newCondition("CreatedDate", new Date(todate.DateAdd(1)), "lt"));
        }
        _filter.filter($scope.logs.dataSource, condition, "and");
    };
    $scope.refresh = function () {
        $scope.logs.dataSource.pageSize(parseInt($scope.pageSize));

    };



}])
.directive('kvSettingInput', ['$compile', '$timeout', function ($compile, $timeout) {
    var templates = {
        'Boolean': '<aside class="frRadioCheck frRadioCheckNormal"><input type="checkbox" kv-pretty-check kv-data-label="$_kvLabel_$" ng-model="$_model_$" ng-change="$_kvChange_$" ng-checked="$_checked_$" kv-disabled="$_kvDisabled_$"/></aside>',
        'Int32': '<input type="text" onfocus="return $(this).select()"  onkeypress="return event.charCode >= 48 && event.charCode <= 57" ng-model="$_model_$"/>'
    };

    return {
        link: function (scope, elem, attrs) {
            var t = templates[attrs.kvSettingInput];
            t = t.replace('$_model_$', attrs.kvModel);
            t = t.replace('$_checked_$', attrs.kvModel);
            t = t.replace('$_kvLabel_$', "'" + attrs.kvLabel + "'");
            t = t.replace('$_kvChange_$', attrs.kvChange);
            t = t.replace('$_kvDisabled_$', attrs.kvDisabled);
            var el = $compile(t)(scope);
            elem.append(el);
        },
    };
}])
.directive('settingItemClick', function () {
    return {
        link: function (scope, elem) {
            $(".wp-tltn").click(function () {
                //alert(true);
            });
        }
    };
});
(function () {
    'use strict';

    kvApp.controller('SmsEmailController', ["$scope", "kvLabel", "$kWindow", "messageTemplateType", "MsgBox", "SmsEmailTemplateService", "logger", "kvEmptyGridFix", SmsEmailController]);

    /* @ngInject */
    function SmsEmailController($scope, kvLabel, $kWindow, messageTemplateType, MsgBox, SmsEmailTemplateService, logger, kvEmptyGridFix) {
        
        init();
        
        function init() {
            $scope.showTemplateFilter = true;
            $scope.kvLabel = kvLabel;
            $scope.filter = {
                keyword: '',
                type: 0
            };
            $scope.hisFilter = {
                keyword: '',
                createdBy: [],
                type: 0
            };
            $scope.dateFilter = {
                typeFilter: 'common',
                StartDate: new Date(),
                EndDate: new Date(),
                TimeRange: 'alltime'
            };

            $scope.tabOptions = {
                select: function (e) {
                    if (e.item.id == 'template') {
                        $scope.showTemplateFilter = true;
                    }
                    else {
                        $scope.showTemplateFilter = false;
                    }

                    refresh($scope);
                }
            };

            $scope.filterCreatedByOptions = {
                dataSource: new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: "/api/users?Permission=User_Read",
                            dataType: "json"
                        }
                    },
                    schema: {
                        data: 'Data',
                        total: 'Total'
                    }
                }),
                filter: "contains",
                dataTextField: "GivenName",
                dataValueField: "Id",
                valuePrimitive: false
            };

            $scope.templateGridOptions = {
                dataSource: new kendo.data.DataSource({
                    type: "odata",
                    transport: {
                        read: {
                            url: "/api/sms-email-template?Includes=User",
                            dataType: 'json'
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        parse: function (resp) {
                            angular.forEach(resp.Data, function (template) {
                                template.TypeStr = messageTemplateType[template.Type];
                            });

                            return resp;
                        }
                    },
                    pageSize: 15,
                    serverPaging: true,
                    serverSorting: true,
                    serverFiltering: true
                }),
                sortable: true,
                detailExpand: function(e) {
                    this.collapseRow(this.tbody.find(' > tr.k-master-row').not(e.masterRow));
                },
                columns: [{
                    field: "Title",
                    title: $scope._l.sms_Title,
                }, {
                    field: "Type",
                    title: $scope._l.sms_TypeMessage,
                    template: "{{dataItem.TypeStr}}",
                    headerAttributes: { "class": "tdTime" },
                    attributes: { "class": "tdTime" }
                }, {
                    field: "CreatedDate",
                    title: $scope._l.sms_CreatedDate,
                    headerAttributes: { "class": "tdDateTime" },
                    attributes: { "class": "tdDateTime" },
                    template: '{{dataItem.CreatedDate | date: "dd/MM/yyyy HH:mm"}}'
                }, {
                    field: "User.GivenName",
                    title: $scope._l.sms_CreatedBy,
                    headerAttributes: { "class": "tdName" },
                    attributes: { "class": "tdName" }
                }],
                pageable: {
                    messages: {
                        display: kvLabel.pagerInfo + kvLabel.sms_PagerTemplate,
                        first: kvLabel.paging_First,
                        previous: kvLabel.paging_Prev,
                        next: kvLabel.paging_Next,
                        last: kvLabel.paging_Last
                    }
                },
                dataBound: function() {
                    kvEmptyGridFix.apply(this, arguments);
                }
            }

            $scope.emailHistoryGridOptions = {
                dataSource: new kendo.data.DataSource({
                    type: "odata",
                    transport: {
                        read: {
                            url: "/api/sms-email-history?format=json&Includes=User",
                            dataType: "json"
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    },
                    pageSize: 15,
                    serverPaging: true,
                    serverSorting: true,
                    serverFiltering: true
                }),
                sortable: true,
                detailExpand: function (e) {
                    this.collapseRow(this.tbody.find("tr.k-master-row").not(e.masterRow));
                },
                columns: [{
                    field: "Title",
                    title: $scope._l.sms_Title,
                    template: "{{dataItem.Type == 1 ? (!dataItem.Title || dataItem.Title.length == 0 ? (dataItem.Content | truncateByChar: 10) : dataItem.Title) : dataItem.Title }}"
                }, {
                    field: "CreatedDate",
                    title: kvLabel.sms_SendDate,
                    headerAttributes: { "class": "tdDateTime" },
                    attributes: { "class": "tdDateTime" },
                    template: '{{dataItem.CreatedDate | date: "dd/MM/yyyy HH:mm"}}'
                }, {
                    field: "UserName",  
                    title: kvLabel.sms_SendBy,
                    headerAttributes: { "class": "tdName" },
                    attributes: { "class": "tdName" }
                },
                //, {
                //    field: "CountUserReceiver",
                //    title: kvLabel.sms_CountReceiver,
                //    headerAttributes: { "class": "tdCode16 txtR" },
                //}, 
                {
                    field: "Type",
                    title: $scope._l.sms_TypeMessage,
                    template: "{{dataItem.Type == 1 ? 'SMS' : 'Email' }}",
                    headerAttributes: { "class": "tdTime" },
                    attributes: { "class": "tdTime" }
                }],
                pageable: {
                    messages:{
                        display: kvLabel.pagerInfo + kvLabel.sms_PagerSendBy,
                        first: kvLabel.paging_First,
                        previous: kvLabel.paging_Prev,
                        next: kvLabel.paging_Next,
                        last: kvLabel.paging_Last
                    }
                },
                dataBound: function () {
                    kvEmptyGridFix.apply(this, arguments);
                }
            }
        }

        $scope.addNewTemplate = function (type) {
            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: type == 1 ? $scope._l.sms_AddSMSTemplate : $scope._l.sms_AddEmailTemplate,
                    resizable: true,
                    width: 720,
                    position: {
                        top: 100,
                        left: "30%"
                    },
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-masstel k-window-sms");
                    }
                },
                template: '<kv-sms-email-template-form type="' + type + '" on-save="onSave()" on-cancel="onCancel()" ></kv-sms-email-template-form>',
                controller: ["$scope", "$windowInstance", function ($scope, $windowInstance) {

                    init();

                    function init() {
                        
                    }

                    $scope.onSave = function () {
                        $windowInstance.close(true);
                    }

                    $scope.onCancel = function () {
                        $windowInstance.close(false);
                    }
                }]
            });

            wdInstance.result.then(function(resp){
                if (resp) {
                    $scope.templateGrid.dataSource.read();
                    $scope.templateGrid.refresh();
                }
            });
        }

        $scope.templateFilter = function () {
            var filters = [];
            var filterKeyword = [];

            if ($scope.filter.keyword.length > 0) {
                filterKeyword.push({
                    field: 'Title',
                    operator: "contains",
                    value: $scope.filter.keyword
                });

                filterKeyword.push({
                    field: 'Content',
                    operator: "contains",
                    value: $scope.filter.keyword
                });
            }

            if ($scope.filter.type > 0) {
                filters.push({
                    field: 'Type',
                    operator: "eq",
                    value: parseInt($scope.filter.type)
                });
            }

            if (filters.length > 0 || filterKeyword.length > 0) {
                var f = [];

                if (filters.length > 0) {
                    f.push({
                        logic: "and",
                        filters: filters
                    });
                }

                if (filterKeyword.length > 0) {
                    f.push({
                        logic: "or",
                        filters: filterKeyword
                    });
                }

                $scope.templateGrid.dataSource.filter(f);
            }
            else {
                $scope.templateGrid.dataSource.filter({});
            }
        };

        $scope.historyFilter = function () {
            var filters = [];
            var filterKeyword = [];
            var dateFilter = [];

            if ($scope.hisFilter.keyword.length > 0) {
                filterKeyword.push({
                    field: 'Title',
                    operator: "contains",
                    value: $scope.hisFilter.keyword
                });

                filterKeyword.push({
                    field: 'Content',
                    operator: "contains",
                    value: $scope.hisFilter.keyword
                });
            }

            if ($scope.hisFilter.type > 0) {
                filters.push({
                    field: 'Type',
                    operator: "eq",
                    value: parseInt($scope.hisFilter.type)
                });
            }

            if ($scope.hisFilter.createdBy && $scope.hisFilter.createdBy.length > 0) {
                angular.forEach($scope.hisFilter.createdBy, function (item) {
                    filters.push({
                        field: 'UserId',
                        operator: "eq",
                        value: parseInt(item)
                    });
                });
            }

            if ($scope.dateFilter.TimeRange == 'other') {
                if ($scope.dateFilter.StartDate) {
                    var todate = new Date($scope.dateFilter.EndDate);
                    dateFilter.push({
                        field: 'CreatedDate',
                        operator: "ge",
                        value: $scope.dateFilter.StartDate
                    });

                    dateFilter.push({
                        field: 'CreatedDate',
                        operator: "lt",
                        value: todate.DateAdd(1)
                    });
                }
            } else if ($scope.dateFilter.TimeRange != '') {
                dateFilter.push({
                    field: 'CreatedDate',
                    operator: "eq",
                    value: $scope.dateFilter.TimeRange
                });
            }

            if (filters.length > 0 || filterKeyword.length > 0 || dateFilter.length > 0) {
                var f = [];

                if (filters.length > 0) {
                    f.push({
                        logic: "or",
                        filters: filters
                    });
                }

                if (filterKeyword.length > 0) {
                    f.push({
                        logic: "or",
                        filters: filterKeyword
                    });
                }

                if (dateFilter.length > 0) {
                    f.push({
                        logic: "and",
                        filters: dateFilter
                    })
                }

                $scope.emailHistoryGrid.dataSource.filter(f);
            }
            else {
                $scope.emailHistoryGrid.dataSource.filter({});
            }
        };

        $scope.openEditTemplate = function (dataItem) {
            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: dataItem.TypeStr == 'SMS' ? $scope._l.sms_EditSMSTemplate : $scope._l.sms_EditEmailTemplate,
                    resizable: true,
                    width: 720,
                    position: {
                        top: 100,
                        left: "30%"
                    },
                    visible: false,
                    open: function () {
                        this.wrapper.addClass("k-window-poup k-window-masstel k-window-sms");
                    }
                },
                template: '<kv-sms-email-template-form template="dataItem" on-save="onSave()" on-cancel="onCancel()" ></kv-sms-email-template-form>',
                controller: ["$scope", "$windowInstance", function ($scope, $windowInstance) {

                    init();

                    function init() {
                        $scope.dataItem = dataItem;
                    }

                    $scope.onSave = function () {
                        $windowInstance.close(true);
                    }

                    $scope.onCancel = function () {
                        $windowInstance.close(false);
                    }
                }]
            });

            wdInstance.result.then(function (resp) {
                if (resp) {
                    $scope.templateGrid.dataSource.read();
                    $scope.templateGrid.refresh();
                }
            });
        }

        $scope.deleteTemplate = function (dataItem) {
            MsgBox.confirm(dataItem.TypeStr == 'SMS' ? $scope._l.sms_DelSMSTemplate : $scope._l.sms_DelEmailTemplate, $scope._l.sms_delConfirmMessage)
                .then(function (resp) {
                    if (resp) {
                        SmsEmailTemplateService.deleteTemplate(dataItem.Id)
                            .then(function () {
                                logger.success($scope._l.sms_delSuccess);
                                $scope.templateGrid.dataSource.read();
                                $scope.templateGrid.refresh();
                            },
                            function (error) {
                                logger.error(error.Message);
                            });
                    }
                });
        };
    }

})();;
(function() {
    "use strict";

    kvApp.controller("SmsEmailSettingController", ["$scope", "settings", "SmsEmailSettingService", "kvMailServiceType", "$sce", "logger", "RetailerResource", "$window", smsEmailSettingController]);

    /* @ngInject */
    function smsEmailSettingController($scope, settings, SmsEmailSettingService, kvMailServiceType, $sce, logger, RetailerResource, $window) {

        init();

        function init() {
            $scope.kvSettings = settings;

            $scope.retailer = RetailerResource.getCurrent({}, function () {
            });

            $scope.agree = {
                policy: false
            };

            $scope.SmsEmailSetting = {
                IsConnectVG: false,
                MailServiceType: 3,
                ReplyEmail: "",
                BccEmail: "",
                RetailerEmail: "",
                RetailerPassword: "",
                RetailerId: 0,
                SmtpServer: "",
                IsUseSSL: false,
                Port: null,
                VgAppToken: "",
                GoogleMailAccount: "",
                GoogleMailPassword: "",
                YahooMailAccount: "",
                YahooMailPassword: ""
            };

            SmsEmailSettingService.getSmsEmailSetting()
            .then(function (resp) {
                $scope.SmsEmailSetting = resp;

                if ($scope.SmsEmailSetting.MailServiceType === 0) {
                    $scope.SmsEmailSetting.MailServiceType = 3;
                }

                var tabToActivate = $("li[kv-email-service-type='" + ($scope.SmsEmailSetting.MailServiceType || 3) + "']");
                $("#mailServiceTabStrip").kendoTabStrip().data("kendoTabStrip").activateTab(tabToActivate);

            });
        }

        $scope.trustAsResourceUrl = function (url) {
            return $sce.trustAsResourceUrl(url);
        }

        $scope.connectVietGuys = function () {
            if ($scope.agree.policy) {
                $("#LoadingPanel").show();
                SmsEmailSettingService.connectVietGuys()
                    .then(function (resp) {
                        if (resp.Token !== "" && resp.Token !== "0" && resp.Token.length > 1) {
                            $scope.SmsEmailSetting.VgAppToken = resp.Token;
                            $scope.SmsEmailSetting.IsConnectVG = true;
                            logger.success("Kết nối với nhà cung cấp dịch vụ Vietguys thành công.");
                            $window.location.reload();
                        }
                        else {
                            logger.error("Kết nối với nhà cung cấp dịch vụ Vietguys thất bại.");
                        }

                        $("#LoadingPanel").hide();
                    },
                    function () {
                        logger.error("Kết nối với nhà cung cấp dịch vụ Vietguys thất bại.");
                        $("#LoadingPanel").hide();
                    });
            }
            else {
                logger.error('Bạn phải đồng ý với điều khoản và dịch vụ trước khi kết nối với Vietguys');
            }
        };

        function validateEmailSetting() {

            switch ($scope.SmsEmailSetting.MailServiceType) {
                case kvMailServiceType.GoogleMail:
                    if (!$scope.SmsEmailSetting.GoogleMailAccount || $scope.SmsEmailSetting.GoogleMailAccount.length === 0) {
                        logger.error("Bạn chưa nhập tài khoản gmail");
                        return false;
                    }

                    if (!$scope.SmsEmailSetting.GoogleMailPassword || $scope.SmsEmailSetting.GoogleMailPassword.length === 0) {
                        logger.error("Bạn chưa nhập mật khẩu gmail");
                        return false;
                    }
                    break;
                case kvMailServiceType.YahooMail:
                    if (!$scope.SmsEmailSetting.YahooMailAccount || $scope.SmsEmailSetting.YahooMailAccount.length === 0) {
                        logger.error("Bạn chưa nhập tài khoản yahoo mail");
                        return false;
                    }

                    if (!$scope.SmsEmailSetting.YahooMailPassword || $scope.SmsEmailSetting.YahooMailPassword.length === 0) {
                        logger.error("Bạn chưa nhập mật khẩu yahoo mail");
                        return false;
                    }
                    break;
                case kvMailServiceType.KiotMail:
                    if (!$scope.SmsEmailSetting.BccEmail || $scope.SmsEmailSetting.BccEmail.length === 0) {
                        logger.error("Bạn chưa nhập BCC email");
                        return false;
                    }
                    break;
                case kvMailServiceType.Other:
                    if (!$scope.SmsEmailSetting.SmtpServer || $scope.SmsEmailSetting.SmtpServer.length === 0) {
                        logger.error("Bạn chưa nhập SMTP");
                        return false;
                    }
                    if (angular.isUndefined($scope.SmsEmailSetting.Port) || $scope.SmsEmailSetting.Port == null) {
                        logger.error("Bạn chưa nhập Port");
                        return false;
                    }
                    if (!$scope.SmsEmailSetting.RetailerEmail || $scope.SmsEmailSetting.RetailerEmail.length === 0) {
                        logger.error("Bạn chưa nhập Email gửi");
                        return false;
                    }
                    if (!$scope.SmsEmailSetting.RetailerPassword || $scope.SmsEmailSetting.RetailerPassword.length === 0) {
                        logger.error("Bạn chưa nhập Mật khẩu");
                        return false;
                    }
                    break;
                default:
            }

            return true;
        }

        $scope.saveSmsEmailSetting = function () {

            if (!validateEmailSetting())
                return;

            $("#LoadingPanel").show();
            SmsEmailSettingService.updateEmailSetting($scope.SmsEmailSetting)
                .then(function () {
                    logger.success("Cập nhật cài đặt email thành công");
                    $("#LoadingPanel").hide();
                    $window.location.reload();
                },
                function (err) {
                    if (err.Message) {
                        logger.error(err.Message);
                    } else {
                        logger.error("Cập nhật cài đặt email thất bại");
                    }

                    $("#LoadingPanel").hide();
                });
        };

        $scope.mailServiceTabStripOption = {
            animation: false,
            tabPosition: "left",
            select: function (e) {
                $scope.SmsEmailSetting.MailServiceType = parseInt(e.item.attributes["kv-email-service-type"].value);
            }
        };
    }
})();;
'use strict'
kvApp.controller('StockTakeCtrl', ['kvSession', '$scope', '$rootScope', '$routeParams', 'logger', '$route', 'kendofilter', '$filter', 'kvConfirmBox', 'StockTakeResource', 'stocktakeStatus', '$location', 'kvExportToExcel','settings','$compile','$timeout',
    function (_session, $scope, $rootScope, $routeParams, _logger, $route, _filter, $filter, _msgbox, _stocktake, _stocktakeStatus, $location, _export, _setting, $compile, $timeout) {
        $scope.keywordParam = '';
        $scope.pageSizes = pager.pageSizes;
        $scope.typeList = viewUrl.productList;
        $scope.typeEmail = viewUrl.orderEmail;
        $scope.settings = _setting;
        $scope.dateFilter = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        };

        var rights = $scope.rights = {};
        rights.canAdd = $scope._p.has('StockTake_Create');
        rights.canDelete = $scope._p.has('StockTake_Delete');

        if ($("#rowTemplate").html()) {
            $scope.template = $("#rowTemplate").html();
            $scope.pageSize = pager.defaultEmail;
            // $scope.viewtype = $scope.typeEmail;
        } else {
            $scope.pageSize = pager.defaultList;
            //  $scope.viewtype = $scope.typeList;
        }
        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }
        $scope.stocktakeStatus = kvDropbox.stocktakeStatus;
        if (!$scope.stocktakeStatus) {
            $scope.stocktakeStatus = [];
            for (var i in _stocktakeStatus) {
                $scope.stocktakeStatus.push({ key: i, value: _stocktakeStatus[i] });
            }
        }
        $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;
        $scope.dateFilter.TimeRange = (kvDropbox.dateFilter) ? kvDropbox.dateFilter : 'alltime';
        var now = new Date();
        now = now.setHours(0, 0, 0, 0);
        var fromDate = new Date(now);
        var defStart = $scope.dateFilter.TimeRange == 'thisweek' ? fromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? fromDate.GetfirstDayOfMonth() : fromDate);

        $scope.dateFilter.StartDate = kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart);
        $scope.dateFilter.EndDate = kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now));

        //$scope.dateFilterRange = {
        //    fromDate: kendo.parseDate(kvDropbox.fromDate ? kvDropbox.fromDate : defStart),
        //    toDate: kendo.parseDate(kvDropbox.toDate ? kvDropbox.toDate : new Date(now))
        //};

        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;

        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.keywordParam = $routeParams.Code;
            //remove any other filter 
            $scope.branchids = [];
            $scope.dateFilter.TimeRange = '';
            $scope.currentBranchId = 0;
        }

        //init tblsub
        $scope.tblsubOptions = {
            autoBind: false,
            pageable: { "pageSize": 10, "refresh": false, "pageSizes": false, buttonCount: 5, "messages": { "display": $scope._l.pagerInfo } },
            dataBinding: $scope.emptyGridFix,
            columns: [
                { field: "Product.Code", title: $scope._l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                { field: "ProductName", title: $scope._l.product_Name, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                {
                    field: "SystemCount", title: $scope._l.inventory, format: "{0:#,#.###}", headerAttributes: { "class": "tdTC txtR" }, attributes: { "class": "tdTC txtR" }
                    //template: "{{dataItem.SystemCount|formatQuantity}}<a ng-click=\"showpopup(dataItem)\" class='viewmore serialNumb' ng-show='dataItem.Product && dataItem.Product.IsLotSerialControl'>" + $scope._l.viewmore + "</a>"
                },
                {
                    field: "ActualCount", title: $scope._l.stocktake_ActualCount, format: "{0:#,#.###}", headerAttributes: { "class": "tdStatus nowrap txtR" }, attributes: { "class": "tdStatus nowrap txtR" },
                    template: "{{dataItem.ActualCount|formatQuantity}}<a ng-click=\"showpopup(dataItem)\" class='viewmore serialNumb' ng-show='dataItem.Product && dataItem.Product.IsLotSerialControl'>" + $scope._l.viewmore + "</a>"
                },
                { field: "AdjustmentValue", title: $scope._l.stocktake_AdjustmentValue, format: "{0:#,#.###}", headerAttributes: { "class": "tdDate txtR" }, attributes: { "class": "tdDate txtR" } }
            ],
            dataBound: function (e) {
                var gridData = e.sender.dataSource.data();

                $.each(gridData, function (i, row) {
                    if (row.Product.IsLotSerialControl) {
                        //console.log(row);
                        row.SystemSerialNumbers = row.SystemSerialNumbers || "";
                        row.SerialNumbers = row.SerialNumbers || "";

                        if (row.SystemSerialNumbers)
                            $scope["serials-sent" + row.Id] = row.SystemSerialNumbers.split(',');
                        if (row.SerialNumbers)
                            $scope["serials-receive" + row.Id] = row.SerialNumbers.split(',');


                        var affectedSerials = [];
                        for (var j = 0; j < row.SerialNumbers.split(',').length; j++) {
                            var sr = row.SerialNumbers.split(',')[j];
                            if (sr.length > 0 && !(row.SystemSerialNumbers.split(',').indexOf(sr) > -1)) {
                                affectedSerials.push({ "SerialNumber": sr, "Status": $scope._l.serialNew });
                            }
                        }

                        for (var jk = 0; jk < row.SystemSerialNumbers.split(',').length; jk++) {
                            var si = row.SystemSerialNumbers.split(',')[jk];
                            if (si.length > 0 && !(row.SerialNumbers.split(',').indexOf(si) > -1)) {
                                affectedSerials.push({ "SerialNumber": si, "Status": $scope._l.serialUnmatch });
                            }
                        }

                        //
                        $scope["affectedSerials" + row.Id] = affectedSerials;

                        var popup = '<kv-view-two-serial-popup kv-title="Serial hệ thống" kv-title2="Serial thực tế" kv-title3="Serial ảnh hưởng" kv-name="serialpopup' + row.Id +
                                            '" kv-source="serials-sent' + row.Id + '" kv-source2="serials-receive' + row.Id +
                                            '" kv-source3 = "affectedSerials' + row.Id + '"></kv-view-two-serial-popup>';


                        var tags = angular.element($('<tr style="display:none;"><td colspan="4">' + popup + '</td></tr>'));
                        var el = $compile(tags)($scope);

                        $timeout(function () {
                            $('tr[data-uid="' + row.uid + '"]').after(tags);
                        });
                    }
                });
            },
        };

        //Filter
        function initFilter() {
            var filter = [];
            if ($routeParams.Code) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $routeParams.Code, 'eq')], 'and');
            } else {
                var condition = [];
                if ($scope.dateFilter.TimeRange == 'other') {

                    if ($scope.dateFilter.StartDate) {

                        var todate = new Date($scope.dateFilter.EndDate);
                        condition.push(_filter.newCondition("CreatedDate", $scope.dateFilter.StartDate, "ge"));
                        condition.push(_filter.newCondition("CreatedDate", new Date(todate.DateAdd(1)), "lt"));
                    }
                    filter = _filter.append(filter, condition, "and");
                } else {
                    condition = [
                     _filter.newCondition("CreatedDate", $scope.dateFilter.TimeRange, "eq")
                    ];
                    filter = _filter.append(filter, condition, "or");
                }
                var values = $scope.stocktakeStatus;
                condition = [];
                var count = 0;
                for (var k = 0; k < values.length; k++) {
                    if (values[k].checked && parseInt(values[k].key) > 0) {
                        condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                        count++;
                    }
                }
                if (count > 0) {
                    filter = _filter.append(filter, condition, "or");
                }
            }
            return filter;
        }
        $scope.filterbyStatus = function () {
            var values = $scope.stocktakeStatus;
            var condition = [];
            var count = 0;
            for (var k = 0; k < values.length; k++) {
                if (values[k].checked && parseInt(values[k].key) >= 0) {
                    condition.push(_filter.newCondition("Status", parseInt(values[k].key), "eq"));
                    count++;
                }
            }
            if (count > 0) {
                _filter.filter($scope.grdStockTakeOption.dataSource, condition, "or");
            } else {
                _filter.remove($scope.grdStockTakeOption.dataSource, "Status");
            }
        };

        $scope.filterbyName = function () {
            if ($scope.keywordParam) {
                var condition = [
               _filter.newCondition("Code", $scope.keywordParam, "contains")];
                _filter.filter($scope.grdStockTakeOption.dataSource, condition, "and");
            } else {
                _filter.remove($scope.grdStockTakeOption.dataSource, "Code");
            }
        };
        var ischecking = false;
        $scope.filterByDateRange = function () {
            if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                if (!ischecking) {
                    ischecking = true;
                    _logger.error($scope._l.errInputDateTimeFilter);
                    setTimeout(function () { ischecking = false; }, 3000);
                }
                return;
            }

            $scope.lblOtherTimeFilter = $filter('date')($scope.dateFilter.StartDate, 'dd/MM/yyyy') + " - " + $filter('date')($scope.dateFilter.EndDate, 'dd/MM/yyyy');
            var condition = [];
            if ($scope.dateFilter.StartDate) {
                var EndDate = new Date($scope.dateFilter.EndDate);
                condition.push(_filter.newCondition("CreatedDate", $scope.dateFilter.StartDate, "ge"));
                condition.push(_filter.newCondition("CreatedDate", new Date(EndDate.DateAdd(1)), "lt"));
            }
            _filter.filter($scope.grdStockTakeOption.dataSource, condition, "and");
            $scope.dateFilter.TimeRange = 'other';
            //$scope.dateFilterPopup.close();
        };
        $scope.filterbyDate = function () {
            
            if ($scope.dateFilter.TimeRange == 'other') {
                $scope.filterByDateRange();
            }
            else if ($scope.dateFilter.TimeRange != '') {
                //if ($scope.dateFilter.TimeRange == 'alltimes') {
                //    _filter.remove($scope.grdStockTakeOption.dataSource, "CreatedDate");
                //    return;
                //}
                var fnow = new Date();
                fnow = fnow.setHours(0, 0, 0, 0);
                var ffromDate = new Date(fnow);
                var defStartchange = $scope.dateFilter.TimeRange == 'thisweek' ? ffromDate.GetfirstDayOfWeek() : ($scope.dateFilter.TimeRange == 'thismonth' ? ffromDate.GetfirstDayOfMonth() : ffromDate);
                $scope.dateFilter.StartDate = defStartchange;
                $scope.dateFilter.EndDate = new Date(fnow);
                $scope.lblOtherTimeFilter = null;
                var condition = [
                      _filter.newCondition("CreatedDate", $scope.dateFilter.TimeRange, "eq")
                ];
                _filter.filter($scope.grdStockTakeOption.dataSource, condition, "or");
            }
        };

        //$scope.refresh = function () {
        //    $scope.transferList.pageSize(parseInt($scope.pageSize));
        //};

        function filterbyExtention() {
            var para = {};
            para.SerialKey = $scope.filterSerial;
            return para;
        }

        //EndFilter
        $scope.detailStockTakeInit = function (e) {
            var detailRow = e.detailRow;
            detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });

            //Order Detail
            var stockDetaildb = new kendo.data.DataSource(
            {
                type: "odata",
                autoSync: true,
                transport: {
                    read: {
                        url: "/api/stocktakes/" + e.data.Id + "/details?format=json&Includes=Product",
                        dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    }
                },
                serverFiltering: true,
                serverSorting: true,
                pageSize: pager.defaultList,
                serverPaging: true,
                schema: {
                    data: "Data",
                    total: "Total"
                }
            });

            detailRow.find("#tblsub").data("kendoGrid").setDataSource(stockDetaildb);
            stockDetaildb.read();
            //End Order Detail
        };

        $scope.showpopup = function (item) {
            //console.log(item);
            $scope["serialpopup" + item.Id].showWindow();
        }

        $scope.grdStockTakeOption = {
            dataSource: new kendo.data.DataSource({
                type: "odata",
                autoSync: true,

                transport: {
                    read: {
                        url: "/api/stocktakes?format=json&Includes=UserCreate&Includes=Branch&Includes=StockTakeDetails",
                        dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        data: filterbyExtention
                    }
                },

                pageSize: $scope.pageSize,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                filter: initFilter(),
                schema: {
                    data: "Data",
                    total: "Total",
                    model: {
                        fields: {
                            Code: { type: "string" },
                            CreatedDate: { type: "date" },
                            AdjustmentDate: { type: "date" }
                        }
                    },
                    parse: function (response) {
                        if (response && response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        if (response && response.Data) {
                            for (var j = 0; j < response.Data.length; j++) {
                                var t = response.Data[j];
                                t.Description = t.Description ? t.Description : "";
                                t.StatusId = t.Status;
                                t.Status = _stocktakeStatus[t.Status];
                            }
                        }

                        return response;
                    }
                }
            }),
            columns: [{
                field: "Code",
                title: $scope._l.stocktake_Code,
                attributes: { "class": "tdCode" },
                headerAttributes: { "class": "tdCode" }
            },
            {
                field: "CreatedDate",
                title: $scope._l.lblTime,
                format: "{0:dd/MM/yyyy HH:mm}",
                headerAttributes: { "class": "tdDateTime" },
                attributes: { "class": "tdDateTime" },
                isDate:true
            },
            {
                field: "AdjustmentDate",
                title: $scope._l.stocktake_DateAdjustment,
                format: "{0:dd/MM/yyyy HH:mm}",
                headerAttributes: { "class": "tdDateTime" },
                attributes: { "class": "tdDateTime" },
                isDate:true
            },
            {
                field: "TotalAdjustmentValue",
                title: $scope._l.stocktake_TotalAdjustmentValue,
                format: '{0:n3}',
                attributes: { "class": "tdDebt txtR" },
                headerAttributes: { "class": "tdDebt txtR" }
            },
            {
                field: "Description",
                title: $scope._l.note,
                headerAttributes: { "class": "tdMin" },
                attributes: { "class": "tdMin" },
                template: "{{dataItem.Description | truncateDesc}}"
            },
            {
                field: "Status",
                title: $scope._l.status,
                headerAttributes: { "class": "tdStatusST" },
                attributes: { "class": "tdStatusST" }
            }
            ],
            detailTemplate: kendo.template($("#templStockTakeDetail").html()),
            detailInit: $scope.detailStockTakeInit,
            detailExpand: $scope.grvDetailExpand,
            dataBound: function (e) {
                $scope.emptyGridFix(e);
            },
            dataBinding: function (e) {
                $scope.bindedGrid = e.sender;
                $scope.$apply();
            }
        };
        $scope.bindedGrid;
        
        $scope.refresh = function () {
            $scope.grdStockTakeOption.dataSource.pageSize(parseInt($scope.pageSize));

        };
        $scope.RefreshGrid = function () {
            $scope.grdStockTakeOption.dataSource.read();
        }
        $scope.addNew = function () {
            //var r = _stocktake.autogeneratecode();
            //r.$promise.then(function (result) {
            //    var fnow = new Date();
            //    $scope.stocktakeForm.openWindow({ Id: 0, Code: result.Code, CreateDate: fnow });
            //}, function (err) {
            //    _logger.error(getMessage(err));

            //});

            $location.path('/' + viewUrl.stockTakeList + '/0');
        };
        $scope.edit = function (editId) {
            $location.path('/' + viewUrl.stockTakeList + '/' + editId);
        };
        $scope.delete = function (item) {
            _msgbox.confirm($filter("stringFormat")($scope._l.stocktake_MsgDel, [item.Code]), $scope._l.stocktake_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgbox.onConfirm = function () {
                var r = _stocktake.delete({ stocktakeId: item.Id , CompareCode: item.Code, CompareStatusId: item.StatusId});
                r.$promise.then(function (result) {
                    _logger.success($filter("stringFormat")($scope._l.msgDel, [$scope._l.stocktake_MsgDelTitle, item.Code]));
                    $scope.RefreshGrid();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };
        };
        $scope.export = function () {
            var filter = $scope.grdStockTakeOption.dataSource.reader.kvFilter;
            var columns = [];
            columns = _export.getGridColumns("grdStockTakes");

            var type = "StockTake";
            var fileName = "DachSachKiemKho";
            var data = { req: JSON.stringify(filter), column: JSON.stringify(columns) };
            _export.toExcel(type, fileName, data);
        };
        $scope.exportDetail = function (dataItem) {
            var type = "StockTakeDetail";
            var fileName = "ChiTietKiemHang_" + dataItem.Code;
            var data = { req: dataItem.Id };
            _export.toExcel(type, fileName, data);
        };
    }])
.directive('kvStockTakeFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('stocktake-filter.html')
    };
}])
.controller('StockTakeUpdateCtrl', ['kvSession', '$scope', '$rootScope', '$routeParams', 'logger', '$route', 'kendofilter', '$filter', 'kvConfirmBox', 'StockTakeResource', 'stocktakeStatus', 'localCache', '$location', 'UserResource','$compile','$timeout', function (_session, $scope, $rootScope, $routeParams, _logger, $route, _filter, $filter, _msgbox, _stocktake, _stocktakeStatus, _localCache, $location, _users, $compile, $timeout) {
    // open popup
    $scope.import = function () {
        $scope.importPopup.showPopup();
    };
    $scope.currentDate = new Date();
    $scope.stockStatus = _stocktakeStatus;
    $scope.stocktake = {};
    $scope.totalQuantity = 0;
    var compareIsAdjust = false;
    function getStockTakers() {
        $scope.stocktakers = _users.getStockTakers();
    }
    $scope.$on('refreshGridOnChangeBranch', getStockTakers);
    getStockTakers();
    $scope.localStorageKey = "StockTake_" + $scope.currentUser.Id + "_" + $scope.currentBranch.Id + "_" + $routeParams.id;
    _localCache.get($scope.localStorageKey, function (objReturn) {
        //var objLocal = (typeof (objReturn) != "undefined" && typeof (objReturn.Value) != "undefined") ? angular.fromJson(objReturn.Value) : null;
        //change localcache api 
        var objLocal = (objReturn) ? angular.fromJson(objReturn) : null;
        if (objLocal != null && objLocal.StockTakeDetails != null && objLocal.StockTakeDetails.length > 0) {
            _msgbox.confirm($scope._l.stocktake_FindDraft1 + objLocal.StockTakeDetails.length + " " + $scope._l.stocktake_FindDraft2, $scope._l.purchaseorder_SaveChangeTitle, false, $scope._l.confirmYes, $scope._l.confirmNo);
            _msgbox.onConfirm = function () {
                $scope.stocktake = objLocal;
                $scope.updateSerials($scope.stocktake.StockTakeDetails, false);
                $scope.stocktake.CreatedDate = kendo.parseDate($scope.stocktake.CreatedDate);
                $scope.stocktake.CompareCode = $scope.stocktake.Code;
                if ($scope.stocktake.AdjustmentDate) {
                    $scope.stocktake.AdjustmentDate = kendo.parseDate($scope.stocktake.AdjustmentDate);
                }
                    
                $scope.stocktakeDetails.dataSource.data(objLocal.StockTakeDetails);
                compareIsAdjust = $scope.stocktake.IsAdjust;
            };
            _msgbox.onCancel = function () {                
                _localCache.remove($scope.localStorageKey, function (objReturn) {
                    $scope.loadStockTakeFromServer();
                });
            };
        } else {
            $scope.loadStockTakeFromServer();
        }
    });

    $scope.updateSerials = function(items, fromServer) {
        var serialList = [];
        //var items = $scope.stocktake.StockTakeDetails;
        var color = "";
        for (var idx = 0; idx < items.length; idx++) {
            var itm = items[idx];
            // for serials in system
            if (itm.ProductSerials && fromServer) {
                var ss = itm.ProductSerials.split(",");
                var ds = [];
                for (var k = 0; k < ss.length; k++) {
                    ds.push({ "SerialNumber": ss[k],"text":ss[k] });
                }
                itm.ProductSerials = ds;
            }
            
            var tempPopupDS = angular.copy(itm.ProductSerials) || [];
            if (itm.SerialNumbers) {
                serialList = [];
                var lst = itm.SerialNumbers.split(",");
                for (var s = 0; s < lst.length; s++) {
                    color = "";
                    if (itm.ProductSerials) {
                        for (var k = 0; k < itm.ProductSerials.length; k++) {
                            if (lst[s] == itm.ProductSerials[k].text) {
                                color = "altTag";
                                break;
                            }
                        }
                    }
                    serialList.push({ "text": lst[s], "cssClass": color });

                    if (color != "altTag") {
                        tempPopupDS.push({ "SerialNumber": lst[s], "text": lst[s] });
                    }
                }
                $scope["serials" + itm.ProductId] = serialList;
                $scope["serialModel" + itm.ProductId] = itm.SerialNumbers.split(",");
                $scope["popupDS" + itm.ProductId] = tempPopupDS;
            }
            //console.log(itm);
        }
    }

    $scope.loadStockTakeFromServer = function () {
        var r = _stocktake.get({ stocktakeId: $routeParams.id, Includes: ["UserCreate", "Branch", "Product.ProductSerials"] });
        r.$promise.then(function (resultStockTake) {
            //console.log(resultStockTake);
            $scope.stocktake = resultStockTake.Data;
            if ($scope.stocktake.AdjustmentDate) {
                $scope.stocktake.CompareAdjustmentDate = $scope.stocktake.AdjustmentDate;
                $scope.stocktake.AdjustmentDate = kendo.parseDate($scope.stocktake.AdjustmentDate);
            }
            //console.log($scope.stocktake.CreatedDate);
            if ($routeParams.id == 0) {
                $scope.stocktake.Branch = $scope.currentBranch;
                $scope.stocktake.UserCreate = $scope.currentUser;
                $scope.stocktake.StockTakeDetails = {};
            }
            $scope.updateSerials(resultStockTake.StockTakeItems, true);
            if (resultStockTake.StockTakeItems.length > 0) {
                $scope.stocktakeDetails.dataSource.data(resultStockTake.StockTakeItems);
            }
            refresh($scope);
            //console.log($scope.stocktake);
        }, function (err) {
            $location.path("/" + viewUrl.stockTakeList);
            _logger.error(getMessage(err));
        });

    };
    $scope.adjustmentDateChange = function () {
            $scope.stocktake.AdjustmentDate = this.value();
            $scope.updateLocal();

        
    };
    $scope.updateLocal = function () {
        $scope.totalQuantity = 0;
        if (typeof ($scope.stocktake) != "undefined" && $scope.stocktake != null && $scope.stocktake.Status == 0) {
            $scope.stocktake.StockTakeDetails = $scope.stocktakeDetails.dataSource.data();            
            if (typeof ($scope.stocktake.StockTakeDetails) != "undefined"
                && $scope.stocktake.StockTakeDetails != null) {
                //console.log($scope.stocktake.StockTakeDetails);
                if ($scope.stocktake.StockTakeDetails.length > 0) {
                    _localCache.set($scope.localStorageKey, angular.toJson($scope.stocktake));
                    angular.forEach($scope.stocktake.StockTakeDetails, function(vl, idx) {
                        if (!isNaN(parseFloat(vl.ActualCount))) {
                            $scope.totalQuantity += vl.ActualCount;
                        }
                    });
                } else if ($scope.stocktake.StockTakeDetails.length == 0) {
                    _localCache.get($scope.localStorageKey, function (objReturn) {
                        var objLocal = (objReturn) ? angular.fromJson(objReturn) : null;
                        if (objLocal != null && objLocal.StockTakeDetails != null && objLocal.StockTakeDetails.length > 0) {
                            _localCache.set($scope.localStorageKey, angular.toJson($scope.stocktake));
                        }
                    });
                }                
            }
        }
    };
    $scope.stocktakeDetails = {
        dataSource: new kendo.data.DataSource({
            autoSync: false,
            data: [],
            change: function (e) {                
                $scope.updateLocal();
            },
            pageSize: 20,
            schema: {
                model: {
                    id: "ProductId"
                }
            }
        }),
        columns: [
            {
                field: "ProductId",
                title: " ",
                hidden: false,
                attributes: { "class": "tdDel" },
                headerAttributes: { "class": "tdDel" },
                template: "<a title=\"Xóa\"  ng-click=\"deleteItem(dataItem)\" class=\"icon del\" >Del</a>"
            },
                { field: "ProductCode", title: $scope._l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                { field: "ProductName", title: $scope._l.product_Name, headerAttributes: { "class": "tdfrName" }, attributes: { "class": "tdfrName" } },
                {
                    field: "SystemCount", title: $scope._l.stocktake_Onhand, format: "{0:#,#.###}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" },
                    //template: "{{dataItem.SystemCount|number:2}}"
                },
                {
                    field: "ActualCount",
                    title: $scope._l.stocktake_ActualCount,
                    headerTemplate: $scope._l.stocktake_ActualCount + " <a href=\"javascript:void(0)\" tabindex=\"0\" class=\"help icon\" kv-tooltip data-toggle=\"tooltip\" data-placement=\"right\" data-original-title=\"{{_l.lblPressKeyF4}}\"><i class=\"fa fa-info-circle\"></i></a>",
                    headerAttributes: { "class": "tdSSL txtC" },
                    attributes: { "class": "tdSSL txtR ip-kk" },
                    template: "<input  type=\"text\" class=\"actualCountInput txtR veaM\" ng-class=\"dataItem.isSerialProduct?'w100':'tdSLB'\"  ng-disabled=\"stocktake.Status==1 || dataItem.isSerialProduct\" k-min=\"0\" ng-model=\"dataItem.ActualCount\" ng-change=\"saveActualCount($event)\" kv-auto-numeric=\"{isQuantity:!dataItem.isSerialProduct}\" kv-init-focus/>"
                },
                {
                    field: "AdjustmentValue", title: $scope._l.stocktake_AdjustmentValue, format: "{0:#,#.###}", headerAttributes: { "class": "tdDate txtR" }, attributes: { "class": "tdDate txtR" },
                    template: "{{dataItem.AdjustmentValue|formatQuantity}}"
                }
        ],
        dataBound: function (e) {
                $scope.emptyGridFix(e);
                $scope.hasSerialProduct = false;
                // add serial input
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, row) {
                    //console.log(row);
                    var pageSize = e.sender.dataSource.pageSize();
                    var pageForRow = 1 + Math.floor(i / pageSize);
                    var currentPage = e.sender.dataSource.page();

                    if (row.IsLotSerialControl && pageForRow == currentPage){
                        
                        //var popup = '<kv-enter-serial-popup kv-name="serialpopup' + row.ProductId + '" kv-model="serialModel' + row.ProductId + '" kv-source="popupDS' + row.ProductId + '"></kv-enter-serial-popup>';
                        var tagInput = angular.element($('<tr class="k-master-serial"><td></td><td colspan="4">' +
                                                            '<tags-input id="tagRow' + row.ProductId + '" placeholder="Nhập số serial và Enter" ng-model="serials' + row.ProductId + '"' +
                                                                    'on-tag-added="tagAdded($tag,' + i + ',' + row.ProductId + ')" on-tag-removed="tagRemoved($tag,' + i + ',' + row.ProductId + ')">' +
                                                                    '<auto-complete source="systemSerials' + row.ProductId + '"></auto-complete>' +
                                                            '</tags-input>' +
                                                            '</td><td class="txtR"><a ng-click="showpopup(' + i + ',' + row.ProductId + ')" class="viewmore">' + $scope._l.viewmore + '</a></td></tr>'));
                        
                        if (row.ProductSerials) {
                            var ds = [];
                            for (var k = 0; k < row.ProductSerials.length; k++) {
                                ds.push({ "text": row.ProductSerials[k].SerialNumber, "SerialNumber": row.ProductSerials[k].SerialNumber });
                            }
                            row.ProductSerials = ds;
                        } else
                            row.ProductSerials = [];

                        $scope["systemSerials" + row.ProductId] = row.ProductSerials;

                        //
                        var tempDS = angular.copy(row.ProductSerials);
                        if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                            var lstSerialNumbers = row.SerialNumbers.split(",");

                            for (var j = 0; j < lstSerialNumbers.length; j++) {

                                var found = false;
                                for (var k = 0; k < row.ProductSerials.length; k++) {
                                    if (row.ProductSerials[k].SerialNumber == lstSerialNumbers[j]) {
                                        found = true;
                                        break;
                                    }
                                }

                                if (!found) {
                                    var newitem = { "SerialNumber": lstSerialNumbers[j], "text": lstSerialNumbers[j] };
                                    tempDS.push(newitem);
                                }
                            }
                        }
                        $scope["popupDS" + row.ProductId] = tempDS;

                        if (!(row.SerialNumbers && row.SerialNumbers.length > 0)) {
                            delete $scope["serials" + row.ProductId];
                            delete $scope["serialModel" + row.ProductId];
                        }
                       
                        var el = $compile(tagInput)($scope);
                        $timeout(function () {
                            $('tr[data-uid="' + row.uid + '"]').after(tagInput).addClass("k-serial");
                        });

                        if (!$scope.hasSerialProduct)
                            $scope.hasSerialProduct = true;
                    }

                    
                });
                //console.log($scope.hasSerialProduct);
            },
            dataBinding:function(e){
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, t) {
                    if (t.IsLotSerialControl)
                        t.isSerialProduct = true;
                });
            }
    };

    $scope.showpopup = function (idx, id) {
        var grid = $('#cartGrid').data('kendoGrid');

        var model = "serialModel" + id;
        var source = $scope["popupDS" + id];
        $scope["serialpopup"].showWindow(model, source, function (lst) {

            if (grid && grid.dataSource) {
                var item = grid.dataSource.data()[idx];
                var length = lst.length;
                if (item) {
                    if (length)
                        item.ActualCount = length;
                    else
                        item.ActualCount = 0;

                    item.AdjustmentValue = item.ActualCount - item.SystemCount;
                }

                item.SerialNumbers = "";
                for (var k = 0; k < lst.length ; k++) {
                    item.SerialNumbers += "," + lst[k].SerialNumber;
                }
                item.SerialNumbers = item.SerialNumbers.substring(1);
                $scope.updateLocal();

                $scope["serialModel" + id] = item.SerialNumbers.split(",");
                var serialList = [];
                var color;
                for (var s = 0; s < lst.length; s++) {
                    color = "";
                    if (item.ProductSerials) {
                        for (var k = 0; k < item.ProductSerials.length; k++) {
                            if (lst[s].SerialNumber == item.ProductSerials[k].text) {
                                color = "altTag";
                                break;
                            }
                        }
                    }
                    serialList.push({ "text": lst[s].SerialNumber, "cssClass": color });
                }
                //console.log(serialList);
                $scope["serials" + id] = serialList;
            }
        });
    };

    $scope.tagAdded = function (tag, idx, id) {
        var grid = $('#cartGrid').data('kendoGrid');
        if (grid && grid.dataSource) {
            var item = grid.dataSource.data()[idx];
            item.SerialList = $scope["serials" + id];
            var length = item.SerialList.length;

            if (item) {
                if (length)
                    item.ActualCount = length;
                else
                    item.ActualCount = (item.ActualCount ? item.ActualCount : 0) + 1;

                item.AdjustmentValue = item.ActualCount - item.SystemCount;
            }

            item.SerialNumbers = "";
            for (var k = 0; k < item.SerialList.length ; k++) {
                item.SerialNumbers += "," + item.SerialList[k].text;
            }
            item.SerialNumbers = item.SerialNumbers.substring(1);
            $scope.updateLocal();

            // add to datasource for popup
            $scope["serialModel" + id] = item.SerialNumbers.split(",");

            $scope["popupDS" + id] = $scope["popupDS" + id] || [];
            var found = false;
            for (var k = 0; k < item.ProductSerials.length; k++) {
                if (item.ProductSerials[k].SerialNumber == tag.text) {
                    found = true;
                    break;
                }
            }
            //console.log(found);
            if (!found) {
                var newitem = { "SerialNumber": tag.text, "text": tag.text };
                $scope["popupDS" + id].push(newitem);
            }
        }

    };

    $scope.tagRemoved = function (tag, idx, id) {
        var grid = $('#cartGrid').data('kendoGrid');
        if (grid && grid.dataSource) {
            var item = grid.dataSource.data()[idx];
            item.SerialList = $scope["serials" + id];
            var length = item.SerialList.length;

            if (item) {
                if (length != undefined)
                    item.ActualCount = length;
                else
                    item.ActualCount = (item.ActualCount ? item.ActualCount : 0);

                item.AdjustmentValue = item.ActualCount - item.SystemCount;
            }
            
            item.SerialNumbers = "";
            for (var k = 0; k < item.SerialList.length ; k++) {
                item.SerialNumbers += "," + item.SerialList[k].text;
            }
            item.SerialNumbers = item.SerialNumbers.substring(1);
            $scope.updateLocal();

            $scope["serialModel" + id] = item.SerialNumbers.split(",");
        }

    };

    $scope.saveActualCount = function (event) {
        this.dataItem.AdjustmentValue = this.dataItem.ActualCount - this.dataItem.SystemCount;
        $scope.updateLocal();

    };
    $scope.canceltolist = function () {
        if ($scope.stocktake.StockTakeDetails.length > 0) {
            _msgbox.confirm($scope._l.stocktake_SaveBeforeExit, $scope._l.purchaseorder_SaveChangeTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo);
            _msgbox.onConfirm = function () {
                $scope.saveStockTake(false);
            };
            _msgbox.onCancel = function () {
                _localCache.remove($scope.localStorageKey, function (objReturn) {                    
                });
                $location.path("/" + viewUrl.stockTakeList);
                $route.reload();
            };
        } else {
            _localCache.remove($scope.localStorageKey, function (objReturn) {
            });
            $location.path("/" + viewUrl.stockTakeList);
        }
    };
    $scope.save = function () {
        $scope.saveStockTake(false);
    };
    $scope.delete = function (item) {
        _msgbox.confirm($filter("stringFormat")($scope._l.stocktake_MsgDelProduct, [item.Code]), $scope._l.stocktake_MsgDelProductTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgbox.onConfirm = function () {
            if ($scope.stocktake.Id == 0) {
                _localCache.remove($scope.localStorageKey, function (objReturn) {
                    $route.reload();
                    _logger.success($scope._l.stocktake_MsgDelSuccess);
                });
            } else {
                var r = _stocktake.delete({ stocktakeId: $scope.stocktake.Id });
                r.$promise.then(function (result) {
                    _localCache.remove($scope.localStorageKey, function (objReturn) {
                    });
                    _logger.success(result.Message);
                    $location.path("/" + viewUrl.stockTakeList);
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            }
        }
    };
    $scope.saveStockTake = function (isAdjust) {
        if ($scope.stocktake.StockTakeDetails !== null && $scope.stocktake.StockTakeDetails.length > 0) {
            $("#LoadingPanel").show();
            var objSaveStockTake = { CreatedBy: $scope.stocktake.CreatedBy, BranchId: $scope.stocktake.BranchId, Id: $scope.stocktake.Id, Code: $scope.stocktake.Code, CompareCode: $scope.stocktake.CompareCode, AdjustmentDate: $scope.stocktake.AdjustmentDate, CreatedDate: $scope.stocktake.CreatedDate, CompareAdjustmentDate: $scope.stocktake.CompareAdjustmentDate, Description: (typeof ($scope.stocktake.Description) != "undefined" ? $scope.stocktake.Description : "") };
            var objSaveStockTakeDetail = [];
            angular.forEach($scope.stocktake.StockTakeDetails, function (value, key) {
                if (!isNaN(parseFloat(value.ActualCount))) {
                    objSaveStockTakeDetail.push({ Id: 0, ProductId: value.ProductId, ActualCount: value.ActualCount, ProductName: value.ProductName, ProductCode: value.ProductCode, SerialNumbers: value.SerialNumbers });
                }
            });
            var r = _stocktake.save({ IsAdjust: isAdjust, StockTake: objSaveStockTake, StockTakeDetail: objSaveStockTakeDetail, CompareIsAjust: compareIsAdjust });
            r.$promise.then(function (resultObj) {
                _localCache.remove($scope.localStorageKey, function (objReturn) {
                });
                _logger.success(resultObj.Message);
                $("#LoadingPanel").hide();
                $location.path("/" + viewUrl.stockTakeList);
            }, function (err) {
                $("#LoadingPanel").hide();
                _logger.error(getMessage(err));
            });
        } else {
            _logger.error($scope._l.stocktake_MsgNotPro);
        }
    }
    $scope.adjust = function () {
        var doAdjust = function () {
            _msgbox.confirm($scope._l.stocktake_MsgSave, $scope._l.stocktake_MsgSaveTitle);
            _msgbox.onConfirm = function () {
                $scope.saveStockTake(true);
            }
        };
        if ($scope.stocktake.AdjustmentDate) {
            var selectedDate = $scope.stocktake.AdjustmentDate;
            if (selectedDate.getTime() < (new Date()).getTime() && $scope.hasSerialProduct) {
                _msgbox.confirm($scope._l.stocktake_confirmAdjustTime, $scope._l.stocktake_MsgSaveTitle);

                _msgbox.onConfirm = function () {
                    // TODO: change time
                    $scope.stocktake.AdjustmentDate = new Date();
                    $scope.saveStockTake(true);
                }

                _msgbox.onCancel = function () {
                    return false;
                }
            } else {
                doAdjust();
            }
        } else {
            doAdjust();
        }
       
    };
    $scope.addProductToStockTake = function (objProduct) {
        
        var existing = $scope.stocktakeDetails.dataSource.get(objProduct.Id);
        if (typeof (existing) != "undefined" && existing != null) {
            var tempArr = angular.copy($scope.stocktakeDetails.dataSource.data());
            var item, found;
            for (var i = 0 ; i < tempArr.length; i++) {
                item = tempArr[i];
                if (item.ProductId == objProduct.Id) {
                    found = item;

                    if (!objProduct.IsLotSerialControl) {
                        if (!isNaN(parseFloat(found.ActualCount))) {
                            found.ActualCount = found.ActualCount + 1;
                        } else {
                            found.ActualCount = 1;
                        }
                    }
                    found.SystemCount = objProduct.OnHand;
                    found.AdjustmentValue = found.ActualCount - found.SystemCount;

                    //re-position to top 
                    tempArr.splice(i, 1);
                    tempArr.unshift(found);
                    break;
                }
            }
            
            $scope.stocktakeDetails.dataSource.data(tempArr);
            //$scope.updateLocal();
        } else {
            if (objProduct.ProductSerials) {
                objProduct.ProductSerials = objProduct.ProductSerials.filter(function (s) { return s.Status == 1 })
            }
            var aCount = 1;
            if (objProduct.IsLotSerialControl)
                aCount = 0;

            existing = { Id: 0, Product: objProduct, ProductSerials: objProduct.ProductSerials, IsLotSerialControl: objProduct.IsLotSerialControl, ProductId: objProduct.Id, StockTakeId: $scope.stocktake.Id, ProductCode: objProduct.Code, ProductName: objProduct.Name, SystemCount: objProduct.OnHand, ActualCount: aCount, AdjustmentValue: aCount - objProduct.OnHand };
            $scope.stocktakeDetails.dataSource.insert(0, existing);
        }

    };
    $scope.deleteItem = function (item) {
        _msgbox.confirm($filter("stringFormat")($scope._l.stocktake_MsgDelProduct, [item.ProductCode]), $scope._l.stocktake_MsgDelProductTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgbox.onConfirm = function () {
            var existing = $scope.stocktakeDetails.dataSource.get(item.ProductId);
            //console.log(existing);
            if (typeof (existing) != "undefined" && existing != null && $scope.stocktake.Status == 0) {
                $scope.stocktakeDetails.dataSource.remove(existing);
                if (!$scope.stocktakeDetails.dataSource.total()) {
                    refresh($scope);
                }
            } else {
                _logger.error($scope._l.stocktake_MsgDelData);
            }

            //$scope.tempStockTakeItems = $scope.stocktakeDetails.dataSource.data();
        }
    }
    $scope.catWindowsOption = {
        title: $scope._l.stocktake_AddProductToGroup,
        visible: false,
        modal: true,
        resizable: false,
        width: 506,
        height: 130,
    }
    $scope.addByCategory = function () {
        $scope.catWindows.wrapper.addClass("k-window-poup k-window-masstel k-window-catWindows");
        $scope.catWindows.center().open();
    };
    $scope.cancelCategory = function () {
        $scope.catWindows.close();
    }
    $scope.dropdownstocktakeCat = {
        dataSource: new kendo.data.DataSource({
            type: "odata",
            //autoSync: true,
            transport: {
                read: {
                    url: "/api/hierarchycategory",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                }
            },
            schema: {
                data: "Data",
                total: "Total"
            }
        }),
        dataTextField: "Name",
        dataValueField: "Id"
    }
    $scope.addProductByCategory = function () {
        if ($scope.addCatId == null || $scope.addCatId == 0) {
            _logger.error($scope._l.stocktake_NoChooseGroupProduct);
            return;
        }
        var r = _stocktake.getProductsByCategory({ CategoryId: $scope.addCatId });
        r.$promise.then(function (result) {
            if (result) {
                
                var tmpArray = [];
                angular.forEach(result, function (vl, idx) {
                    var existing = $scope.stocktakeDetails.dataSource.get(vl.ProductId);
                    if (typeof (existing) == "undefined" || existing == null) {
                        if (vl.ProductSerials) {
                            vl.ProductSerials = vl.ProductSerials.filter(function (s) { return s.Status > 0 })
                        }
                        tmpArray.push(vl);
                    }
                });
                angular.forEach($scope.stocktakeDetails.dataSource.data(), function (vl, idx) {
                    tmpArray.push({ Id: vl.Id, ProductSerials: vl.ProductSerials, IsLotSerialControl: vl.IsLotSerialControl,SerialNumbers : vl.SerialNumbers, ActualCount: vl.ActualCount, AdjustmentValue: vl.AdjustmentValue, ProductCode: vl.ProductCode, ProductId: vl.ProductId, ProductName: vl.ProductName, StockTakeId: vl.StockTakeId, SystemCount: vl.SystemCount });
                });
                $scope.stocktakeDetails.dataSource.data(tmpArray);
                $scope.catWindows.close();
                $scope.addCatId = 0;
            }
        }, function (err) {
            _logger.error(getMessage(err));

        });
    };

    // add shortcut
    shortcut.add("F3", function () {
        $('#productSearchInput').focus().select();
    });

    shortcut.add("F4", function () {
        $('.actualCountInput').first().focus();
    });
    // end add shortcut

}]).directive('kvStockImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages', '$rootScope','settings',
    function (_session, _logger, $filter, _l, _m, $rootScope, _settings) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope.appSetting = _settings;
                    $scope._l = _l;
                    $scope._m = _m;
                    //$scope.IsReplaceExisting = true;
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() === ".xlsx" || this.extension.toLowerCase() === ".xls")) {
                                _logger.error($scope._l.pricebook_MsgImportErrorFile);
                                e.preventDefault();
                            }
                        });
                        e.data = { branchId: _session.branch.id };
                        $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
                    };

                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();                        
                    };

                    var updateSerials = function (items, fromServer) {
                        var serialList = [];
                        //var items = $scope.stocktake.StockTakeDetails;
                        var color = "";
                        for (var idx = 0; idx < items.length; idx++) {
                            var itm = items[idx];
                            // for serials in system
                            if (itm.ProductSerials && fromServer) {
                                var ss = itm.ProductSerials.split(",");
                                var ds = [];
                                for (var k = 0; k < ss.length; k++) {
                                    ds.push({ "SerialNumber": ss[k], "text": ss[k] });
                                }
                                itm.ProductSerials = ds;
                            }
                            if (itm.SerialNumbers) {
                                serialList = [];
                                var lst = itm.SerialNumbers.split(",");
                                for (var s = 0; s < lst.length; s++) {
                                    color = "";
                                    if (itm.ProductSerials) {
                                        for (var k = 0; k < itm.ProductSerials.length; k++) {
                                            if (lst[s] == itm.ProductSerials[k].text) {
                                                color = "altTag";
                                                break;
                                            }
                                        }
                                    }
                                    serialList.push({ "text": lst[s], "cssClass": color });
                                }
                                $scope.$parent["serials" + itm.ProductId] = serialList;
                                $scope.$parent["serialModel" + itm.ProductId] = itm.SerialNumbers.split(",");
                            }
                        }
                    }

                    var onSuccessImport = function (e) {
                        //console.log(e.response.Data);
                        updateSerials(e.response.Data, true);
                        $scope.$parent.stocktakeDetails.dataSource.data(e.response.Data);
                        $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
                        $scope.importWindow.close();
                        refresh($scope.$parent);                        
                    };
                    var onImportError = function (e) {
                        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                            $scope.ImportError = $rootScope._m.sessionExpire;
                        } else {
                            if (e.XMLHttpRequest.responseText) {
                                $scope.ImportError = e.XMLHttpRequest.responseText;
                            } else {
                                $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                            }
                        }
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };
                    var onImportCancel = function (e) {
                    };
                    $scope.showPopup = function () {
                        $scope.importWindow.wrapper.addClass("k-window-poup k-window-masstel k-window-importStock");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
                        $scope.importWindow.wrapper.find(".k-upload-status").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,
                        async: {
                            saveUrl: "/Files/ImportStockTakeDetail",
                            //removeUrl: "/Files/Remove",
                            autoUpload: false
                        },
                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: $scope._l.import_ChooseFile,
                            uploadSelectedFiles: $scope._l.import_Uploaded,
                            statusUploading: $scope._l.import_Uploading,
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }
                }
            ],
            templateUrl: _session.partialPath('stock-import.html')
        };
    }])
.directive('kvStockTakePopup', ['kvSession', '$rootScope', 'logger', 'StockTakeResource', 'kvConfirmBox', '$filter', 'kvLabel', 'kvMessages', 'stocktakeStatus', 'kvEmptyGridFix','$compile','$timeout', function (_session, $rootScope, _logger, _stocktake, _msgbox, $filter, _l, _m, _stocktakeStatus, kvEmptyGridFix, $compile, $timeout) {

        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;
                    $scope.viewUrl = viewUrl;
                    $scope.emptyGridFix = kvEmptyGridFix;
                    $scope.window = {
                        openDetail: function (data) {
                            console.log(data);
                            $scope.wdstocktakePopup.title($filter("stringFormat")("{0}", [$scope._l.stocktake_Lbl]));
                            $scope.stockStatus = _stocktakeStatus;
                            $scope.dataItem = data.Data;

                            $scope.dataItem.CreatedDate = kendo.parseDate($scope.dataItem.CreatedDate);
                            $scope.dataItem.AdjustmentDate = kendo.parseDate($scope.dataItem.AdjustmentDate);

                            $scope.stdetails = new kendo.data.DataSource({
                                data: data.StockTakeItems,
                                pageSize: 5,
                                schema: {
                                    model: {
                                        id: "ProductId"
                                    }
                                }
                            });
                            $scope.wdstocktakePopup.wrapper.addClass("k-window-poup k-window-fix");
                            $scope.wdstocktakePopup.center().open();

                        }
                    };

                    $scope.columns = [  { "field": "ProductCode", "title": _l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                                        { "field": "ProductName", "title": _l.product_Name },
                                        { "field": "SystemCount", "title": _l.inventory, format: "{0:#,0.###}", headerAttributes: { "class": "tdSLB txtR" }, attributes: { "class": "tdSLB txtR" } },
                                        {
                                            "field": "ActualCount", "title": _l.stocktake_ActualCount, format: "{0:#,0.###}", headerAttributes: { "class": "tdSLC txtR" }, attributes: { "class": "tdSLC txtR" },
                                            template: "{{dataItem.ActualCount|formatQuantity}}<a ng-click=\"showpopup(dataItem)\" class='viewmore serialNumb' ng-show='dataItem.IsLotSerialControl'>" + $scope._l.viewmore + "</a>"
                                        },
                                        { "field": "AdjustmentValue", "title": _l.stocktake_AdjustmentValue, format: "{0:#,0.###}", headerAttributes: { "class": "tdStatus txtR" }, attributes: { "class": "tdStatus txtR" } },
                                    ];

                    $scope.showpopup = function (item) {
                        //console.log(item);
                        $scope["serialpopup" + item.Id].showWindow();
                    }

                    $scope.stocktakeGridDatabound = function (e) {
                        var gridData = e.sender.dataSource.data();

                        $.each(gridData, function (i, row) {
                            //console.log(row);
                            if (row.IsLotSerialControl) {
                                //console.log(row);
                                row.SystemSerialNumbers = row.SystemSerialNumbers || "";
                                row.SerialNumbers = row.SerialNumbers || "";

                                if (row.SystemSerialNumbers)
                                    $scope["serials-sent" + row.Id] = row.SystemSerialNumbers.split(',');
                                if (row.SerialNumbers)
                                    $scope["serials-receive" + row.Id] = row.SerialNumbers.split(',');


                                var affectedSerials = [];
                                for (var j = 0; j < row.SerialNumbers.split(',').length; j++) {
                                    var sr = row.SerialNumbers.split(',')[j];
                                    if (sr.length > 0 && !(row.SystemSerialNumbers.split(',').indexOf(sr) > -1)) {
                                        affectedSerials.push({ "SerialNumber": sr, "Status": $scope._l.serialNew });
                                    }
                                }

                                for (var jk = 0; jk < row.SystemSerialNumbers.split(',').length; jk++) {
                                    var si = row.SystemSerialNumbers.split(',')[jk];
                                    if (si.length> 0 && !(row.SerialNumbers.split(',').indexOf(si) > -1)) {
                                        affectedSerials.push({ "SerialNumber": si, "Status": $scope._l.serialUnmatch });
                                    }
                                }

                                //
                                $scope["affectedSerials" + row.Id] = affectedSerials;

                                var popup = '<kv-view-two-serial-popup kv-title="Serial hệ thống" kv-title2="Serial thực tế" kv-title3="Serial ảnh hưởng" kv-name="serialpopup' + row.Id +
                                                    '" kv-source="serials-sent' + row.Id + '" kv-source2="serials-receive' + row.Id +
                                                    '" kv-source3 = "affectedSerials' + row.Id + '"></kv-view-two-serial-popup>';


                                var tags = angular.element($('<tr style="display:none;"><td colspan="5">' + popup + '</td></tr>'));
                                var el = $compile(tags)($scope);

                                $timeout(function () {
                                    $('tr[data-uid="' + row.uid + '"]').after(tags);
                                });
                            }

                            for (var j = 0; j < $scope.selectedProduct.length; j++) {
                                if (row.ProductId == $scope.selectedProduct[j]) {
                                    $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                }
                            }
                        });
                        if ($('tr').hasClass('tr-currentSelected')) {
                            e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                        }
                    }

                    $scope.cancel = function () {
                        $scope.wdstocktakePopup.close();
                    };
                    $scope.print = function () {
                        _logger.success("Action Print");
                        $scope.wdstocktakePopup.close();
                    };
                    $scope.dispose = function () {
                        $scope.dataItem = null;
                        //$scope.cursellers = null;
                        $scope.stdetails = null;
                        $scope.selectedProduct = null;
                    };

                    this.showStockTake = function (id, selectedProduct) {
                        $scope.selectedProduct = selectedProduct;
                        var r = _stocktake.get({ stocktakeId: id, Includes: ["UserCreate", "Branch"] });
                        r.$promise.then(function (resultStockTake) {
                            $scope.window.openDetail(resultStockTake);
                        }, function (err) {
                            _logger.error(getMessage(err));

                        });

                    };


                    //inject to parent 
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = this;
                    }

                }
            ],
            templateUrl: _session.partialPath('stocktake-popup.html')
        };
    }]);;
'use strict'
kvApp.controller('SupplierCtrl', ['$scope', 'logger', 'kvMessages', 'kendofilter', 'OrderResource', '$location', '$rootScope', '$routeParams', '$filter', 'kvPaymentDocType', 'kvConfirmBox', 'SupplierResource', 'kvExportToExcel', 'purchaseOrderStatusMap',
    function ($scope, _logger, _m, _filter, _orders, $location, $rootScope, $routeParams, $filter, paymentDocType, _msgBox, _suppliers, _export, _purchaseOrderStatusMap) {
        $scope.pageSize = pager.defaultList;
        $scope.pageSizes = pager.pageSizes;
        var rights = $scope.rights = {};
        rights.canUpdate = $scope._p.has('Supplier_Update');
        rights.canCreate = $scope._p.has('Supplier_Create');

        rights.canImport = $scope._p.has('Supplier_Import');
        rights.canExport = $scope._p.has('Supplier_Export');

        rights.canDelete = $scope._p.has('Supplier_Delete');
        rights.canViewInvoice = $scope._p.has('PurchaseInvoice_Read') || $scope._p.has('Supplier_Export');
        rights.canViewDebt = $scope._p.has('SupplierAdjustment_Read') || $scope._p.has('Supplier_Export');
        rights.canAdjustDebt = $scope._p.has('SupplierAdjustment_Create');
        rights.canCreatePayment = $scope._p.has('PurchasePayment_Create');        
        $scope.bindedGrid;
        $scope.griddataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };
        $scope.filterDate = {
            typeFilter: 'common',
            StartDate: new Date(),
            EndDate: new Date(),
            TimeRange: 'alltime'
        }
        $scope.custFilter = { };
        var initFilter = function () {
            if ($routeParams.Code || $routeParams.code) {
                $scope.custFilter.Code = $routeParams.Code || $routeParams.code;
                return [_filter.newCondition('Code', $scope.custFilter.Code, 'contains')];
            }
            return [];
        };
        $scope.addSupplier = function () {

            showPopup(null);
        };
        $scope.editSupplier = function (supplier) {

            showPopup(supplier);
        };

        function showPopup(supplier) {

            $rootScope.$broadcast(app.events.showSupplierForm, supplier);
        }

        function updateViewOnDebtChanged() {
            setTimeout(function () { $scope.suppliers.read(); }, 500);
        }

        var openWindow = function (supplier) {
            $scope.supplierWindow.wrapper.find(".addMoreMain .fa").removeClass('fa-minus-square').addClass('fa-plus-square');
            $scope.supplierWindow.wrapper.find(".addMoreBox").addClass('ng-hide');
            var listeners = {
                onSave: function () {
                    $scope.suppliers.read();
                    $scope.supplierWindow.close();
                },
                onSaveError: function (err) {
                    _logger.error(err);
                },
                onCancel: function () {
                    $scope.supplierWindow.close();
                }
            };
            if (!supplier)
                supplier = {};
            else {
                $scope.source = supplier;
                //make a copy
                supplier = angular.copy(supplier);
            }
            //$scope.supplierWindow.title($scope._l.supplier + (!supplier.Code ? "" : ": " + supplier.Code));
            $scope.supplierWindow.title(!supplier.Code ? $scope._l.supplier_AddTitle : $scope._l.supplier_Edit);
            $scope.supplierForm.setListeners(listeners);
            $scope.supplierForm.setSupplier(supplier);
            $scope.supplierWindow.wrapper.addClass("k-window-supplier");
            $scope.supplierWindow.center().open();
            refresh($scope);
        };

        var getAdditionalParam = function () {
            //return filter by total invoiced amount 
            var invoicedFilter = $scope.custFilter.TotalInvoiced;
            var param = {};
            if (invoicedFilter) {

                if (invoicedFilter.From === 0 || invoicedFilter.From) {
                    param.InvoicedLower = invoicedFilter.From;
                }

                if (invoicedFilter.To === 0 || invoicedFilter.To) {
                    param.InvoicedUpper = invoicedFilter.To;
                }
            }

            param.DateFilterType = $scope.filterDate.TimeRange;
            if (param.DateFilterType === 'other') {
                if ($scope.filterDate.StartDate) {
                    param.StartDate = $scope.filterDate.StartDate.toISOString();
                }
                if ($scope.filterDate.EndDate) {
                    param.EndDate = $scope.filterDate.EndDate;
                    param.EndDate = new Date(param.EndDate.DateAdd(1)).toISOString();

                }
            }

            return param;
        };

        $scope.suppliers = new kendo.data.DataSource({
            type: "odata",
            transport: {
                read: {
                    url: "/api/suppliers?format=json" + ( ($scope.rights.canViewInvoice || $scope.rights.canViewDebt) ? "&Includes=TotalInvoiced" : "") + "&ForSummaryRow=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: getAdditionalParam
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response) {                        
                        //this.totalValue = kendo.toString(response.Total1Value, "n0") + "<span class='dpib customerDebtTotal'>" + kendo.toString(response.Total2Value, "n0") + '</span>';
                        if (response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        var hasSummary = false;
                        angular.forEach(response.Data, function (r) {
                            if (!r.Debt)
                                r.Debt = 0;
                            
                            if (r.Id == -1) {
                                hasSummary = true;
                                if (!$scope.rights.canViewInvoice)
                                    r.TotalInvoiced = "";
                                if (!$scope.rights.canViewDebt)
                                    r.Debt = "";
                            } else {
                                r.CompareCode = r.Code;
                                r.CompareName = r.Name;
                                r.ComparePhone = r.Phone;
                            }
                        });

                        if (hasSummary) {
                            this.hasSummaryRow = true;
                        }
                    }
                    return response;
                },
                model: {
                    fields: {
                        Name: { type: "string" },
                        Phone: { type: "string" },
                        Email: { type: "string" }
                    }
                }
            }
        });
        $scope.$on("refreshSupplierDebtor", updateViewOnDebtChanged);

        $scope.grdColumns = [{ "field": "Code", "title": $scope._l.supplierCode, headerAttributes: { "class": "tdName" }, attributes: { "class": "tdName" } },
                    { "field": "Name", "title": $scope._l.supplier_Name, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                    { "field": "Phone", "title": $scope._l.contactNo, headerAttributes: { "class": "tdPhone" }, attributes: { "class": "tdPhone" } },
                    { "field": "Email", "title": $scope._l.email, headerAttributes: { "class": "tdBranch" }, attributes: { "class": "tdBranch" } },
                    { "field": "Address", "title": $scope._l.address, headerAttributes: { "class": "tdBranch" }, attributes: { "class": "tdBranch" }, hidden: true },
                    { "field": "Company", "title": $scope._l.organization, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                    { "field": "Debt", "title": $scope._l.supplier_Debt, format: "{0:n0}", headerAttributes: { "class": "tdDebt txtR" }, attributes: { "class": "tdDebt txtR" } },
                    { "field": "TotalInvoiced", "title": $scope._l.totalPurchaseFilter, format: "{0:n0}", headerAttributes: { "class": "tdTotal txtR" }, attributes: { "class": "tdTotal txtR" } }                    

        ];
        if (!$scope.rights.canViewInvoice) {
            for (var i = 0; i, $scope.grdColumns.length; i++) {
                if ($scope.grdColumns[i].field == 'TotalInvoiced') {
                    $scope.grdColumns.splice(i, 1);
                    break;
                }
            }
        }
        if (!$scope.rights.canViewDebt) {
            for (var j = 0; j < $scope.grdColumns.length; j++) {
                if ($scope.grdColumns[j].field == 'Debt') {
                    $scope.grdColumns.splice(j, 1);
                    break;
                }
            }
        }
        
        $scope.import = function () {
            $scope.importSupplierPopup.showPopup(function () {
                $scope.suppliers.read();
            });
        };
        $scope.export = function () {
            var filter = $scope.suppliers.reader.kvFilter;
            //var col = $scope.grdColumns;
            //var arrcol = [];
            //for (var idx = 0; idx < col.length; idx++) {
            //    arrcol.push({
            //        Field: col[idx].field, Title: col[idx].title,
            //        Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
            //        Width: col[idx].width
            //    });
            //}
            if (filter.ForSummaryRow)
                filter.ForSummaryRow = false;

            var type = "Supplier";
            var fileName = "DanhSachNhaCungCap";
            //var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
            var data = { req: JSON.stringify(filter) };
            _export.toExcel(type, fileName, data);

        };
        if ($('#supplierDetailTmpl').length > 0) {
            $scope.detailTemplate = kendo.template($('#supplierDetailTmpl').html());
        }

        var supplierHandler = {
            onSave: function (supplier) {
                _logger.success(_m.supplierSaveSuccess);
            },
            onSaveError: function (err) {
                _logger.error(err);
            }
        };
        /*
        $scope.updateSupplier = function (supplier) {
            $rootScope.$broadcast('editSupplier', supplier);
        };
        */
        $scope.deleteSupplier = function (supplier) {
            _msgBox.confirm($filter("stringFormat")($scope._l.supplier_MsgDelSupplier, [supplier.Code]), $scope._l.supplier_DelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgBox.onConfirm = function () {
                _suppliers.remove({ supplierId: supplier.Id, CompareCode: supplier.Code, CompareName: supplier.Name }, function () {
                    _logger.success($scope._m.globalDeleteSuccess);
                    $scope.suppliers.read();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };
        };

        $scope.updateBalance = function (supplier) {
            $scope.$broadcast('supplier-update-balance', supplier);
        };

        $scope.makePayment = function (supplier) {
            //$scope.paymentPopup
            $scope.paymentFormPopup.showPaymentForSupplier(supplier, {
                onSave: updateViewOnDebtChanged
            });
        };

        $scope.filterByCode = function () {
            var filter = [];
            if ($scope.custFilter.Code && $scope.custFilter.Code.length >= 1) {
                /*
                _filter.remove($scope.customers, 'Code');
                _filter.remove($scope.customers, 'ContactNumber');
                _filter.remove($scope.customers, 'Name');
                */
                var cond = [];
                cond.push(_filter.newCondition('Code', $scope.custFilter.Code, 'contains'));
                cond.push(_filter.newCondition('Phone', $scope.custFilter.Code, 'contains'));
                cond.push(_filter.newCondition('Name', $scope.custFilter.Code, 'contains'));
                filter = _filter.append(filter, cond, "or");
                _filter.addfilter($scope.suppliers, filter);
                //_filter.filter($scope.customers, cond, "or");
            } else if (!$scope.custFilter.Code) {
                filter = $scope.suppliers.filter();
                if (!filter) return;
                filter = _filter.detach(filter, 'Code');
                filter = _filter.detach(filter, 'Phone');
                filter = _filter.detach(filter, 'Name');
                $scope.suppliers.filter(filter);
            }
        };

        /*
        function removeUrlParam(url, para) {
            return url.replace('&' + para + '=(\d|\w)+','');
        }
        
        function addUrlParam(url, para, val) {
            return url += '&' + para + '=' + encodeURIComponent(val);
        }
        */
        $scope.filterByTotalInvoiced = function () {
            //force reload
            $scope.suppliers.read();
        };

        $scope.filterByDateRange = function () {
            $scope.suppliers.read();
        };

        //$scope.filterByCustomDateRange = function () {
        //    $scope.lblOtherTimeFilter = ($scope.custFilter.fromDate ? $filter('date')($scope.custFilter.fromDate, 'dd/MM/yyyy') : '') + " - " + ($scope.custFilter.toDate ? $filter('date')($scope.custFilter.toDate, 'dd/MM/yyyy') : '');
        //    $scope.custFilter.dateRange = 'other';
        //    //$scope.dateFilterPopup.close();
        //    $scope.suppliers.read();
        //};

        $scope.filterByDebt = function () {
            var debFilter = $scope.custFilter.Debt;
            _filter.remove($scope.suppliers, 'Debt');
            if (debFilter) {
                var cond = [];
                if (debFilter.From != null && debFilter.From != undefined && !isNaN(parseFloat(debFilter.From))) {
                    cond.push(_filter.newCondition('Debt', debFilter.From, 'ge'));
                }
                if (debFilter.To != null && debFilter.To != undefined && !isNaN(parseFloat(debFilter.To))) {
                    cond.push(_filter.newCondition('Debt', debFilter.To, 'le'));
                }

                if (cond.length > 0) {
                    _filter.filter($scope.suppliers, cond, 'and');
                }
            }
        };

        $scope.showDocumentDetail = function (data, supplier) {
            if (data.type == paymentDocType.values.Buy) {
                $scope.invoicePopup.showInvoice(data.id);
            } else {
                if (data.type == paymentDocType.values.Payment) {
                    $scope.paymentPopup.showPayment(data.code, function () {
                        $scope.suppliers.read();
                    });
                } else if (data.type == paymentDocType.values.PurchaseReturn) {
                    $scope.returnPopup.showReturn(data.id);
                } else if (data.type == paymentDocType.values.ClosingLoanBook) {
                    $scope.$broadcast('supplier-show-adjustment', data, supplier);
                }
                else if (data.type == paymentDocType.values.PaymentViaCashflow) {
                    $location.url('/' + viewUrl.cashflow + '?Code=' + data.code);
                }
            }

        };

        $scope.exportSupplierOrder = function () {
            log.error($scope._l.supplier_NotUseToFunction);
        };
        $scope.exportSupplierDebt = function () {
            log.error($scope._l.supplier_NotUseToFunction);
        };


        $scope.grvDetailInit = function (e) {
            //e.detailRow.find('.tabstrip')
            var detailRow = e.detailRow;

            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation:false
            });
            var hideTab = function (index) {
                $(tabship.data("kendoTabStrip").items()[index]).attr("style", "display:none");
            };

            if ($scope.rights.canViewInvoice) {

                var initOrderFilter = function (id) {
                    var filter = [];
                    var para = getAdditionalParam();
                    filter = _filter.append(filter, [_filter.newCondition('SupplierId', id, "eq")], "and");
                    if (para.DateFilterType === 'other') {
                        if (para.StartDate) {
                            filter = _filter.append(filter, [_filter.newCondition('PurchaseDate', kendo.parseDate(para.StartDate), "ge")], "and");
                        }
                        if (para.EndDate) {
                            filter = _filter.append(filter, [_filter.newCondition('PurchaseDate', kendo.parseDate(para.EndDate), "lt")], "and");
                        }
                    } else if (para.DateFilterType !== 'all') {
                        filter = _filter.append(filter, [_filter.newCondition('PurchaseDate', para.DateFilterType, "eq")], "and");
                    }
                    return filter;
                };

                //=== supplier order list =========================
                var supplierOrderList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/purchaseorders?format=json&Includes=Branch&Includes=Total&Includes=SubTotal&Includes=Supplier&Includes=User&Status=' + _purchaseOrderStatusMap.Finalized,
                            dataType: 'json'
                        }
                    },
                    pageSize: 5,
                    change: function () {
                        if (this._total == 0) {
                            hideTab(1);
                        }
                    },
                    filter: initOrderFilter(e.data.Id),
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        parse: function (response) {

                            if (response) {
                                if (response.Filter) {
                                    this.kvFilter = response.Filter;
                                }
                            }
                            return response;
                        },
                        model: {
                            fields: {
                                Code: { type: "string" },
                                PurchaseDate: { type: "date" },
                            }
                        }
                    },
                });


                detailRow.find('.supplierOrderList').kendoGrid({
                    dataSource: supplierOrderList,
                    pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo } },
                    dataBinding: function (obj) {
                        e.data.orderCount = this.dataSource._total;
                        $scope.emptyGridFix(obj);
                    },
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.orderCode").click(function () {
                            var id = $(this).attr("data");
                            scope.showOrderDetail(id);
                            refresh($scope);
                        });
                    },
                    columns: [
                        { "field": "Code", "title": $scope._l.orderCode, template: '<a href="javascript:void(0)" class="orderCode" data="#=Id#">#=Code#</a>', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                        { "field": "PurchaseDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy H:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { "field": "User.GivenName", "title": $scope._l.createdBy },
                        { "field": "Total", "title": $scope._l.total, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } }
                    ]
                });
                $scope.exportSupplierOrder = function () {
                    var filter = supplierOrderList.reader.kvFilter;
                    var col = $('.supplierOrderList').data("kendoGrid").options.columns;
                    var arrcol = [];
                    for (var idx = 0; idx < col.length; idx++) {
                        arrcol.push({
                            Field: col[idx].field, Title: col[idx].title,
                            Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                            Width: col[idx].width
                        });
                    }
                    var type = "PurchaseOrder";
                    var fileName = "LichSuNhapHang";
                    var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);

                };
            } else {
                hideTab(1);
            }
            if ($scope.rights.canViewDebt) {
                //===========supplier debt list================
                var supplierDebtList = new kendo.data.DataSource({
                    type: 'odata',
                    transport: {
                        read: {
                            url: '/api/suppliers/' + e.data.Id + '/debt?format=json&GroupCode=true',
                            dataType: 'json'
                        }
                    },
                    //change: function () {
                    //    if (this._total == 0) {
                    //        hideTab(2);
                    //    }
                    //},
                    pageSize: 5,
                    serverPaging: false,
                    serverFiltering: true,
                    serverSorting: true,
                    schema: {
                        data: 'Data',
                        total: 'Total',
                        model: {
                            fields: {
                                DocumentCode: { type: "string" },
                                TransDate: { type: 'date' }
                            }
                        },
                        parse: function (response) {
                            if (response.Filter) {
                                this.kvFilter = response.Filter;
                            }
                            //#296

                            angular.forEach(response.Data, function (r, i) {
                                r.Value = -r.Value;
                                r.Balance = -r.Balance;
                                /* ** comment out to fix #474, not sure why it's here in the first place
                                if (i >= 1) {
                                    var c = response.Data[i];
                                    var p = response.Data[i - 1];
                                    var tdC = new Date(c.TransDate.match(/\d+/)[0] * 1);
                                    var tdP = new Date(p.TransDate.match(/\d+/)[0] * 1);
                                    if (tdC.toString() == tdP.toString() && c.DocumentType < p.DocumentType) {
                                        var tmp = response.Data[i];
                                        response.Data[i] = response.Data[i - 1];
                                        response.Data[i - 1] = tmp;
                                    }
                                }
                                */
                                //#296

                                r.TypeStr = paymentDocType.labels[r.DocumentType];
                                r.Value = $filter('balSheetFormat')(r.Value);
                                r.Balance = $filter('balSheetFormat')(r.Balance);
                            });


                            return response;
                        }
                    }
                });

                // e.data.debtList = supplierDebtList;

                detailRow.find('.supplierDebtList').kendoGrid({
                    dataSource: supplierDebtList,
                    pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.supplier_DebtPaging } },
                    dataBinding: function (arg) {
                        e.data.recordCount = this.dataSource._total;
                        $scope.emptyGridFix(arg);
                    },
                    dataBound: function () {
                        var scope = angular.element(this.wrapper).scope();
                        this.wrapper.find("a.documentCode").click(function () {                            
                            var data = $(this).data();
                            var supplier = scope.dataItem;
                            //data.debtList = supplierDebtList;
                            if (data && supplier) {
                                scope.showDocumentDetail(data, supplier);
                                refresh($scope);
                            }
                        });
                    },
                    columns: [
                        {
                            field: "DocumentCode", title: $scope._l.supplier_CodeDebt,
                            template: '#if(DocumentType!=' + paymentDocType.values.PaymentViaCashflow + '){#' +
                                '<a href="javascript:void(0)" class="documentCode" data-id="#=DocumentId#" data-code="#=DocumentCode#" data-type="#=DocumentType#">#=DocumentCode#</a>' +
                                '#}else{# ' + '<a href="\\#/' + viewUrl.cashflow + '?Code=#=DocumentCode#" target="_blank">#=DocumentCode#</a>' +
                                '#}#', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" }
                        },
                        { field: 'TransDate', title: $scope._l.lblTime, format: "{0:dd/MM/yyyy H:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                        { field: 'TypeStr', title: $scope._l.supplier_Type },
                        { field: "Value", title: $scope._l.supplier_Value, headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } },
                        { field: "Balance", title: $scope._l.supplier_DebtSubTitle, headerAttributes: { "class": "tdCode txtR" }, attributes: { "class": "tdCode txtR" } }
                    ]
                });
                $scope.exportSupplierDebt = function () {
                    var filter = supplierDebtList.reader.kvFilter;
                    var col = $('.supplierDebtList').data("kendoGrid").options.columns;
                    var arrcol = [];
                    for (var idx = 0; idx < col.length; idx++) {
                        arrcol.push({
                            Field: col[idx].field, Title: col[idx].title,
                            Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                            Width: col[idx].width
                        });
                    }
                    var type = "CustomerDebt";
                    var fileName = "LichSuThanhToanNhaCungCap";
                    var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                    _export.toExcel(type, fileName, data);

                };
            } else {
                hideTab(2);
            }
        };

        $scope.showOrderDetail = function (orderId) {
            $scope.invoicePopup.showInvoice(orderId);
            //  $location.url('/' + viewUrl.purchaseOrder + '?code=' + orderId);
        };

        $scope.refresh = function () {
            $scope.suppliers.pageSize(parseInt($scope.pageSize));
        };


    }])  
.directive('kvSupplierFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
            //console.log('testing');
        },
        controller: ['$scope', function ($scope) {

        }],
        templateUrl: _session.partialPath('supplier-filter.html')
    };
}])
/*
.controller('SupplierFormPopupCtrl', ['$scope', 'SupplierResource', function ($scope, _suppliers) {
    var handler = function () {
        $scope.supplierWindow.close();
    }
    $scope.$on('editSupplier', function (evt, data) {
        if (data) {
            $scope.supplier = data; //buffer only
            $scope.supplierWindow.title($scope._l.supplier);
            $scope.supplierWindow.center().open();
            var temp = _suppliers.get({ supplierId: data.Id }, function () {
                $scope.supplier = temp;
                $scope.supplierForm.setListeners({
                    onSave: handler, onCancel: handler
                })
                $scope.supplierForm.setSupplier($scope.supplier);
            });

            $scope.supplierWindow.onClose = function () {
                $scope.supplierForm.clearListener();
            };
        }
    });
}])
*/
.controller('SupplierFormCtrl', ['$scope', '$routeParams', 'SupplierResource', '$location', function ($scope, $routeParams, _suppliers, $location) {
    var supplier = null;
    if ($routeParams.id === 'new') {
        $scope.supplier = {};
        //$scope.supplierForm.setSupplier(supplier);
    }
    else {
        $scope.supplier = _suppliers.get({ supplierId: $routeParams.id }, function () {
            if ($scope.supplierForm) {
                $scope.supplierForm.setSupplier($scope.supplier);
            };
        });
    }

    $scope.onFormLoaded = function () {
        $scope.supplierForm.setListeners({
            onSave: function () {
                $location.path('/' + viewUrl.supplierList);
            },
            onCancel: function () {
                $location.path('/' + viewUrl.supplierList);
            }
        });
        $scope.supplierForm.setSupplier($scope.supplier);
    };
}])
.controller('SupplierBalancePopupCtrl', ['$scope', 'logger', 'SupplierResource', 'SupplierAdjustmentResource', 'kvConfirmBox', '$filter', 'kvMessages', function ($scope, _logger, _supplier, _adjustments, _msgBox, $filter, _m) {
    $scope.$on('supplier-update-balance', function (evt, supplier) {
        $scope.supplier = supplier;
        $scope.adjust = {};
        $scope.AdjustmentDate = new Date();
        $scope.balancePopup.title($scope._l.debtAdjust);
        $scope.balancePopup.wrapper.addClass("k-window-poup k-window-poup-thn");
        $scope.balancePopup.center().open();
    });
    $scope.AdjustmentDate = new Date();
    $scope.maxDate = new Date();
    $scope.maxDate.setHours(23, 59, 59, 999);
    function refreshDebtorGrid() {
        //refreshSupplierDebtor
        $scope.$parent.$broadcast("refreshSupplierDebtor");
    }
    $scope.$on('supplier-show-adjustment', function (evt, info, supplier) {
        $scope.adjust = _adjustments.get({ adjustId: info.id, Includes: ['User'] }, function() {
            if ($scope.adjust && $scope.adjust.Balance) {
                $scope.adjust.Balance *= -1;
            }
            $scope.CompareAdjustmentDate = $scope.adjust.AdjustmentDate != null && $scope.adjust.AdjustmentDate != undefined ? kendo.parseDate($scope.adjust.AdjustmentDate) : kendo.parseDate($scope.adjust.CreatedDate);
            $scope.AdjustmentDate = $scope.CompareAdjustmentDate;
        });
        $scope.balancePopup.title($scope._l.debtAdjust);
        //$scope.dataSource = info.debtList;
        $scope.balancePopup.wrapper.addClass("k-window-poup");
        $scope.balancePopup.center().open();
        $scope.supplier = supplier;
    });
    $scope.void = function () {
        _msgBox.confirm($filter("stringFormat")(_m.balanceAdjustment_MsgDel, [$scope.adjust.Code]), _m.balanceAdjustment_TitleDel, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgBox.onConfirm = function () {
            _supplier.deleteAdjustDebt({ Adjustment: $scope.adjust, supplierId: $scope.supplier.Id, CompareCode: $scope.supplier.Code, CompareName: $scope.supplier.Name }, function (r) {
                _logger.success(r.Message);
                refreshDebtorGrid();
                $scope.cancel();
            }, function (er) {
                _logger.error(getMessage(er));
            });
        };
    };
    $scope.update = function () {
        //if (Math.abs($scope.adjust.Balance - $scope.supplier.Debt) > 0.0000001) {
            $scope.adjust.Value = $scope.adjust.Balance - $scope.supplier.Debt;
            $scope.adjust.AdjustmentDate = $scope.AdjustmentDate ? $scope.AdjustmentDate : new Date();
            _supplier.adjustDebt({ Adjustment: $scope.adjust, supplierId: $scope.supplier.Id, CompareCode: $scope.supplier.Code, CompareName: $scope.supplier.Name, CompareBalance: $scope.supplier.Debt, CompareAdjustmentDate: $scope.CompareAdjustmentDate }, function () {
                _logger.success($scope._m.globalSaveSuccess);

                // $scope.supplier.debtList.read();
                refreshDebtorGrid();

                $scope.cancel();
                //refresh page 
            }, function (er) {
                _logger.error(getMessage(er));
            });
        //} else {
        //    _logger.info($scope._l.customer_AccountNoChange);
        //}
    };

    $scope.cancel = function () {
        $scope.balancePopup.close();
    };

    $scope.onClose = function () {
        $scope.supplier = null;
        $scope.adjust = null;
        $scope.dataSource = null;
    };
}]).directive('kvSupplierImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages', '$rootScope',
    function (_session, _logger, $filter, _l, _m, $rootScope) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope._l = _l;
                    $scope._m = _m;
                    //$scope.IsReplaceExisting = true;
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                                _logger.error($scope._l.pricebook_MsgImportErrorFile);
                                e.preventDefault();
                            }
                        });
                        e.data = { isUpdateDebt: $scope.IsUpdateDebt };
                        $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
                    };

                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();
                        $scope.IsUpdateDebt = true;
                    };
                    var onSuccessImport = function (e) {
                        var data = e.response.Data;
                        //if ($scope.IsReplaceExisting) {
                        //$scope.$parent.cart.PurchaseOrderDetails = data;
                        //   $scope.$parent.pricebookDetails.dataSource.read();
                        //} else {
                        //    for(var v=0;v<data.length;v++ ){
                        //        $scope.$parent.cart.addDetail(data[v]);
                        //    }
                        //}
                        $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
                        $scope.importWindow.close();
                        //$scope.$parent.suppliers.read();
                        //refresh($scope.$parent);
                        if ($scope.callback) {
                            execCb($scope.callback);
                        }
                        //$scope.RefreshGrid();
                    };
                    var onImportError = function (e) {
                        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                            $scope.ImportError = $rootScope._m.sessionExpire;
                        } else {
                            if (e.XMLHttpRequest.responseText) {
                                $scope.ImportError = e.XMLHttpRequest.responseText;
                            } else {
                                $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                            }
                        }
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };

                    var onImportCancel = function (e) {
                    };
                    $scope.showPopup = function (callback) {
                        $scope.IsUpdateDebt = true;
                        $scope.importWindow.wrapper.addClass("k-window-poup k-window-masstel k-window-importSupplier");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.callback = callback;
                        $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
                        $scope.importWindow.wrapper.find(".k-upload-status").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,

                        async: {
                            saveUrl: "/Files/ImportSupplier",
                            removeUrl: "/Files/Remove",
                            autoUpload: false
                        },

                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: $scope._l.import_ChooseFile,
                            uploadSelectedFiles: $scope._l.import_Uploaded,
                            statusUploading: $scope._l.import_Uploading,
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }

                }
            ],
            templateUrl: _session.partialPath('supplier-import.html')
        };
    }])
;
;
'use strict';
kvApp.controller('SurchargeCtrl', ['$scope', 'logger', 'kvMessages', 'kendofilter', '$rootScope', '$routeParams', '$filter', 'kvConfirmBox', 'kvSession', 'BranchResource', 'SurchargeResource', 'kvLabel',
function ($scope, _logger, _m, _filter, $rootScope, $routeParams, $filter, _msgBox, _session, _branches, _surcharge, _labels) {
        $scope._l = _labels;
        var rights = window.rights = $scope.rights = {};
        $scope.$on('$destroy', function () {
            window.rights = null;
        });
        rights.canUpdate = $scope._p.has('Surcharge_Update');
        rights.canCreate = $scope._p.has('Surcharge_Create');
        rights.canDelete = $scope._p.has('Surcharge_Delete');
        
        
        $scope.branches = _branches.get({ Permission: 'Surcharge_Create' }, function () {
            $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
        });
        $scope.currentBranchId = _session.branch.Id;
        var kvDropbox = {};
        $scope.branchids = kvDropbox.branchids ? kvDropbox.branchids : [$scope.currentBranch];
        $scope.isActive = 2;
        $scope.pageSize = pager.defaultList;
        $scope.pageSizes = pager.pageSizes;

        $scope.showInvoiceDetail = function (data) {
            $location.url('/' + viewUrl.invoiceList + '?code=' + data.code);
        };
        $scope.refresh = function () {
            $scope.DataSource.pageSize(parseInt($scope.pageSize));
        };
        $scope.bindedGrid;
        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };
        var kvDropbox = {};
        if ($routeParams.filter) {
            kvDropbox = JSON.parse($routeParams.filter);
        }

        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            $scope.filterCode = $routeParams.Code;
        }

        $scope.filterbyBranch = function () {
            $scope.DataSource.read();
        };
        $scope.FilterActive = function () {

            if ($scope.isActive == 1 || $scope.isActive == 0) {
                var condition = [_filter.newCondition("isActive", $scope.isActive == 1? true:false, "eq")];
                _filter.filter($scope.DataSource, condition, "and");
            } else {
                _filter.remove($scope.DataSource, "isActive");
            }
        };

        $scope.filterByCode = function () {
            if ($scope.filterCode) {
                var condition = [_filter.newCondition('Code', $scope.filterCode, 'contains')];
                _filter.filter($scope.DataSource, condition, 'Code');
            } else {
                _filter.remove($scope.DataSource, 'Code');
            }
        };

        $scope.filterByName = function () {
            if ($scope.filterName) {
                var condition = [_filter.newCondition('Name', $scope.filterName, 'contains')];
                _filter.filter($scope.DataSource, condition, 'Name');
            } else {
                _filter.remove($scope.DataSource, 'Name');
            }
        };

        function initFilter() {
            var filter = [];
            
            if ($scope.filterCode) {
                filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filterCode, 'contains')], 'and');
            }

            var condition = [];
            return filter;
        }

        $scope.showDocumentDetail = function (data) {
            $scope.invoicePopup.showInvoice(data.id);
        };
        function filterByExtention() {
            var para = {};
            var b = [];
            angular.forEach($scope.branchids, function (value) {
                b.push(value.Id);
            });
            if (b.length > 0)
                para.BranchIds = JSON.stringify(b);
            return para;
        }
        $scope.DataSource = new kendo.data.DataSource({
            type: "odata",
            transport: {
                read: {
                    url: ("/api/surcharge?format=json&ForManage=true&Includes=SurchargeBranches"),
                    dataType: "json",
                    data: filterByExtention
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: false,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response) {
                        angular.forEach(response.Data, function (r) {
                            r.ValueText = r.Value ? kendo.toString(r.Value, "n0") + " VND" : r.ValueRatio ? r.ValueRatio + " %" : 0;
                            //r.isActiveForShow = r.isActive ? "đang thu" : "ngừng thu";
                           
                            if (r.isActive)
                                r.Status = "Đang thu";
                            else
                                r.Status = "Ngừng thu";
                        });
                    }
                    return response;
                },
                model: {
                    fields: {
                        Code: {type:"string"},
                        Name: { type: "string" },
                    }
                }
            }
        });
        $scope.grdColumns = [
            { field: "Code", title: $scope._l.surchargeCode, headerAttributes: { "class": "tdSSLP" }, attributes: { "class": "tdSSLP" } },
            { field: "Name", title: $scope._l.surchargeName, headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" } },
            { field: "ValueText", title: $scope._l.surchargeValue, format: "{0:n0}", headerAttributes: { "class": "tdCodePur txtR" }, attributes: { "class": "tdCodePur txtR" }, isNumber: true },
            { field: "Status", title: $scope._l.surchargeStatus, headerAttributes: { "class": "tdStatus" }, attributes: { "class": "tdStatus" } },
            { field: "Order", title: $scope._l.surcharge_Order, headerAttributes: { "class": "tdDebt" }, attributes: { "class": "tdDebt" }, hidden: true },
        ];
        $scope.detailTemplate = kendo.template($('#dpDetailTmpl').html());
        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;
            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false,
            });

        };
        $scope.addSurcharge = function () {
            $rootScope.$broadcast(app.events.showSurchargeForm, { data: null, lstSurcharge: $scope.DataSource.data() });
        };
        $scope.editSurcharge = function (s) {            
            $rootScope.$broadcast(app.events.showSurchargeForm, { data: s, lstSurcharge: $scope.DataSource.data() });
        };
        $scope.deleteSurcharge = function (s) {            
            _msgBox.confirm($filter("stringFormat")($scope._l.surcharge_MsgDel, [s.Code]), $scope._l.surcharge_Delete, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgBox.onConfirm = function () {
                _surcharge.remove({ surchargeId: s.Id, CompareCode: s.Code, CompareName: s.Name }, function () {
                    _logger.success($scope._m.globalDeleteSuccess);
                    $scope.DataSource.read();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };
        };
        $scope.activeSurcharge = function (s) {
            _msgBox.confirm($filter("stringFormat")(s.isActive == true ? $scope._l.surcharge_MsgStop : $scope._l.surcharge_MsgContinue, [s.Code]), "Xác nhận", false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgBox.onConfirm = function () {
                s.isActive = !s.isActive;
                _surcharge.save({ Surcharge: s }, function () {
                    _logger.success($scope._m.globalSaveSuccess);
                    $scope.DataSource.read();
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };
        }
}])
.directive('kvSurchargeFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
        },
        controller: ['$scope', function ($scope) {
        }],
        templateUrl: _session.partialPath('surcharge-filter.html')
    };
}])
.controller('SurchargeFormPopupCtrl', ['$scope', 'logger', '$location', 'SurchargeResource',
    function ($scope, _logger, $location, _surchargeResource) {
        var openWindow = function (params) {

            var s = params.data;
            var lstSurcharge = params.lstSurcharge;

            var listeners = {
                onSave: function (s) {
                    $scope.surchargeWindow.close();
                    $scope.DataSource.read();
                },
                onSaveError: function (err) {                    
                },
                onCancel: function () {
                    $scope.surchargeWindow.close();
                }
            };
            var title = '';
            if (!s) {
                s = {};
                title = $scope._l.surcharge_Add;
            }
            else {
                $scope.source = s;
                s = angular.copy(s);
                title = $scope._l.surcharge + ' ' + s.Code;
            }
            $scope.surchargeWindow.title(title);
            $scope.surchargeForm.setListeners(listeners);
            $scope.surchargeForm.setSurcharge(s, $scope.selectedGroupId, lstSurcharge);
            $scope.surchargeWindow.wrapper.addClass("k-window-poup k-window-fix k-window-surcharge");
            $scope.surchargeWindow.center().open();
            refresh($scope);
        };
        $scope.$on(app.events.showSurchargeForm, function (evt, params) {
            
            openWindow(params);
 
            $scope.surchargeWindow.onClose = function (e) {
                if ($scope.surchargeForm) {
                    $scope.surchargeForm.clearListener();
                }
            };
        });
    }])
;;
'use strict'
//hoanhd
kvApp.controller('TableCtrl', ['settings', 'kvSession', '$scope', '$rootScope', '$location', 'kendofilter', '$filter', '$routeParams', 'logger', 'kvConfirmBox', '$route', 'kvExportToExcel', 'TableResource', '$kWindow', 'TableGroupResource',
function (_settings, _session, $scope, $rootScope, $location, _filter, $filter, $routeParams, _logger, _msgbox, $route, _export, _table, $kWindow, TableGroupResource) {
    $scope.selectedGroupId = 0;
    $scope.keywordParam = '';
    $scope.pageSizes = pager.pageSizes;
    $scope.typeList = viewUrl.productList;
    $scope.typeEmail = viewUrl.orderEmail;
    var rights = window.rights = $scope.rights = {};
    rights.canCreate = $scope._p.has('TableAndRoom_Create');
    rights.canUpdate = $scope._p.has('TableAndRoom_Update');
    rights.canDelete = $scope._p.has('TableAndRoom_Delete');
    rights.canViewInvoice = $scope._p.has('Invoice_Read');

    $scope.$on('$destroy', function () {
        //detach those variable from window obj
        window.rights = null;
    });
    if ($("#rowTemplate").html()) {
        $scope.template = $("#rowTemplate").html();
        $scope.pageSize = pager.defaultEmail;
        // $scope.viewtype = $scope.typeEmail;
    } else {
        $scope.pageSize = pager.defaultList;
        //  $scope.viewtype = $scope.typeList;
    }
    $scope.AddTable= function ()
    {
        showPopup(null);
    }
    $scope.EditTable = function (data) {
        showPopup(data);
    }
    function showPopup(data) {
        if (!data) {
            data = { Id: 0, Name: '', GroupId: $scope.selectedGroupId, Position: 0 };
        }
        $scope.$broadcast(app.events.showTableForm, data);
    }
    var kvDropbox = {};
    if ($routeParams.filter) {
        kvDropbox = JSON.parse($routeParams.filter);
    }
    $scope.viewtype = (kvDropbox.viewtype) ? kvDropbox.viewtype : $scope.typeList;
    $scope.onChange = function (e) {
        var dataItem = e.sender.dataItem(e.sender.selectedIndex);
        $scope.selectedGroup = dataItem;
        $scope.filterbyGroup();
    };
    $scope.onCascade = function (e) {
        var dataItem = e.sender.dataItem(e.sender.selectedIndex);
        $scope.selectedGroup = dataItem;
        $scope.selectedGroupId = dataItem.Id;
        $scope.filterbyGroup();
    };
    $scope.comboGroup = {
        dataSource: new kendo.data.DataSource({
            type: "odata",
            //autoSync: true,
            transport: {
                read: {
                    url: "/api/tablegroups",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                }
            },
            schema: {
                data: "Data",
                total: "Total",

            }
        }),
        dataTextField: "Name",
        dataValueField: "Id",
        change: $scope.onChange,
        valuePrimitive: true,
        cascade: $scope.onCascade,
        optionLabel: {
            Name: $scope._l.sale_ChooseAll,
            Id: 0
        }
    }
    function initOrderFilter(id) {
        var filter = [];

        filter = _filter.append(filter, [_filter.newCondition('TableId', id, "eq")], "and");
        return filter;
    }
    $scope.detailTableInit = function (e) {
        var detailRow = e.detailRow;
        detailRow.find(".tabstrip").kendoTabStrip({
            animation:false,
            activate: function (tabevent) { }
        });

        if ($scope.rights.canViewInvoice) {
            //=== customer invoice list =========================
            var tableInvoiceList = new kendo.data.DataSource({
                type: 'odata',
                transport: {
                    read: {
                        url: '/api/invoices?format=json&Includes=SoldBy',
                        dataType: 'json'
                    }
                },
                pageSize: 5,
                serverPaging: false,
                serverFiltering: true,
                serverSorting: true,
                filter: initOrderFilter(e.data.Id),
                schema: {
                    data: 'Data',
                    total: 'Total',
                    parse: function (response) {
                        if (response) {
                            if (response.Filter) {
                                this.kvFilter = response.Filter;
                            }
                        }
                        return response;
                    },
                    model: {
                        fields: {
                            Code: { type: "string" },
                            PurchaseDate: { type: "date" },
                        }
                    }
                },
            });
            detailRow.find('.tableInvoiceList').kendoGrid({
                dataSource: tableInvoiceList,
                pageable: { pageSize: 10, refresh: false, "pageSizes": false, buttonCount: 5, messages: { display: $scope._l.pagerInfo + $scope._l.customer_invoiceHistoryPaging } },
                dataBinding: function () {
                    e.data.invoiceCount = this.dataSource._total;
                    $scope.emptyGridFix.apply(this, arguments);
                },

                columns: [
                    { "field": "Code", "title": $scope._l.invoiceCode, template: '<a href="\\#/' + viewUrl.invoiceList + '?Code=#=Code#" target="_blank" class="invoiceCode" data-code="#=Code#" data-id="#=Id#">#=Code#</a>', headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                    { "field": "PurchaseDate", "title": $scope._l.lblTime, format: "{0:dd/MM/yyyy}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" } },
                    { "field": "SoldBy.GivenName", "title": $scope._l.createdBy },
                    { "field": "Total", "title": $scope._l.total, format: "{0:n0}", headerAttributes: { "class": "tdTotal" }, attributes: { "class": "tdTotal" } }
                ]
            });

            $scope.exportTableInvoice = function () {
                var filter = tableInvoiceList.reader.kvFilter;

                var col = $('.tableInvoiceList').data("kendoGrid").options.columns;
                var arrcol = [];
                for (var idx = 0; idx < col.length; idx++) {
                    arrcol.push({
                        Field: col[idx].field,
                        Title: col[idx].title,
                        Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                        Width: col[idx].width
                    });
                }

                var type = "Invoice";
                var fileName = "LichSuBanHang";
                var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                _export.toExcel(type, fileName, data);
            };
        }

    };


    $scope.tableDetails = {
        dataSource: new kendo.data.DataSource({
            type: "odata",
            autoSync: true,

            transport: {
                read: {
                    url: "/api/tables?format=json&Includes=TableGroup",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                }
            },

            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            //filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    fields: {
                        Name: { type: "string" }
                    }
                },
                parse: function (response) {
                    if (response && response.Filter) {
                        this.kvFilter = response.Filter;
                    }
                    if (response && response.Data) {
                        for (var j = 0; j < response.Data.length; j++) {
                            var t = response.Data[j];
                            t.Description = t.Description ? t.Description : "";
                            if (typeof (t.TableGroup) == 'undefined') {
                                t.TableGroup = { Name: '---' };
                            }
                            if (typeof (t.Position) == 'undefined') {
                                t.Position = '';
                            }
                        }
                    }

                    return response;
                }
            }
        }),
        columns: [
            {
                field: "Name",
                title: $scope._l.table_Name,
                headerAttributes: { "class": "tdBranch" },
                attributes: { "class": "tdBranch" }

            },
            {
                field: "Description",
                title: $scope._l.note,
            },
            {
                field: "TableGroup.Name",
                title: $scope._l.table_Group,
                headerAttributes: { "class": "w100px" },
                attributes: { "class": "w100px" }
            },
                        {
                            field: "Position",
                            title: $scope._l.table_Position,
                            headerAttributes: { "class": "w100px" },
                            attributes: { "class": "w100px" }
                        },
        ],
        dataBound: $scope.emptyGridFix,
        detailTemplate: kendo.template($("#templTableDetail").html()),
        detailInit: $scope.detailTableInit,
        detailExpand: $scope.grvDetailExpand,
    };
    $scope.refresh = function () {
        $scope.tableDetails.dataSource.pageSize(parseInt($scope.pageSize));

    };
    $scope.RefreshGrid = function (isall) {
        if (isall) {
            $scope.comboGroup.dataSource.read();
        }
        $scope.tableDetails.dataSource.read();
    }
    $scope.filterbyKeyword = function () {
        if ($scope.keywordParam) {
            var condition = [
           _filter.newCondition("Name", $scope.keywordParam, "contains")];
            _filter.filter($scope.tableDetails.dataSource, condition, "and");
        } else {
            _filter.remove($scope.tableDetails.dataSource, "Name");
        }
    };
    $scope.filterbyGroup = function () {
        if ($scope.selectedGroupId) {
            var condition = [
           _filter.newCondition("GroupId", parseInt($scope.selectedGroupId), "eq")];
            _filter.filter($scope.tableDetails.dataSource, condition, "and");
        } else {
            _filter.remove($scope.tableDetails.dataSource, "GroupId");
        }
    };
    $scope.AddGroup = function () {

        var wdInstance = $kWindow.open({
            options: {
                modal: true,
                title: $scope._l.table_AddGroup,
                resizable: false,
                draggable: true,
                pinned: true,
                width: 500,
                visible: false,
                open: function () {
                    this.wrapper.addClass("k-window-poup k-window-masstel k-window-customerGroup");
                }
            },
            template: '<kv-table-group-form kv-on-save="onSave(group)" kv-on-cancel="onCancel()"></kv-table-group-form>',
            controller: ["$scope", "$windowInstance", function ($scope, $windowInstance) {

                $scope.onSave = function (group) {
                    $windowInstance.close(group);
                };

                $scope.onCancel = function () {
                    $windowInstance.close(false);
                };
            }]
        });

        wdInstance.result.then(function (resp) {
            if (angular.isObject(resp) && resp) {
                $scope.ddlSelectGroup.dataSource.add(resp.Data);
                $scope.selectedGroupId = resp.Data.Id;
                $scope.RefreshGrid(true);
            }
        });

        //$scope.tableGroupForm.showPopup(0, function (data) {
        //    $scope.selectedGroup = data;
        //    $scope.selectedGroupId = data.Id;
        //    $scope.RefreshGrid(true);

        //});
    };
    $scope.EditGroup = function () {

        if ($scope.selectedGroupId > 0) {

            /*
                CuongTL: New kendo window service -> update
            */
            TableGroupResource.get({ groupId: $scope.selectedGroupId }, function (data) {
                var wdInstance = $kWindow.open({
                    options: {
                        modal: true,
                        title: $scope._l.customer_GroupEditTitle,
                        resizable: false,
                        draggable: true,
                        pinned: true,
                        width: 560,
                        visible: false,
                        open: function() {
                            this.wrapper.addClass("k-window-poup k-window-masstel k-window-customerGroup");
                        }
                    },
                    template: '<kv-table-group-form kv-group-data="groupData" kv-on-save="onSave(group)" kv-on-delete="onDelete(group)" kv-on-cancel="onCancel()"></kv-table-group-form>',
                    resolve: {
                        tableGroupData: function() {
                            return data;
                        }
                    },
                    controller: ["$scope", "$windowInstance", "tableGroupData", function ($scope, $windowInstance, tableGroupData) {

                        init();

                        function init() {
                            $scope.groupData = tableGroupData;
                        };

                        $scope.onSave = function(group) {
                            $windowInstance.close(group);
                        };

                        $scope.onCancel = function() {
                            $windowInstance.close(false);
                        };

                        $scope.onDelete = function(group) {
                            group.Id = 0;
                            $windowInstance.close(group);
                        };
                    }]
                });

                wdInstance.result.then(function(resp) {
                    if (angular.isObject(resp) && resp) {
                        $scope.selectedGroup = data;
                        $scope.selectedGroupId = data.Id;
                        $scope.RefreshGrid(true);
                    }
                });

            }, function(err) {
                _logger.error(getMessage(err));
            });
        }
        else
            _logger.error($scope._l.customer_msgErrorInfo);

        //if ($scope.selectedGroupId > 0)
        //    $scope.tableGroupForm.showPopup($scope.selectedGroupId, function (data) {
        //        $scope.selectedGroup = data;
        //        $scope.selectedGroupId = data.Id;
        //        $scope.RefreshGrid(true);
        //    });
        //else
        //    _logger.error($scope._l.customer_msgErrorInfo);
    };
    $scope.export = function () {
        var filter = $scope.tableDetails.dataSource.reader.kvFilter;
        var type = "Table";
        var fileName = "DanhSachPhongBan";
        var data = { req: JSON.stringify(filter) };
        _export.toExcel(type, fileName, data);

    };
    $scope.deleteTable = function (table) {
        _msgbox.confirm($filter("stringFormat")($scope._l.table_MsgDel, [table.Name]), $scope._l.table_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
        _msgbox.onConfirm = function () {
            _table.remove({ tableId: table.Id }, function (result) {
                _logger.success(result.Message);
                $scope.RefreshGrid();
            }, function (err) {
                _logger.error(getMessage(err));
            });
        };

    };

}])
.controller('TableFormCtrl', ['settings', 'kvSession', '$scope', '$rootScope', '$location', '$routeParams', 'logger', '$route', 'kvConfirmBox', 'TableResource',
    function (_settings, _session, $scope, $rootScope, $location, $routeParams, _logger, $route, _msgbox, _table) {

        var openWindow = function (table) {

            var listeners = {
                onSave: function (msg) {
                    _logger.success(msg);
                    $scope.tableWindow.close();
                    $scope.tableDetails.dataSource.read();
                },
                onSaveError: function (err) {
                    _logger.error(err);
                },
                onCancel: function (msg) {                   
                    $scope.tableWindow.close();
                },
            };
            if (table) {
                $scope.source = table;
                //make a copy
                table = angular.copy(table);
            } else
            {
                table = { Id: 0, Name: '', GroupId: 0, Position: 0 };
            }


            $scope.tableWindow.title(table.Id > 0 ? $scope._l.table_MsgEditInfoTitle : $scope._l.table_AddNew);

            $scope.tableForm.setListeners(listeners);
            $scope.tableForm.setTable(table);
            $scope.tableWindow.wrapper.addClass("k-window-poup k-window-table");
            $scope.tableWindow.center().open();
            refresh($scope);
        }
        $scope.$on(app.events.showTableForm, function (evt, data) {
            openWindow(data);
            $scope.tableWindow.onClose = function (e) {
                if ($scope.tableForm) {
                    $scope.tableForm.clearListener();
                }
            };
        });
    }
])
.directive('kvTableGroupForm', ['kvSession', 'logger', 'PrivilegeHelper', 'kvLabel', '$filter', 'kvMessages', function (_session, _logger, _p, _l, $filter, _m) {
    return {
        restrict: 'E',
        scope: {
            kvGroupData: "=kvGroupData",
            onSave: "&kvOnSave",
            onCancel: "&kvOnCancel",
            onDelete: "&kvOnDelete"
        },
        link: function (scope, elem) {
            scope._l = _l;
            scope.canCreate = _p.has('TableAndRoom_Create');
            scope.canDelete = _p.has('TableAndRoom_Delete') && angular.isObject(scope.kvGroupData);
            scope.canUpdate = _p.hasAny(['TableAndRoom_Update', 'TableAndRoom_Create']);
            elem.on('$destroy', function () {
                if (scope.$parent && scope.popupName) {
                    delete scope.$parent[scope.popupName];
                }
            });
        },
        controller: ['$scope', 'TableGroupResource', 'kvConfirmBox', function ($scope, service, _msgbox) {

            //init form
            init();

            function init() {
                if (angular.isObject($scope.kvGroupData)) {
                    $scope.group = $scope.kvGroupData;
                    $scope.canDelete = true;

                } else {
                    $scope.group = {};
                    $scope.canDelete = false;
                }
            };

            //this.showPopup = function (id, calback) {
            //    $scope.callback = calback;
            //    if (id) {
            //        service.get({ groupId: id }, function (data) {
            //            $scope.group = data;
            //            $scope.tableGroupWindow.title($scope._l.table_EditGroup);
            //            $scope.tableGroupWindow.wrapper.addClass("k-window-poup");
            //            $scope.tableGroupWindow.center().open();
            //            //$scope.canDelete = true;
            //        }, function (err) {
            //            _logger.error(getMessage(err));
            //        });
            //    } else {
            //        $scope.tableGroupWindow.title($scope._l.table_AddGroup);
            //        $scope.tableGroupWindow.wrapper.addClass("k-window-poup");
            //        $scope.tableGroupWindow.center().open();
            //        $scope.group = {};
            //        $scope.canDelete = false;
            //    }
            //};

            $scope.cancelGroup = function () {
                if (angular.isFunction($scope.onCancel)) {
                    execCb($scope.onCancel);
                }
            };

            $scope.deleteGroup = function () {
                var ivmsg = _msgbox.confirm($filter("stringFormat")(_m.removeTableGroup, [$scope.group.Name]), _m.removeTableGroupTitle, false, _l.confirmYes, _l.confirmNo, false, true);
                ivmsg.confirm = function () {
                    service.remove({ groupId: $scope.group.Id }, function (data) {
                        _logger.success(data.Message);
                        //execCb($scope.callback, data);
                        //$scope.tableGroupWindow.close();

                        if (angular.isFunction($scope.onDelete)) {
                            $scope.onDelete({ group: data });
                        }

                    }, function (er) {
                        _logger.error(getMessage(er));
                    });
                };


            };

            $scope.saveGroup = function () {
                service.save({ TableGroup: $scope.group }, function (data) {
                    _logger.success(data.Message);

                    //execCb($scope.callback, data.Data);
                    //$scope.tableGroupWindow.close();

                    if (angular.isFunction($scope.onSave)) {
                        $scope.onSave({ group: data });
                    }

                }, function (er) {
                    _logger.error(getMessage(er));
                });
            };

            if ($scope.$parent && $scope.popupName) {
                $scope.$parent[$scope.popupName] = this;
            }


        }],
        templateUrl: _session.partialPath('tablegroup-form.html')
    };
}])
.directive('kvTableFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('table-filter.html')
    };
}])
.directive('kvTableForm', ['settings', 'kvSession', '$location', '$routeParams', 'logger', '$route', 'kvConfirmBox', 'TableResource','kvLabel', 'kvMessages', '$kWindow',
    function (_settings, _session, $location, $routeParams, _logger, $route, _msgbox, _table, _label, _messages, $kWindow) {
        return {
            restrict: 'E',
            scope: { formName: '@formName' },
            controller: ['$scope', function ($scope) {
                $scope._m = _messages;
                $scope._l = _label;
                $scope.table = { Id: 0, Name: '', GroupId: 0, Position: 0 }

                //if ($routeParams.id && $routeParams.id != 'new') {
                //    $scope.formTitle = $scope._l.table_MsgEditInfoTitle;
                //} else {
                //    $scope.formTitle = $scope._l.table_AddNew;
                //    _table.findposition({}, function (data) {
                //        $scope.table.Position = data.Count;

                //    });
                //}
                $scope.saving = false;
                var tableGroupDS = new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/tablegroups",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",

                    }
                });

                $scope.dropdownGroup = {
                    dataSource: tableGroupDS,
                    dataTextField: "Name",
                    dataValueField: "Id",
                    valuePrimitive: true,
                    optionLabel: {
                        Name: '------ Lựa chọn ------',
                        Id: 0
                    }
                }
                $scope.save = function () {

                    if ($scope.tableForm.$valid) {
                        if (!$scope.saving) {

                            $scope.saving = true;
                            var r = _table.save({ Table: $scope.table });
                            r.$promise.then(function (result) {
                                $scope.saving = false;
                                if ($scope.listeners.onSave) {
                                    execCb($scope.listeners.onSave, result.Message);
                                }
                            }, function (err) {
                                $scope.saving = false;
                                _logger.error(getMessage(err));

                            });
                        }
                    } else {
                        _logger.error($scope._m.globalValidateSummary);
                    }

                };
                $scope.AddGroup = function () {

                    var wdInstance = $kWindow.open({
                        options: {
                            modal: true,
                            title: $scope._l.table_AddGroup,
                            resizable: false,
                            draggable: true,
                            pinned: true,
                            width: 500,
                            visible: false,
                            open: function () {
                                this.wrapper.addClass("k-window-poup k-window-masstel k-window-tableGroup");
                            }
                        },
                        template: '<kv-table-group-form kv-on-save="onSave(group)" kv-on-cancel="onCancel()"></kv-table-group-form>',
                        controller: ["$scope", "$windowInstance", function ($scope, $windowInstance) {

                            $scope.onSave = function (group) {
                                $windowInstance.close(group);
                            };

                            $scope.onCancel = function () {
                                $windowInstance.close(false);
                            };
                        }]
                    });

                    wdInstance.result.then(function (resp) {
                        if (angular.isObject(resp) && resp) {
                            $scope.ddlSelectGroup.dataSource.add(resp.Data);
                            $scope.table.GroupId = resp.Data.Id;
                            tableGroupDS.read();
                        }
                    });

                    //$scope.tableGroupForm.showPopup(0, function (data) {
                    //    tableGroupDS.read();
                    //    $scope.selectedGroup = data;
                    //    $scope.selectedGroupId = data.Id;
                    //});
                };
                $scope.cancel = function () {
                    if ($scope.listeners.onCancel) {
                        execCb($scope.listeners.onCancel);
                    }
                }
                this.setListeners = function (listener) {
                    $scope.listeners = listener;
                }
                this.clearListener = function () {
                    $scope.listeners = {};
                }

                this.setTable = function (data) {
                    $scope.table = data;
                }
                if (!$scope.$parent[$scope.formName]) {
                    $scope.$parent[$scope.formName] = this;
                }
            }],

            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    ctrl.clearListener();
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('table-form.html')
        }
    }]);
;
'use strict'
kvApp.controller('TransferSendCtrl', ['kvSession', 'localCache', '$filter', 'TransferResource', 'TransferDetailResource', 'ProductResource', 'UserResource', '$scope', '$rootScope', '$location', '$routeParams', 'logger', '$route', '$http', 'BranchResource', 'transferStatus', 'transferStatusMap', 'kvConfirmBox', '$timeout', '$compile',
    function (_session, _localCache, $filter, _transfer, _transferDetail, _product, _userResource, $scope, $rootScope, $location, $routeParams, _logger, $route, $http, _branches, _transferStatus, _transferStatusMap, _msgbox, $timeout, $compile) {
        var keyStore = $filter("stringFormat")("transferCreate_{0}_{1}_{2}", [$scope.currentBranch.Id, $scope.currentUser.id, $routeParams.id]);


        $scope.viewCost = $scope._p.has('Product_Cost');
        $scope.isSent = true;
        $scope.import = function () {
            $scope.importPopup.showPopup(function (dataDetail) {
                if (!$scope.Transfer) {
                    $scope.Transfer = new Transfer();
                }
                $scope.Transfer.TransferDetails = dataDetail;
                //console.log(dataDetail);
                updateSerialData(true);
                if ($scope.cartGridoption) {
                    $scope.cartGridoption.dataSource.data(dataDetail);
                }
                $scope.Transfer.updateValue();
            });
        };
        $scope.setCurrentRow = function (e) {
            $scope.currentRow = this.dataItem;

        };
        $scope.colSend = [
            {
                field: "Product.Id",
                title: " ",
                hidden: false,
                attributes: { "class": "txtC tdDel" },
                headerAttributes: { "class": "txtC tdDel" },
                template: '<a title=\"Xóa\"  ng-show="isSent"  ng-click=\"removeItem(dataItem)\" class=\"icon del\" >Del</a>'
            },
            { field: "Product.Code", title: $scope._l.productCode, headerAttributes: { "class": "tdCodeTT" }, attributes: { "class": "tdCodeTT" } },
            {
                field: "Product.Name", title: $scope._l.productName,
                headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" },
                template: '<div>#=ProductName#</div>' +
                    '<a class="txtN txtI fs11 txtGray"  ng-show="isSent" href="javascript:void(0)" title="Cập nhật ghi chú" kv-popup-anchor="desTemplate" kv-placement="bottom" ng-click="setCurrentRow($event)"><span class="noteTxt veaM">{{dataItem.SendDescription?dataItem.SendDescription:"Ghi chú..."}}</span><span class="icon edit"><i class="fa fa-pencil-square-o"></i></span></a>' +
                    '<span class="fs11 txtGreen"  ng-show="!isSent && dataItem.SendDescription">&nbsp;({{dataItem.SendDescription?dataItem.SendDescription:"Ghi chú..."}})</span>' +
                    '<a class="txtN txtI fs11 txtGray"  ng-show="!isSent" href="javascript:void(0)" title="Cập nhật ghi chú" kv-popup-anchor="desTemplate2" kv-placement="bottom" ng-click="setCurrentRow($event)"><span class="noteTxt veaM">{{dataItem.ReceiveDescription?dataItem.ReceiveDescription:"Ghi chú..."}}</span><span class="icon edit"><i class="fa fa-pencil-square-o"></i></span></a>'
            },
            {
                field: "OnHand",
                title: $scope._l.transfer_OnHand,
                //format: "{0:#,#.##}",
                headerAttributes: { "class": "tdSLB txtR" },
                attributes: { "class": "tdSLB txtR" },
                template: "{{dataItem.OnHand|formatQuantity}}"
            },
            {
                field: "NextBranchQuantity",
                title: $scope._l.transfer_NextBranchQuantity,
                //format: "{0:#,#.##}",
                headerAttributes: { "class": "tdStatus txtR" },
                attributes: { "class": "tdStatus txtR" },
                template: "{{dataItem.NextBranchQuantity|formatQuantity}}"
            },
            {
                field: "SendQuantity",
                title: $scope._l.transfer_SendQuantity,
                format: "{0:#,#.###}",
                headerAttributes: { "class": "tdCode txtC" },
                attributes: { "class": "tdCode txtC" },
                template: '<span ng-show="isSent"><input type="text" class="iptR txtR iptQty veaM" ng-class="dataItem.isSerialProduct?\'w100\':\'\'" ng-disabled="dataItem.isSerialProduct" kv-auto-numeric="{isQuantity:!dataItem.isSerialProduct,vMin:0}" ng-model="dataItem.SendQuantity"  ng-change="updateItem(dataItem)"/></span><span ng-hide="isSent">{{dataItem.SendQuantity|formatQuantity}}</span>'
            },
             {
                 field: "ReceiveQuantity",
                 title: $scope._l.transfer_ReceiveQuantity,
                 format: "{0:#,#.###}",
                 headerAttributes: { "class": "tdSLC txtC" },
                 attributes: { "class": "tdSLC txtC" },
                 template: '<input  type="text" class="iptR txtR iptQty veaM" ng-class="dataItem.isSerialProduct?\'w100\':\'\'" ng-disabled="dataItem.isSerialProduct" kv-auto-numeric="{isQuantity:!dataItem.isSerialProduct,vMin:0}" ng-model="dataItem.ReceiveQuantity" ng-change="updateItem(dataItem)"/>'
             }
            
        ];

        if ($scope.viewCost) {
            $scope.colSend.push({
                field: "Price",
                title: $scope._l.transfer_Price_Get,
                format: "{0:#,#}",
                headerAttributes: { "class": "tdStatus nowrap txtC clm-Price" },
                attributes: { "class": "tdStatus nowrap txtC" },
                 template: '<span ng-show="isSent"><input type="text" class="w100 iptR txtR" kv-auto-numeric="{mDec:0}" ng-model="dataItem.Price"  ng-change="updateItem(dataItem)"/></span><span ng-hide="isSent">{{dataItem.Price|number:0}}</span>'
            });
        }

        
        $scope.$on('refreshGridOnChangeBranch', function (e, vl) {
            $scope.goBack();
        });

        $scope.saving = false;
        $scope.saveTransfer = function (isComplete) {
            $("#LoadingPanel").show();
            $scope.saving = true;
            if (isComplete) {
                if ($scope.Transfer.Status == _transferStatusMap.Sent) {
                    if (!validReceive()) {
                        $scope.saving = false;
                        $("#LoadingPanel").hide();
                        return;
                    }
                    $scope.Transfer.Status = _transferStatusMap.Received;
                } else if ($scope.Transfer.Status == _transferStatusMap.New) {
                    $scope.Transfer.Status = _transferStatusMap.Sent;
                }
            }

            //console.log($scope.Transfer);
            _transfer.saveTransfer({
                Transfer: $scope.Transfer
            }, function (data) {
                $scope.saving = true;
                cancel(function () {
                    _logger.success($scope._m.transferSaveSuccess);
                    refresh($scope);
                    $scope.saving = false;
                });
                $("#LoadingPanel").hide();
                $location.path("/" + viewUrl.transferList);
            }, function (err) {
                $scope.saving = false;
                _logger.error(getMessage(err));
                if (isComplete) {
                    if ($scope.Transfer.Status == _transferStatusMap.Sent) {
                        $scope.Transfer.Status = _transferStatusMap.New;
                    } else if ($scope.Transfer.Status == _transferStatusMap.Received) {
                        $scope.Transfer.Status = _transferStatusMap.Sent;
                    }
                }
                $("#LoadingPanel").hide();
                refresh($scope);
            });
        };

        function cancel(callback) {
            _localCache.remove(keyStore, function () {
                execCb(callback);
            });
        };

        $scope.goTolist = function () {
            $location.path("/" + viewUrl.transferList);
            refresh($scope);
        };
        $scope.tabs = "1";
        $scope.goBack = function () {
            if ($scope.Transfer.TransferDetails.length > 0) {
                _msgbox.confirm($scope._l.purchaseorder_SaveChange, $scope._l.purchaseorder_SaveChangeTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo);
                _msgbox.onConfirm = function () {
                    $scope.saveTransfer(false);
                };
                _msgbox.onCancel = function () {
                    cancel(function () {
                        $scope.goTolist();
                    });
                };
            } else {
                cancel(function () {
                    $scope.goTolist();
                });
            }
        };

        function validReceive() {
            for (var i = 0; i < $scope.Transfer.TransferDetails.length; i++) {
                if ($scope.Transfer.TransferDetails[i].SendQuantity != $scope.Transfer.TransferDetails[i].ReceiveQuantity)
                    if (!$scope.Transfer.ReceivedDescription) {
                        _logger.error($scope._m.emptyTransferDescription);
                        return false;
                    }
            }
            return true;
        }

        $scope.updateItem = function (item) {
            $scope.Transfer.updateItemValue(item);
        }
        $scope.currentDate = new Date();
        $scope._transferStatusMap = _transferStatusMap;
        $scope.branchList = [];

        $scope.disabled = false;
        $scope.grvdataBinding = function (arg) {
            if ($scope.isSent) {
                arg.sender.showColumn("NextBranchQuantity");
                arg.sender.hideColumn("ReceiveQuantity");
                $(".clm-Price").find("a:first-child").text($scope._l.transfer_Price);
            } else {
                arg.sender.showColumn("ReceiveQuantity");
                arg.sender.hideColumn("NextBranchQuantity");
                $(".clm-Price").find("a:first-child").text($scope._l.transfer_Price_Get);
            }

        };
        $scope.toBranchChanged = function () {
            //$scope.cartGridoption.dataSource.data($scope.Transfer.TransferDetails);
        };

        $scope.tagAdded = function (tag, idx, id) {
            var lst = $scope["serials" + id];
            var currentItems = "";
            for (var k = 0; k < lst.length ; k++) {
                currentItems += "," + lst[k].text;
            }
            if (currentItems.length > 0)
                currentItems = currentItems.substring(1);

            // add to datasource for popup
            $scope["serialModel" + id] = currentItems.split(",");

            $scope.updateSerialTags(currentItems.split(","), idx);
        }

        $scope.updateSerialTags = function (currentItems, idx) {
            var item = $scope.Transfer.TransferDetails[idx];
            //console.log(item);
            currentItems = currentItems ? currentItems.filter(function(it) {return it.length>0;}) : [];
            if (item && currentItems) {
                if ($scope.isSent)
                    item.SendQuantity = currentItems.length;
                else
                    item.ReceiveQuantity = currentItems.length;

                var currentSerials = "";
                for (var k = 0; k < currentItems.length ; k++) {
                    currentSerials += "," + currentItems[k];
                }

                if ($scope.isSent)
                    item.SerialNumbers = currentSerials.substring(1);
                else
                    item.ReceiveSerialNumbers = currentSerials.substring(1);

                //
                item.SelectedSerials = $scope["serials" + item.ProductId];

                // update grid
                var grid = $('#cartGrid').data('kendoGrid');
                if (grid && grid.dataSource) {
                    var dataItem = grid.dataSource.data()[idx];
                    if (dataItem) {
                        if ($scope.isSent)
                            dataItem.SendQuantity = currentItems.length;
                        else {
                            dataItem.ReceiveQuantity = currentItems.length;
                            dataItem.ReceiveSerialNumbers = currentItems.length > 0 ? currentItems.join() : '';
                        }      
                    }
                }
            }

            $scope.Transfer.updateItemValue(item);
            refresh($scope);
        }

        $scope.changeSerials = function (e, idx) {

            if (e.sender)
                var currentItems = e.sender.value();

            $scope.updateSerialTags(currentItems, idx);
        }

        $scope.showpopup = function (id, idx) {
            var row = $scope.Transfer.TransferDetails[idx];
            if (row) {
                $scope["ProductSerials" + row.ProductId] = row.ProductSerials;
                //$scope["serials" + row.ProductId] = row.SelectedSerials;
            }

            var model = "serialModel" + id;
            var source = $scope["ProductSerials" + id];
            
            $scope["serialpopup"].showWindow(model, source, function (lst) {
                var currentItems = lst;
                var item = $scope.Transfer.TransferDetails[idx];

                if (item && currentItems) {
                    if ($scope.isSent)
                        item.SendQuantity = currentItems.length;
                    else
                        item.ReceiveQuantity = currentItems.length;

                    var currentSerials = "";
                    for (var k = 0; k < currentItems.length ; k++) {
                        currentSerials += "," + currentItems[k].SerialNumber;
                    }

                    if ($scope.isSent)
                        item.SerialNumbers = currentSerials.substring(1);
                    else
                        item.ReceiveSerialNumbers = currentSerials.substring(1);

                    //
                    var multiSelect = $("#serial" + item.ProductId).data("kendoMultiSelect");
                    if (multiSelect) {
                        multiSelect.dataSource.filter({});
                        multiSelect.value(currentSerials.split(","));
                    }

                    //
                    $scope["serialModel" + item.ProductId] = currentSerials.split(",");

                    // update grid
                    var grid = $('#cartGrid').data('kendoGrid');
                    if (grid && grid.dataSource) {
                        var dataItem = grid.dataSource.data()[idx];
                        if (dataItem) {
                            if ($scope.isSent)
                                dataItem.SendQuantity = currentItems.length;
                            else
                                dataItem.ReceiveQuantity = currentItems.length;
                        }
                    }

                    var serialList = [];
                    for (var s = 0; s < lst.length; s++) {
                        serialList.push({ "text": lst[s].SerialNumber });
                    }
                    //console.log(serialList);
                    $scope["serials" + item.ProductId] = serialList;
                }

                $scope.Transfer.updateItemValue(item);
                refresh($scope);
            });
           
        };

        $scope.cartGridoption = {
            dataSource: new kendo.data.DataSource({
                data: [],
                change: function (data) {
                    var ids = [], idsreceipt = [];
                    angular.forEach(data.items, function (item) {
                        if (!item.OnHand) {
                            ids.push(item.Product.Id);
                        }
                        idsreceipt.push(item.Product.Id);
                    });

                    //ReceiveQuantity
                    // NextBranchQuantity
                    if (ids.length > 0) {
                        _branches.getProducts({ ProductIds: ids, branchId: $scope.currentBranch.id }, function (result) {

                            var lsOnhand = {};
                            angular.forEach(result.Data, function (itemOnhand) {
                                lsOnhand[itemOnhand.Id] = itemOnhand;
                            });
                            angular.forEach(data.items, function (item) {
                                if (lsOnhand[item.Product.Id]) {
                                    item.OnHand = lsOnhand[item.Product.Id].OnHand;
                                }

                            });
                            refresh($scope);
                        });
                    }

                    if (idsreceipt.length > 0 && $scope.Transfer.ToBranchId) {
                        _branches.getProducts({ ProductIds: idsreceipt, branchId: $scope.Transfer.ToBranchId }, function (result) {

                            var lsOnhand2 = {};
                            angular.forEach(result.Data, function (itemOnhand) {
                                lsOnhand2[itemOnhand.Id] = itemOnhand;
                            });
                            angular.forEach(data.items, function (item) {
                                if (lsOnhand2[item.Product.Id]) {
                                    item.NextBranchQuantity = lsOnhand2[item.Product.Id].OnHand;
                                }

                            });
                            refresh($scope);
                        });
                    }

                },
                pageSize: 20
            }),
            columns: $scope.colSend,
            dataBound: function (e) {
                $scope.emptyGridFix(e);

                var colspan = 4;
                if ($scope.viewCost)
                    colspan = 5;
                // add serial input
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, row) {
                    var pageSize = e.sender.dataSource.pageSize();
                    var pageForRow = 1 + Math.floor(i / pageSize);
                    var currentPage = e.sender.dataSource.page();

                    if (row.Product.IsLotSerialControl && pageForRow == currentPage) {
                        //var popup = '<kv-enter-serial-popup kv-name="serialpopup' + row.ProductId + '" kv-model="serials' + row.ProductId + '" kv-source="ProductSerials' + row.ProductId + '"></kv-enter-serial-popup>';
                        var tagInput1 = angular.element($('<tr class="k-master-serial"><td></td><td colspan="' + colspan + '">' +
                                                            '<select id="serial' + row.ProductId + '" k-auto-close="false" k-filter="\'contains\'" k-data-source="MultiSelectProductSerials' + row.ProductId + '" k-data-text-field="\'SerialNumber\'"' +
                                                                'k-data-value-field="\'SerialNumber\'" kendo-multi-select class="w100" ng-model="serials' + row.ProductId + '"' +
                                                                'k-on-change="changeSerials(kendoEvent,' + i + ')"></select>' +
                                                          '</td><td class="txtR"><a ng-click="showpopup(' + row.ProductId + ', ' + i + ')" class="viewmore">' + $scope._l.viewmore + '</a></td></tr>'));

                        var tagInput = angular.element($('<tr class="k-master-serial"><td></td><td colspan="' + colspan + '">' +
                                                            '<tags-input id="tagRow' + row.ProductId + '" placeholder="Nhập số serial và Enter" ng-model="serials' + row.ProductId + '"' +
                                                                    ' add-from-autocomplete-only="true" on-tag-added="tagAdded($tag,' + i + ',' + row.ProductId + ')" on-tag-removed="tagAdded($tag,' + i + ',' + row.ProductId + ')">' +
                                                                    '<auto-complete has-alt-tag="false" source="MultiSelectProductSerials' + row.ProductId + '"></auto-complete>' +
                                                            '</tags-input>' +
                                                            '</td><td class="txtR"><a ng-click="showpopup(' + row.ProductId + ',' + i + ')" class="viewmore">' + $scope._l.viewmore + '</a></td></tr>'));

                        $scope["serials" + row.ProductId] = row.SerialNumbers ? row.SerialNumbers.split(",") : "";
                        $scope["serialModel" + row.ProductId] = row.SerialNumbers ? row.SerialNumbers.split(",") : "";
                        var el = $compile(tagInput)($scope);

                        if (row.Product.IsLotSerialControl)
                            $('tr[data-uid="' + row.uid + '"]').after(tagInput).addClass("k-serial");

                        // scope productserial for multiselect
                        if (row.ProductSerials) {
                            var ds = [];
                            for (var k = 0; k < row.ProductSerials.length; k++) {
                                ds.push({ "text": row.ProductSerials[k].SerialNumber, "SerialNumber": row.ProductSerials[k].SerialNumber });
                            }
                            row.ProductSerials = ds;
                        }
                        $scope["MultiSelectProductSerials" + row.ProductId] = row.ProductSerials;
                    }
                });
            },
            dataBinding:function(e){
                var gridData = e.sender.dataSource.data();
                $.each(gridData, function (i, t) {
                    if (t.Product.IsLotSerialControl)
                        t.isSerialProduct = true;
                });

                $scope.grvdataBinding(e);
            }
        };

        iniData();
        $scope.removeItem = function (item) {
            var obj = JSON.parse(JSON.stringify(item));
            $scope.Transfer.removeItem(obj);
        };

        $scope.searchTermChanged = function () {
            search($scope.productSearchTerm);
        };
        //Get From Database


        function search(query) {
            var r = _product.autocomplete({ tearm: query, ShowMasterUnitCost: true });
            r.$promise.then(function (result) {

                $scope.products = result;
                refresh($scope);
            }, function (err) {
                _logger.error(getMessage(err));
            });
        };

        _branches.get(function (result) {

            $scope.chooseBranchTransfer = result.Data.reduce(function (acc, c) {
                if (c.Id != _session.branch.id) acc.push(c);
                return acc;
            }, []);
        });

        $scope.productselect = function (item) {
            $scope.Transfer.addItem(item);
        };

        function updateSerialData(updateSerialDS){
            
            var items = $scope.Transfer.TransferDetails;
            for (var idx = 0; idx < items.length; idx++) {
                var itm = items[idx];
                itm.IsLotSerialControl = itm.Product.IsLotSerialControl;

                if (!$scope.isSent && updateSerialDS) // receive branch - datasource is the sent list
                    itm.ProductSerials = itm.SerialNumbers;

                if (itm.ProductSerials && updateSerialDS) {
                    var ss = itm.ProductSerials.split(",");
                    var ds = [];
                    for (var k = 0; k < ss.length; k++) {
                        ds.push({ "SerialNumber": ss[k] });
                    }
                    itm.ProductSerials = ds;
                }

                if (itm.Product.IsLotSerialControl && itm.SerialNumbers) {
                    var lst = itm.SerialNumbers.split(",");
                    if (!itm.ReceiveSerialNumbers && !$scope.isSent)
                        itm.ReceiveSerialNumbers = itm.SerialNumbers;

                    if (!$scope.isSent && itm.ReceiveSerialNumbers)
                        lst = itm.ReceiveSerialNumbers.split(",");

                    itm.SelectedSerials = lst;
                }
            }
        }

        function iniData() {
            $scope.Transfer = new Transfer();

            // $scope.cartGridoption.columns = $scope.colSend;
            //ProductReceive

            _localCache.get(keyStore, function (data) {
                var obj = !data ? data : JSON.parse(data);
                if (!isNaN(Number($routeParams.id))) {
                    if (parseInt($routeParams.id) > 0) {
                        _transfer.getDetails({ id: $routeParams.id, Includes: ["TransferDetails", "FromBranch", "ToBranch"] }, function (d) {
                            if (d.Status == _transferStatusMap.Sent) {
                                $scope.isSent = false;

                            }
                            if (!obj || (!obj.ModifiedDate && !d.ModifiedDate && obj.Code != d.Code) || (obj.ModifiedDate && kendo.parseDate(obj.ModifiedDate).compareDateTime(kendo.parseDate(d.ModifiedDate)) != 0)) {
                                //angular.copy(d, obj);
                                obj = d;
                                _transferDetail.getDetails({ transferId: $routeParams.id, Includes: ["Product", "Product.ProductSerials"] }, function (detail) {
                                    obj.TransferDetails = detail.Data;
                                    $scope.Transfer = new Transfer(obj);

                                    updateSerialData(true);
                                    //console.log(detail);
                                    refresh($scope);
                                    if ($scope.cartGridoption) {
                                        $scope.cartGridoption.dataSource.data($scope.Transfer.TransferDetails);
                                    }
                                });

                            } else {
                                _msgbox.confirm($scope._l.purchaseorder_SaveChangeServer, $scope._l.purchaseorder_SaveChangeServerTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo, true);
                                _msgbox.onConfirm = function () {

                                    $scope.Transfer = new Transfer(obj);
                                    updateSerialData(false);
                                    refresh($scope);
                                    if ($scope.cartGridoption) {
                                        $scope.cartGridoption.dataSource.data($scope.Transfer.TransferDetails);
                                    }
                                };
                                _msgbox.onCancel = function () {
                                    obj = d;
                                    _transferDetail.getDetails({ transferId: $routeParams.id, Includes: ["Product", "Product.ProductSerials"] }, function (detail) {
                                        obj.TransferDetails = detail.Data;
                                        $scope.Transfer = new Transfer(obj);

                                        updateSerialData(true);

                                        refresh($scope);
                                        if ($scope.cartGridoption) {
                                            $scope.cartGridoption.dataSource.data($scope.Transfer.TransferDetails);
                                        }
                                    });
                                };
                            }

                        }, function (err) {
                            _logger.error($scope._m.transferNotFound);
                            $scope.redirectToList();
                        });
                    } else {
                        //initDataInView(localData);
                        if (obj && obj.TransferDetails.length > 0) {
                            _msgbox.confirm($scope._l.purchaseorder_SaveChangeServer, $scope._l.purchaseorder_SaveChangeServerCreateTitle, false, $scope._l.purchaseorder_Save, $scope._l.confirmNo, true);
                            _msgbox.onConfirm = function () {
                                $scope.Transfer = new Transfer(obj);

                                updateSerialData(false);

                                refresh($scope);
                                if ($scope.cartGridoption) {
                                    $scope.cartGridoption.dataSource.data($scope.Transfer.TransferDetails);
                                }
                            };
                        }
                    }
                }
            });


        };
        function Transfer(data) {
            this.Id = data ? data.Id : 0;
            this.Code = data ? data.Code : undefined;
            this.CompareCode = data ? data.Code : undefined;
            this.TransferDetails = (data && data.TransferDetails) ? data.TransferDetails : [];
            this.FromBranchId = data ? data.FromBranchId : $scope.currentBranch.id;
            this.FromBranch = data ? data.FromBranch : $scope.currentBranch;
            this.ToBranchId = data ? data.ToBranchId : undefined;
            this.CompareToBranchId = data ? data.ToBranchId : undefined;
            this.ToBranch = data ? data.ToBranch : undefined;
            this.Status = data ? data.Status : _transferStatusMap.New;
            this.CompareStatus = data ? data.Status : _transferStatusMap.New;
            this.StatusValue = _transferStatus[this.Status];
            this.DispatchedDate = (data && data.DispatchedDate) ? kendo.parseDate(data.DispatchedDate) : undefined;
            this.CompareDispatchedDate = (data && data.DispatchedDate) ? kendo.parseDate(data.DispatchedDate) : undefined;
            this.ModifiedDate = (data && data.ModifiedDate) ? kendo.parseDate(data.ModifiedDate) : undefined;
            this.CreatedBy = data ? data.CreatedBy : $scope.currentUser.id;
            this.User = data ? data.User : $scope.currentUser;
            this.ReceivedDate = (data && data.ReceivedDate) ? kendo.parseDate(data.ReceivedDate) : undefined;
            this.CompareReceivedDate = (data && data.ReceivedDate) ? kendo.parseDate(data.ReceivedDate) : undefined;
            this.Description = data ? data.Description : '';
            this.ReceivedDescription = data ? data.ReceivedDescription : '';
            this.ReceivedBy = data ? data.ReceivedBy : undefined;
            this.ReceivedUser = data ? data.ReceivedUser : undefined;
            this.TotalSendQuantity = 0;
            this.TotalReceiveQuantity = 0;
            if (this.TransferDetails) {
                for (var i = 0 ; i < this.TransferDetails.length ; i++) {
                    this.TotalSendQuantity += this.TransferDetails[i].SendQuantity;
                    this.TotalReceiveQuantity += this.TransferDetails[i].ReceiveQuantity;
                }
            }
            this.Price = data ? data.Price : 0;
        }

        function transferItem(product) {
            this.ProductId = product.Id;
            this.OnHand = product.OnHand;
            this.Product = { Id: product.Id, Name: product.FullName ? product.FullName : product.Name, Code: product.Code, IsLotSerialControl: product.IsLotSerialControl };
            if (!product.IsLotSerialControl) {
                this.SendQuantity = 1;
                this.ReceiveQuantity = 1;
            } else
            {
                this.SendQuantity = 0;
                this.ReceiveQuantity = 0;
            }
            this.Price = product.Cost;
            this.ProductName = product.FullName ? product.FullName : product.Name;
            // this.CreatedDate = new Date();
            if (product.ProductSerials) {
                product.ProductSerials = product.ProductSerials.filter(function (s) { return s.Status == 1;  })
            }
            this.ProductSerials = product.ProductSerials;
        }
        Transfer.prototype.updateItemValue = function (item) {
            var index = -1;
            if (item) {
                for (var i = 0; i < this.TransferDetails.length; i++) {
                    if (this.TransferDetails[i].ProductId == item.ProductId) {
                        index = i; break;
                    }
                }
            }

            if (index > -1) {
                this.TransferDetails[index] = item;
            }

            this.updateValue();
        }
        var trigger;
        Transfer.prototype.updateValue = function () {
            this.TotalSendQuantity = 0;
            this.TotalReceiveQuantity = 0;
            if (this.TransferDetails) {
                for (var i = 0 ; i < this.TransferDetails.length ; i++) {
                    this.TotalSendQuantity += this.TransferDetails[i].SendQuantity;
                    this.TotalReceiveQuantity += this.TransferDetails[i].ReceiveQuantity;
                }
            }
            var obj = JSON.stringify(this);
            if (trigger) {
                $timeout.cancel(trigger);
            }
            trigger = $timeout(function () {
                _localCache.set(keyStore, obj);
                console.log("Saved to Local");
            }, 1000);
        };
        Transfer.prototype.removeItem = function (item) {
            for (var i = 0; i < this.TransferDetails.length ; i++) {
                if (this.TransferDetails[i].ProductId == item.ProductId) {
                    this.TransferDetails.splice(i, 1);
                    if ($scope.cartGridoption) {
                        $scope.cartGridoption.dataSource.data(this.TransferDetails);
                    }
                    this.updateValue();
                    break;
                }
            }
        };

        Transfer.prototype.addDetail = function (detail) {
            var found = this.TransferDetails.filter(function (obj) {
                return obj.ProductId == detail.ProductId;
            });
            if (found.length > 0) {

                found[0].SendQuantity += detail.SendQuantity;
                //re-position to top 
                // this.PurchaseOrderDetails.splice(i, 1);
                //  this.PurchaseOrderDetails.unshift(found);
            } else {
                this.TransferDetails.push(detail);
            }

            this.updateValue();
            return found;
        };

        Transfer.prototype.addItem = function (product) {
            var found = null;
            var item;
            for (var i = 0 ; i < this.TransferDetails.length; i++) {
                item = this.TransferDetails[i];
                if (item.ProductId == product.Id) {
                    if(!product.IsLotSerialControl)
                        item.SendQuantity++;
                    found = item;
                    //re-position to top 
                    this.TransferDetails.splice(i, 1);
                    this.TransferDetails.unshift(found);
                    break;
                }
            }
            if (!found) {
                item = new transferItem(product);
                this.TransferDetails.unshift(item);
                found = item;
            }

            this.updateValue();
            if ($scope.cartGridoption) {
                $scope.cartGridoption.dataSource.data(this.TransferDetails);
            }
            return found;
        };
    }])
.controller('TransferListCtrl', ['kvSession', 'transferStatusMap', 'TransferResource', '$scope', 'transferStatus', 'kendofilter', '$filter', '$routeParams', 'logger', 'kvExportToExcel', 'kvConfirmBox', '$location', 'TransferDetailResource', 'BranchResource', 'printTypeMap', 'kvPrinter','settings','$compile','$timeout','kvLabel',
         function (_session, _transferStatusMap, _transfer, $scope, _transferStatus, _filter, $filter, $routeParams, _logger, _export, _msgbox, $location, _transferDetail, _branches, _printTypeMap, _print, _setting, $compile, $timeout, _l) {
            $scope.Transfer = {};
            init();
            $scope.currentDate = new Date();
            $scope.canUpdate = $scope._p.has('Transfer_Update');
            $scope.canCreate = $scope._p.has('Transfer_Create');
            $scope.canDelete = $scope._p.has('Transfer_Delete');
            $scope._transferStatusMap = _transferStatusMap;
            $scope.currentBranchId = _session.branch.id;
            $scope.toBranchIds = [];
            $scope.fromBranchIds = [];
            $scope.sendDrirection = false;
            $scope.receiveDrirection = false;

            $scope.redirectToUpdate = function (id) {
                $location.path("/" + viewUrl.transferList + "/" + id);
            };

            $scope.redirectToAdd = function () {
                $location.path("/" + viewUrl.transferList + "/0");
            };

            $scope.settings = _setting;
            $scope.bindedGrid;

            $scope.tblsubOptions = {
                type: "odata",
                autoSync: true,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                pageable: { pageSize: 10, refresh: false, pageSizes: false, buttonCount: 5, messages: { display: $scope._l.pagerInfo } },
                dataBound: function(e) {
                    var gridData = e.sender.dataSource.data();
                    $.each(gridData, function(i, row) {
                        if (row.isWarning) {
                            $('tr[data-uid="' + row.uid + '"] td:nth-child(4)').css("color", "red");
                        }
                        var colspan = 4;
                        if ($scope.Transfer.Status != _transferStatusMap.Received) {
                            colspan = 3;
                        }

                        if ($scope.viewCost)
                            colspan += 1;

                        //console.log(row);
                        if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                            //$scope["serials" + row.Id] = row.SerialNumbers.split(",");
                            var ss = row.SerialNumbers.split(",");
                            var lst = [];
                            var cssClass = "";
                            for (var k = 0; k < ss.length; k++) {
                                if (row.ReceiveSerialNumbers && row.ReceiveSerialNumbers.indexOf(ss[k]) > -1)
                                    cssClass = "normalSerial";
                                else if ($scope.Transfer.Status == _transferStatusMap.Received)
                                    cssClass = "warnSerial";

                                lst.push({ "text": ss[k], "class": cssClass });
                            }
                            $scope["serials" + row.Id] = lst;
                            $scope["serials-sent" + row.Id] = ss;
                            if (row.ReceiveSerialNumbers)
                                $scope["serials-receive" + row.Id] = row.ReceiveSerialNumbers.split(',');

                            var maxShow = 7;
                            var lstS = row.SerialNumbers.split(",");
                            if (lstS[0].length > 0) {
                                maxShow = Math.floor(80 / lstS[0].length);
                            }

                            $scope["truncatedSerials" + row.Id] = lst;
                            if (lst.length > maxShow)
                                $scope["truncatedSerials" + row.Id] = lst.slice(0, maxShow);

                            var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + $scope._l.viewmore + '</a><kv-view-two-serial-popup kv-title="Serial chuyển" kv-title2="Serial nhận" kv-name="serialpopup' + row.Id + '" kv-source="serials-sent' + row.Id + '" kv-source2="serials-receive' + row.Id + '"></kv-view-two-serial-popup>';

                            var tags = angular.element($('<tr class="row-serial"><td colspan="' + colspan + '"><ul class=\"readonly-tag-list\">' +
                                '<li class=\"tag-item {{tag.class}}\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag.text}}</li></ul>' + popup + '</td></tr>'));
                            var el = $compile(tags)($scope);

                            $timeout(function() {
                                $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                $('tr[data-uid="' + row.uid + '"]').after(tags);
                            });
                        }
                    });
                },
            };

            $scope.griddataBinding = function (arg) {
                $scope.bindedGrid = arg.sender;
                $scope.$apply();
            };

            $scope.updateRecord = function (e) {
                if (e.FromBranchId == _session.branch.id)
                    $scope.transferPopup.showPopupMain(e.Id, $scope.popupCallback);
                else if (e.ToBranchId == _session.branch.id) {
                    if (e.Status == _transferStatusMap.Sent)
                        $location.path("/" + viewUrl.transferList + "/" + e.Id);
                    else if (e.Status == _transferStatusMap.Received)
                        $scope.transferPopup.showPopupMain(e.Id, $scope.popupCallback);
                }
            };

            $scope.updateInline = function (e) {
                _transfer.saveTransfer({
                    Transfer: e,
                    IsUpdate: true
                }, function (data) {
                    $scope.transferList.read();
                    _logger.success($scope._m.transferSaveSuccess);
                }, function (err) {
                    _logger.error(getMessage(err));
                });
            };

            $scope.popupCallback = function (transfer) {
                $scope.Transfer.Description = transfer.Description;
                $scope.Transfer.ReceivedDescription = transfer.ReceivedDescription;
                $scope.Transfer.DispatchedDate = $filter('parseDate')(transfer.DispatchedDate);//kendo.parseDate(transfer.DispatchedDate);
                $scope.Transfer.ReceivedDate = $filter('parseDate')(transfer.ReceivedDate); //kendo.parseDate(transfer.ReceivedDate);
            }

            $scope.deleteTransfer = function (item) {
                //console.log(id);
                _msgbox.confirm($filter("stringFormat")($scope._l.transfer_MsgDel, [item.Code]), $scope._l.transfer_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
                _msgbox.onConfirm = function () {
                    _transfer.deleteTransfer({
                        Id: item.Id,
                        CompareCode: item.Code,
                        CompareStatus: item.Status
                    }, function (result) {
                        _logger.success($filter("stringFormat")($scope._l.msgDel, [$scope._l.transfer_MsgDelTitle, item.Code]));
                        $scope.transferList.read();
                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                }
            };

            $scope.grvDetailInit = function (e) {
                var detailRow = e.detailRow;
                $scope.currentBranchId = _session.branch.id;
                $scope.Transfer = e.data;

                e.data.TransferDescriptionAllowEdit = e.data.Status == _transferStatusMap.New || (e.data.Status == _transferStatusMap.Sent && e.data.FromBranchId == $scope.currentBranchId);
                e.data.TransferReceivedDescriptionAllowEdit = e.data.Status == _transferStatusMap.Received && e.data.ToBranchId == $scope.currentBranchId;
                e.data.TransferReceivedDescriptionRestrictEdit = e.data.Status == _transferStatusMap.Received && e.data.FromBranchId == $scope.currentBranchId;

                e.data.ShowButtonUpdate =
                    ($scope.canUpdate &&
                    (e.data.Status == _transferStatusMap.New || (e.data.Status == _transferStatusMap.Sent && e.data.FromBranchId == $scope.currentBranchId) || (e.data.Status == _transferStatusMap.Received && e.data.ToBranchId == $scope.currentBranchId)));
                //|| ($scope.canAdd && e.data.Status == _transferStatusMap.New);
                e.data.ShowButtonAdd = ($scope.canUpdate &&
                    (e.data.Status == _transferStatusMap.New || (e.data.Status == _transferStatusMap.Sent && e.data.ToBranch.Id == $scope.currentBranchId)))
                    || ($scope.canCreate && e.data.Status == _transferStatusMap.New);
                //console.log('data button show add = ' + e.data.ShowButtonAdd);
                var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                    animation:false
                });
                e.data.canDelete = $scope.canDelete && e.data.Status != _transferStatusMap.Void;


                $scope.transferDetails = new kendo.data.DataSource({
                    type: "odata",
                    //autoSync: true,
                    transport: {
                        read: {
                            url: "/api/transferDetails/" + e.data.Id + "?Includes=Product",
                            dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        }
                    },
                    change: function (ob) {
                        e.data.TransferDetails = ob.items;
                    },
                    pageSize: 10,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true,
                    schema: {
                        data: "Data",
                        total: "Total",
                        parse: function (response) {
                            this.hasSummaryRow = true;
                            if (response && response.Data) {
                                
                                e.data.TotalTransferQuantity = response.Total1Value;
                                e.data.TotalReceiveQuantity = response.Total2Value;
                                e.data.TotalTransferValue = response.Total3Value;
                                e.data.TotalReceiveValue = response.Total4Value;
                                e.data.isShowRev = $scope.Transfer.Status == _transferStatusMap.Received ? true : false;
                                
                                for (var i = 0 ; i < response.Data.length ; i++) {
                                    var t = response.Data[i];
                                    
                                    if (Math.abs(t.SendQuantity - t.ReceiveQuantity) > 0.000001)
                                        t.isWarning = true;
                                }
                            }
                            return response;
                        }
                    }
                });


                e.data.ChooseBranchTransfer = $scope.Branches.reduce(function (acc, c) { if (c.Id != e.data.FromBranchId) acc.push(c); return acc }, []);
                $scope.viewCost = $scope._p.has('Product_Cost');
                var detailColumn= [
                        { field: "Product.Code", title: $scope._l.product_Code, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                        {
                            field: "ProductName", title: $scope._l.product_Name,
                            template: '#=ProductName#' +
                   '&nbsp;<span class="dpib fs11 txtGreen"  ng-show="dataItem.SendDescription">({{dataItem.SendDescription?dataItem.SendDescription:"Ghi chú..."}})<br></span>' +
                   '&nbsp;<span class="dpib fs11 txtGreen"  ng-show="dataItem.ReceiveDescription">({{dataItem.ReceiveDescription?dataItem.ReceiveDescription:"Ghi chú..."}})<br></span>', headerAttributes: { "class": "tdNone" }, attributes: { "class": "tdNone" }
                        },
                        { field: "SendQuantity", title: $scope._l.sentQuantity, template: "{{dataItem.SendQuantity | formatQuantity}}", headerAttributes: { "class": "tdSSL txtR" }, attributes: { "class": "tdSSL txtR" } },
                        { field: "ReceiveQuantity", title: $scope._l.receivedQuantity, template: "{{dataItem.ReceiveQuantity | formatQuantity}}", headerAttributes: { "class": "tdSLC txtR" }, attributes: { "class": "tdSLC txtR" } }
                        
                ];

                if ($scope.viewCost)
                {
                    detailColumn.push({ field: "Price", title: "Giá chuyển/nhận ", template: "#:kendo.toString(Price, 'n0')#", headerAttributes: { "class": "w120px txtR" }, attributes: { "class": "w120px txtR" } });
                }

                //asdadasd
                detailRow.find("#tblsub").data("kendoGrid").setOptions({
                    dataSource: $scope.transferDetails,
                    dataBinding: $scope.grvdataBinding,
                    columns: detailColumn
                });
                
                
            };

            $scope.showpopup = function (id) {
                $scope["serialpopup" + id].showWindow();
            }

            $scope.grvdataBinding = function (arg) {
                if ($scope.Transfer.Status != _transferStatusMap.Received) {
                    arg.sender.hideColumn("ReceiveQuantity");
                }
                $scope.emptyGridFix(arg);
            };

            _branches.get(function (result) {
                $scope.Branches = result.Data;
                // Remove current branch in branchs
                for (var i = 0; i < $scope.Branches.length ; i++) {
                    if ($scope.Branches[i].Id == $scope.currentBranchId) {
                        $scope.Branches.splice(i, 1);
                    }
                }
            });

            $scope.refresh = function () {
                $scope.transferList.pageSize(parseInt($scope.pageSize));
            };

            function filterbyExtention() {
                var para = {};
                para.SerialKey = $scope.filterSerial;
                return para;
            }
            
            $scope.grdTransfersColumns = [
                { "field": "Code", "title": _l.transfer_Code, headerAttributes: { "class": "tdSLC" }, attributes: { "class": "tdSLC" } },
                { "field": "FromBranch.Name", "title": _l.transferFromBranch, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                { "field": "User.GivenName", "title": _l.createdBy, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                { "field": "ToBranch.Name", "title": _l.transferToBranch, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                { "field": "ReceivedUser.GivenName", "title": _l.createdTo, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
                { "field": "DispatchedDate", "title": _l.transferDispatchedDate, format: "{0:dd/MM/yyyy HH:mm}", headerAttributes: { "class": "tdDateTime" }, attributes: { "class": "tdDateTime" }, isDate: true }                 
            ];
            if ($scope._p.has('Product_Cost')) {
                $scope.grdTransfersColumns.push({ "field": "SendTotalPrice", "title": _l.transferSendQuantity, format: "{0:n0}", headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" } },
                { "field": "ReceiveTotalPrice", "title": _l.transferReceiveQuantity, format: "{0:n0}", headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true });
            };
 
            $scope.grdTransfersColumns.push({ "field": "ShortDescription", "title": _l.note, headerAttributes: { "class": "tdMin" }, attributes: { "class": "tdMin" }, hidden: true },
            { "field": "StatusValue", "title": _l.transferStatus, headerAttributes: { "class": "tdStatusM" }, attributes: { "class": "tdStatusM" }, sortable: false });

            // Bind data for Main Gridview
            $scope.transferList = new kendo.data.DataSource({
                type: "odata",
                autoSync: true,
                transport: {
                    read: {
                        url: "/api/Transfers?format=json&Includes=FromBranch&Includes=ToBranch&Includes=TransferDetails&Includes=User&Includes=ReceivedUser",//&Includes=TransferDetails
                        dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                        data: filterbyExtention
                    }
                },

                pageSize: $scope.pageSize,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                filter: initFilter(),
                schema: {
                    data: "Data",
                    total: "Total",
                    parse: function (response) {
                        if (response && response.Filter) {
                            this.kvFilter = response.Filter;
                        }
                        if (response && response.Data) {
                            
                            for (var i = 0 ; i < response.Data.length ; i++) {
                                var t = response.Data[i];
                                //console.log(t);
                                t.StatusValue = _transferStatus[t.Status];
                                t.User = t.User ? t.User : { GivenName: '' };
                                t.ReceivedUser = t.ReceivedUser ? t.ReceivedUser : { GivenName: '' };
                                t.ShortDescription = $filter('truncateDesc')(t.Description);

                                if(t.IsTransferDiff){
                                   t.isWarning = true;
                                }
                                if (t.Id < 0) {
                                    t.FromBranch = [];
                                    t.ToBranch = [];
                                }
                            }
                            this.hasCustomStyle = true;
                        }
                        return response;
                    },
                    model: {
                        fields: {
                            Code: { type: "string" },
                            CreatedDate: { type: "date" },
                            DispatchedDate: { type: "date" },
                            ReceivedDate: { type: "date" },

                        }
                    }
                }
            });

            $scope.filterByPageSize = function () {
                $scope.transferList.pageSize(parseInt($scope.pageSize));
            };

            $scope.filterByName = function () {
                if ($scope.filterName) {
                    var condition = [_filter.newCondition("Code", $scope.filterName, "contains")];
                    _filter.filter($scope.transferList, condition, "and");
                } else {
                    _filter.remove($scope.transferList, "Code");
                }
            };

            $scope.filterByBranchDirection = function () {
                var filter = $scope.transferList.filter();
                if (filter) {
                    filter = _filter.detach(filter, "ToBranchId");
                    filter = _filter.detach(filter, "FromBranchId");
                }

                var condition = [];
                // lọc chuyển đi được check
                if ($scope.sendDrirection) {
                    if ($scope.toBranchIds && $scope.toBranchIds.length > 0) {
                        for (var k = 0; k < $scope.toBranchIds.length; k++) {
                            if (parseInt($scope.toBranchIds[k]) > 0) {
                                condition.push(_filter.newCondition("ToBranchId", parseInt($scope.toBranchIds[k]), "eq"));
                            }
                        }
                    } else {
                        // Tạo đk check cho lọc all
                        if (!$scope.receiveDrirection || ($scope.receiveDrirection && $scope.fromBranchIds && $scope.fromBranchIds.length > 0)) {
                            condition.push(_filter.newCondition("FromBranchId", _session.branch.id, "eq"));
                        }
                    }
                }
                // lọc chuyển tới được check
                if ($scope.receiveDrirection) {
                    if ($scope.fromBranchIds && $scope.fromBranchIds.length > 0) {
                        for (var k = 0; k < $scope.fromBranchIds.length; k++) {
                            if (parseInt($scope.fromBranchIds[k]) > 0) {
                                condition.push(_filter.newCondition("FromBranchId", parseInt($scope.fromBranchIds[k]), "eq"));
                            }
                        }
                    } else {
                        // Tạo đk check cho lọc all
                        if (!$scope.sendDrirection || ($scope.sendDrirection && $scope.toBranchIds && $scope.toBranchIds.length > 0)) {
                            condition.push(_filter.newCondition("ToBranchId", _session.branch.id, "eq"));
                        }
                    }
                }
                filter = _filter.append(filter, condition, "or");
                $scope.transferList.filter(filter);

            };

            $scope.filterByStatus = function () {
                var values = $scope.transferStatus;
                var condition = [];
                var count = 0;

                for (var i = 0; i < values.length; i++)
                    if (values[i].checked && parseInt(values[i].key) > 0) {
                        condition.push(_filter.newCondition("Status", parseInt(values[i].key), "eq"));
                        count++;
                    }

                if (count > 0)
                    _filter.filter($scope.transferList, condition, "or");
                else
                    _filter.remove($scope.transferList, "Status");
            };

            $scope.filterByDate = function () {

                var filter = $scope.transferList.filter();
                if (filter) {
                    filter = _filter.detach(filter, 'DispatchedDate');
                    filter = _filter.detach(filter, 'ReceivedDate');
                }

                //if ($scope.dateFilter == 'alltimes') {
                //    $scope.transferList.filter(filter);

                //    // _filter.remove($scope.transferList, "DispatchedDate");
                //}
                //else 
                if ($scope.dateFilter.TimeRange != 'other') {
                    var condition = [];

                    $scope.dateFilter.StartDate = new Date();
                    $scope.dateFilter.EndDate = new Date();

                    if ($scope.filterSentDate)
                        condition.push(_filter.newCondition("DispatchedDate", $scope.dateFilter.TimeRange, "eq"));

                    if ($scope.filterReceivedDate)
                        condition.push(_filter.newCondition("ReceivedDate", $scope.dateFilter.TimeRange, "eq"));

                    filter = _filter.append(filter, condition, "and");
                    $scope.transferList.filter(filter);

                    //_filter.filter($scope.transferList, condition, "and");
                }
                else if ($scope.dateFilter.TimeRange == 'other')
                    $scope.filterByDateRange();

                if ($scope.dateFilter.TimeRange != 'other')
                    $scope.lblOtherTimeFilter = null;
            };

            $scope.filterByDateRange = function () {
                if ($scope.dateFilter.StartDate == null || $scope.dateFilter.EndDate == null) {
                    _logger.error($scope._l.errInputDateTimeFilter);
                    //  setTimeout(3000);
                } else {
                    var filter = $scope.transferList.filter();
                    if (filter) {
                        filter = _filter.detach(filter, 'DispatchedDate');
                        filter = _filter.detach(filter, 'ReceivedDate');
                    }


                    var condition = [];
                    var toDate = new Date($scope.dateFilter.EndDate).IgnoreTime();
                    var fromDate = new Date($scope.dateFilter.StartDate).IgnoreTime();

                    $scope.lblOtherTimeFilter = $filter('date')(fromDate, 'dd/MM/yyyy') + " - " +
                                                $filter('date')(toDate, 'dd/MM/yyyy');

                    if ($scope.filterSentDate) {
                        condition.push(_filter.newCondition("DispatchedDate", fromDate, "ge"));
                        condition.push(_filter.newCondition("DispatchedDate", new Date(toDate.DateAdd(1)), "lt"));
                    }

                    if ($scope.filterReceivedDate) {
                        condition.push(_filter.newCondition("ReceivedDate", fromDate, "ge"));
                        condition.push(_filter.newCondition("ReceivedDate", new Date(toDate.DateAdd(1)), "lt"));
                    }

                    filter = _filter.append(filter, condition, "and");
                    $scope.transferList.filter(filter);
                   // _filter.filter($scope.transferList, condition, "and");
                    $scope.dateFilter.TimeRange = 'other';
                    //$scope.dateFilterPopup.close();
                }
            };

            //$scope.filterByReceivedDate = function () {
               
            //    var condition = [];
            //    var toDate = $scope.receivedDateFilterRange.toDate;
            //    var fromDate = $scope.receivedDateFilterRange.fromDate;

            //    if(fromDate)
            //        condition.push(_filter.newCondition("ReceivedDate", fromDate, "ge"));

            //    if(toDate)
            //    {
            //        toDate = new Date(toDate);
            //        condition.push(_filter.newCondition("ReceivedDate", new Date(toDate.DateAdd(1)), "lt"));
            //    }

            //    if (condition.length > 0)
            //        _filter.filter($scope.transferList, condition, "and");
            //    else
            //        _filter.remove($scope.transferList, "ReceivedDate");
                
            //};

            $scope.print = function (dataItem) {
                if (dataItem.ReceivedDescription == undefined) {
                    dataItem.ReceivedDescription = "";
                }
                dataItem.retailer = _session.retailer;
                _transferDetail.getDetails({ transferId: dataItem.Id, Includes: ["Product"] }, function (detail) {
                    dataItem.TransferDetails = detail.Data;
                    if ((dataItem.Status !== _transferStatusMap.Received && dataItem.Status !== _transferStatusMap.Sent) || (dataItem.Status === _transferStatusMap.Sent && dataItem.TotalReceiveQuantity == dataItem.TotalTransferQuantity)) {
                        for (var i = 0; i < dataItem.TransferDetails.length; i++) {
                            dataItem.TransferDetails[i].ReceiveQuantity = "";
                        }

                    }
                    //_print.printfromtype("Transfer", dataItem);
                    _print.printfromtype(_printTypeMap.Transfer, dataItem);
                }, function () {

                });


            };

            $scope.exportDetail = function (dataItem) {
                var type = "TransferDetail";
                var fileName = "ChiTietChuyenHang_" + dataItem.Code;
                var data = { req: dataItem.Id };
                _export.toExcel(type, fileName, data);
            };

            $scope.export = function () {
                var filter = $scope.transferList.reader.kvFilter;
                var col = $("#grdTransfers").data("kendoGrid").options.columns;
                var arrcol = [];

                try {
                    if (localStorage.getItem("grdTransfers")) {
                        col = JSON.parse(localStorage.getItem("grdTransfers"));
                    }
                } catch (ex) { }

                for (var idx = 0; idx < col.length; idx++) {
                    //if (!$scope._setting.SellAllowDeposit && col[idx].field === "Status") continue;

                    if (col[idx].field == "ShortDescription")
                        col[idx].field = "Description";

                    if (col[idx].field == "StatusValue")
                        col[idx].field = "Status";

                    if (!col[idx].hidden) {
                        arrcol.push({
                            Field: col[idx].field, Title: col[idx].title,
                            Format: col[idx].format ? col[idx].format.replace("{0:", "").replace("}", "").replace("n0", "#,#") : null,
                            Width: col[idx].width,
                            isDate: col[idx].isDate
                        });
                    }
                }
                var type = "Transfer";
                var fileName = "DanhSachChuyenHang";
                var data = { column: JSON.stringify(arrcol), req: JSON.stringify(filter) };
                _export.toExcel(type, fileName, data);
            };

            function init() {
                $scope.transferStatus = [];
                for (var i in _transferStatus)
                    $scope.transferStatus.push({ key: i, value: _transferStatus[i] });

                $scope.directionFilter = "both";
                $scope.dateFilter = {
                    typeFilter: 'common',
                    StartDate: new Date(),
                    EndDate: new Date(),
                    TimeRange: 'alltime'
                };
                $scope.pageSizes = pager.pageSizes;
                $scope.pageSize = pager.defaultList;
                $scope.filterSentDate = false;

                if ($("#templDetail").length > 0) {
                    $scope.detailTemplate = kendo.template($("#templDetail").html());
                }
            }
           
            function initFilter() {
                $scope.filterName = $routeParams.Code ? $routeParams.Code : $routeParams.code;
                if ($scope.filterName) {
                    //show detail for only one order 

                    //remove any other filter 
                    $scope.branchids = [];
                    $scope.dateFilter.TimeRange = '';
                    $scope.currentBranchId = 0;
                }

                var filter = [];
                var condition = [];
                if ($scope.filterName) {
                    filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filterName, 'eq')], 'and');
                } else {
                    condition.push(_filter.newCondition("FromBranchId", _session.branch.id, "eq"));
                    condition.push(_filter.newCondition('ToBranchId', _session.branch.id, 'eq'));
                    filter = _filter.append(filter, condition, "or");
                }
                var condition = [];
                if ($scope.dateFilter.TimeRange != 'other') {
                    
                    if ($scope.filterSentDate)
                        condition.push(_filter.newCondition("DispatchedDate", $scope.dateFilter.TimeRange, "eq"));
                    if ($scope.filterReceivedDate)
                        condition.push(_filter.newCondition("ReceivedDate", $scope.dateFilter.TimeRange, "eq"));
                    filter = _filter.append(filter, condition, "and");
                }
                else {
                    var toDate = new Date($scope.dateFilter.EndDate).IgnoreTime();
                    var fromDate = new Date($scope.dateFilter.StartDate).IgnoreTime();
                    $scope.lblOtherTimeFilter = $filter('date')(fromDate, 'dd/MM/yyyy') + " - " + $filter('date')(toDate, 'dd/MM/yyyy');
                    if ($scope.filterSentDate) {
                        condition.push(_filter.newCondition("DispatchedDate", fromDate, "ge"));
                        condition.push(_filter.newCondition("DispatchedDate", new Date(toDate.DateAdd(1)), "lt"));
                    }
                    if ($scope.filterReceivedDate) {
                        condition.push(_filter.newCondition("ReceivedDate", fromDate, "ge"));
                        condition.push(_filter.newCondition("ReceivedDate", new Date(toDate.DateAdd(1)), "lt"));
                    }
                    filter = _filter.append(filter, condition, "and");
                    //$scope.dateFilter.TimeRange = 'other';
                }
                return filter;
            }

        }])
.directive('kvTransferFilter', ['kvSession', function (_session) {
    return {
        restrict: 'E',
        transclude: true,
        link: function (scope, elem, attrs) { },
        templateUrl: _session.partialPath('transfer-filter.html')
    };
}])
.directive('kvTransferPopup', ['kvSession', 'TransferResource', 'logger', 'UserResource', 'PaymentResource', 'kvPaymentMethods', '$filter', 'kvLabel', 'kvMessages', 'transferStatus','$compile','PrivilegeHelper','$timeout',
    function (_session, _transfer, _logger, _usersvc, _paymentsvc, _paymentMethod, $filter, _l, _m, _transferStatus, $compile,_p, $timeout) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: ['$scope', '$rootScope', 'transferStatusMap', function ($scope, $rootscope, _statusMap) {
                $scope._l = _l;
                $scope._m = _m;
                $scope.viewCost = _p.has('Product_Cost');
                $scope.statusMap = _statusMap;
                $scope.viewUrl = viewUrl;
                if ($scope.$parent && $scope.popupName) {
                    $scope.$parent[$scope.popupName] = this;
                }

                $scope.cancel = function () {
                    $scope.transferPopup.close();
                };

                $scope.update = function () {
                    _transfer.saveTransfer({
                        Transfer: $scope.Transfer
                    }, function (data) {
                        $scope.transferPopup.close();
                        execCb($scope.callback, data);
                        _logger.success(_m.transferSaveSuccess);
                    }, function (err) {
                        _logger.error(getMessage(err));
                    });
                };

                $scope.showpopup = function (id) {
                    $scope["serialpopup" + id].showWindow();
                }

                this.showPopupMain = function (transferId, callback) {
                    $scope.callback = callback;
                    $scope.Flag = false;
                    this.show(transferId);
                };
                this.showPopup = function (transferId, selectedProduct) {
                    $scope.selectedProduct = selectedProduct;
                    $scope.Flag = true;
                    this.show(transferId);
                };
                this.show = function (transferId) {
                    _transfer.get({
                        id: transferId,
                        Includes: ["User", "ReceivedUser", "FromBranch", "ToBranch"]
                    }, function (data) {
                        $scope.Transfer = data;
                        $scope.Transfer.ReceivedDate = kendo.parseDate($scope.Transfer.ReceivedDate);
                        $scope.Transfer.DispatchedDate = kendo.parseDate($scope.Transfer.DispatchedDate);
                        $scope.Transfer.StatusValue = _transferStatus[data.Status];
                        refresh($scope);
                        grid(transferId);
                        $scope.transferPopup.title($filter("stringFormat")("{0}", [$scope._l.transfer_Name]));
                        $scope.transferPopup.wrapper.addClass("k-window-poup");
                        $scope.transferPopup.center().open();
                    }, function (err) {
                        _logger.error($scope._m.transferNotFound);
                    });
                };

                function grid(transferId) {
                    var transferDetails = new kendo.data.DataSource({
                        type: "odata",
                        autoSync: true,
                        transport: {
                            read: {
                                url: "/api/transferDetails/" + transferId + "?Includes=Product",
                                dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                            }
                        },
                        pageSize: 10,
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true,
                        schema: {
                            data: "Data",
                            total: "Total"
                        }
                    });
                    var detailcols= [
                            { field: "Product.Code", title: $scope._l.productCode, headerAttributes: { "class": "tdCode" }, attributes: { "class": "tdCode" } },
                            { field: "ProductName", title: $scope._l.productName },
                            { field: "SendQuantity", title: $scope._l.sentQuantity, format: "{0:#,#.###}", headerAttributes: { "class": "tdSSL txtR" }, attributes: { "class": "tdSSL txtR" } },
                            { field: "ReceiveQuantity", title: $scope._l.receivedQuantity, format: "{0:#,#.###}", headerAttributes: { "class": "wtdSLC txtR" }, attributes: { "class": "tdSLC txtR" } }
                    
                    ];
                    if ($scope.viewCost)
                    {
                        detailcols.push({ field: "Price", title: "Giá chuyển/nhận ", format: "{0:#,#}", headerAttributes: { "class": "w120px txtR" }, attributes: { "class": "w120px txtR" } });
                    }

                    $("#transferDetails").empty();
                    $("#transferDetails").kendoGrid({
                        type: "odata",
                        autoSync: true,
                        dataSource: transferDetails,
                        serverPaging: true,
                        serverFiltering: true,
                        dataBinding: $rootscope.emptyGridFix,
                        serverSorting: true,
                        pageable: { pageSize: 5, refresh: false, pageSizes: false, buttonCount: 5, messages: { display: $scope._l.pagerInfo } },

                        columns: detailcols,
                        dataBound: function (e) {
                            var gridData = e.sender.dataSource.data();
                            $.each(gridData, function (i, row) {
                                //console.log(row);
                                if (row.SerialNumbers && row.SerialNumbers.length > 0) {
                                    
                                    var ss = row.SerialNumbers.split(",");
                                    var lst = [];
                                    var cssClass = "";
                                    for (var k = 0; k < ss.length ; k++) {
                                        lst.push({ "text": ss[k], "class": cssClass });
                                    }
                                    $scope["serials" + row.Id] = lst;
                                    $scope["serials-sent" + row.Id] = ss;
                                    if (row.ReceiveSerialNumbers)
                                        $scope["serials-receive" + row.Id] = row.ReceiveSerialNumbers.split(',');

                                    var maxShow = 7;
                                    var lstS = row.SerialNumbers.split(",");
                                    if (lstS[0].length > 0) {
                                        maxShow = Math.floor(80 / lstS[0].length);
                                    }

                                    $scope["truncatedSerials" + row.Id] = lst;
                                    if (lst.length > maxShow)
                                        $scope["truncatedSerials" + row.Id] = lst.slice(0, maxShow);

                                    var popup = '<a ng-click="showpopup(' + row.Id + ')" class="viewmore">' + $scope._l.viewmore + '</a><kv-view-two-serial-popup kv-title="Serial chuyển" kv-title2="Serial nhận" kv-name="serialpopup' + row.Id + '" kv-source="serials-sent' + row.Id + '" kv-source2="serials-receive' + row.Id + '"></kv-view-two-serial-popup>';

                                    var tags = angular.element($('<tr class="row-serial"><td colspan="4"><ul class=\"readonly-tag-list\">' +
                                                                    '<li class=\"tag-item {{tag.class}}\" ng-repeat=\"tag in truncatedSerials' + row.Id + '\">{{tag.text}}</li></ul>' + popup + '</td></tr>'));
                                    var el = $compile(tags)($scope);

                                    $timeout(function () {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-serial');
                                        $('tr[data-uid="' + row.uid + '"]').after(tags);
                                    });
                                }

                                for (var j = 0; j < $scope.selectedProduct.length; j++) {
                                    if (row.ProductId == $scope.selectedProduct[j]) {
                                        $('tr[data-uid="' + row.uid + '"]').addClass('tr-currentSelected');
                                    }
                                }
                            });
                            if ($('tr').hasClass('tr-currentSelected')) {
                                e.sender.content.animate({ scrollTop: $('.tr-currentSelected').parent().offset().top }, 0);
                            }
                        },
                    });
                }
            }],
            templateUrl: _session.partialPath('transfer-popup.html')
        };
    }])
.directive('kvTransferImportPopup', ['kvSession', 'logger', '$filter', 'kvLabel', 'kvMessages', '$rootScope','settings',
    function (_session, _logger, $filter, _l, _m, $rootScope, _settings) {
        return {
            restrict: 'E',
            scope: { popupName: '@kvName' },
            link: function (scope, elem, attrs) {
                elem.on('$destroy', function () {
                    if (scope.$parent && scope.popupName) {
                        delete scope.$parent[scope.popupName];
                    }
                });
            },
            controller: [
                '$scope', function ($scope) {
                    $scope.appSetting = _settings;
                    $scope._l = _l;
                    $scope._m = _m;
                    //$scope.IsReplaceExisting = true;
                    var onImportComplete = function (e) {
                    };
                    var onUploadImport = function (e) {
                        $.each(e.files, function () {
                            if (!(this.extension.toLowerCase() == ".xlsx" || this.extension.toLowerCase() == ".xls")) {
                                _logger.error($scope._l.pricebook_MsgImportErrorFile);
                                e.preventDefault();
                            }
                        });
                        e.data = { branchId: _session.branch.id, retailerId: _session.retailer.id };
                        $scope.importWindow.wrapper.find(".k-window-action").css("visibility", "hidden");
                    };

                    $scope.onCloseImport = function (e) {
                        $scope.ImportError = null;
                        $(".k-upload-files").remove();
                        //$scope.IsReplaceExisting = true;
                    };
                    var onSuccessImport = function (e) {
                        var data = e.response.Data;
                        execCb($scope.callback, data);
                        $scope.importWindow.wrapper.find(".k-upload-status-total").remove();
                        $scope.importWindow.close();

                    };
                    var onImportError = function (e) {
                        if (e.XMLHttpRequest.responseURL.indexOf("login?redirect") > -1) {
                            $scope.ImportError = $rootScope._m.sessionExpire;
                        } else {
                            if (e.XMLHttpRequest.responseText) {
                                $scope.ImportError = e.XMLHttpRequest.responseText;
                            } else {
                                $scope.ImportError = $rootScope._l.customer_NoUseToFunction;
                            }
                        }
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        refresh($scope);
                    };
                    var onSelectFile = function (e) {
                        console.log(e);
                    };

                    var onImportCancel = function (e) {
                    };

                    $scope.showPopup = function (callback) {
                        $scope.callback = callback;
                        $scope.importWindow.wrapper.addClass("k-window-poup k-window-masstel k-window-importTranfer");
                        $scope.importWindow.center().open();
                        $scope.importWindow.wrapper.find(".k-window-action").removeAttr("style");
                        $scope.importWindow.wrapper.find(".k-upload").addClass("k-upload-empty");
                        $scope.importWindow.wrapper.find(".k-upload-status").remove();
                    };
                    $scope.ImportFile = {
                        multiple: false,
                        showFileList: true,

                        async: {
                            saveUrl: "/Files/ImportTransferDetail",
                            removeUrl: "/Files/Remove",
                            autoUpload: false
                        },

                        complete: onImportComplete,
                        upload: onUploadImport,
                        success: onSuccessImport,
                        select: onSelectFile,
                        error: onImportError,
                        cancel: onImportCancel,
                        localization: {
                            select: $scope._l.import_ChooseFile,
                            uploadSelectedFiles: $scope._l.import_Uploaded,
                            statusUploading: $scope._l.import_Uploading,
                        }
                    };
                    if ($scope.$parent && $scope.popupName) {
                        $scope.$parent[$scope.popupName] = $scope;
                    }

                }
            ],
            templateUrl: _session.partialPath('transfer-import.html')
        };
    }]);
'use strict'
kvApp.controller('UserListCtrl', ['$scope', 'SettingResource', 'UserResource', 'kvSession', 'kendofilter', 'logger', 'BranchResource', 'kvConfirmBox', 'kvMessages', '$filter', '$routeParams',
    function ($scope, _settings, _users, _session, _filter, _logger, _branches, _msgbox, _m, $filter, $routeParams) {
        $scope.pageSize = pager.defaultList;
        $scope.pageSizes = pager.pageSizes;
        $scope.filters = {};
        $scope.branches = _branches.get({ Permission: 'User_Read' });
        $scope.canDelete = $scope._p.has('User_Delete');
        $scope.canUpdate = $scope._p.has('User_Update');
        $scope.canCreate = $scope._p.has('User_Create');
        var getAdditionalParam = function () {
            //return filter by total invoiced amount 
            var userFilter = $scope.filters;
            var param = {};
            if (userFilter.branchids && userFilter.branchids.length > 0) {
                //param.BranchIds = userFilter.join(',');
                param.BranchIds = userFilter.branchids.join(',');
            }
            if (userFilter.roleIds && userFilter.roleIds.length > 0) {
                //param.RoleIds = userFilter.roleIds.joins(',');
                param.RoleIds = userFilter.roleIds.join(',');
            }
            return param;
        };
        function showPopup(data) {

            $scope.$broadcast(app.events.showUserForm, data);
        }

        $scope.AddUser = function () {
            showPopup(null);
        }
        $scope.editUser = function (data) {
            showPopup(data);
        }
        $scope.bindedGrid;
        $scope.grvdataBinding = function (arg) {
            $scope.bindedGrid = arg.sender;
            $scope.$apply();
        };

        $scope.users = new kendo.data.DataSource({
            type: "odata",
            transport: {
                read: {
                    url: "/api/users?format=json&ExcludeMe=true",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    data: getAdditionalParam
                    //tranditional: true 
                }
            },
            pageSize: $scope.pageSize,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            filter: initFilter(),
            schema: {
                data: "Data",
                total: "Total",
                parse: function (response) {
                    if (response) {
                        angular.forEach(response.Data, function (r) {
                            r.CompareUserName = r.UserName;
                            r.CompareGivenName = r.GivenName;
                        });
                    }
                    return response;
                },
                model: {
                    fields: {
                        UserName: { type: "string" },
                        GivenName: { type: "string" },
                        MobilePhone: { type: "string" }
                    }
                }
            }
        });

        $scope.privileges = _settings.getPrivileges();
        _settings.getRoles({ IncludePrivileges: true }, function (data) {
            $scope.roles = data;
        });


        $scope.grdColumns = [
            { "field": "UserName", "title": $scope._l.userName, headerAttributes: { "class": "tdBranch" }, attributes: { "class": "tdBranch" } },
            { "field": "GivenName", "title": $scope._l.nameUser, headerAttributes: { "class": "" }, attributes: { "class": "" } },
            {
                "field": "MobilePhone",
                "title": $scope._l.contactNo,
                headerAttributes: { "class": "tdPhone" },
                attributes: { "class": "tdPhone" }
            },
        ];

        $scope.detailTemplate = kendo.template($('#userDetailTmpl').html());

        $scope.onSaveSuccess = function (user) {
            var b = $.grep($scope.branchs, function (c) { return c.id == user.privileges.BranchId; })[0];
            if (!user.privileges.RoleId) {
                _logger.success($filter("stringFormat")($scope._l.user_MsgDelUserBranchSuccess, [user.GivenName, b.name]));
            } else {
                _logger.success($filter("stringFormat")($scope._l.user_MsgPermisionUserBranchSuccess, [user.GivenName, b.name]));
            }
        };
        $routeParams.Code = $routeParams.code ? $routeParams.code : $routeParams.Code;
        if ($routeParams.Code) {
            //show detail for only one order 
            $scope.filters.Username = $routeParams.Code;
            //remove any other filter 

        }

        function initFilter() {
            var cond = [], filter = [];

            if ($routeParams.Code) {
                cond.push(_filter.newCondition('UserName', $routeParams.Code, 'contains'));
                cond.push(_filter.newCondition('GivenName', $routeParams.Code, 'contains'));
                filter = _filter.append(filter, cond, "or");
            }
            return filter;
        };

        function viewPrivilegeForBranch(user, branchId) {
            user.privileges = _users.getPrivileges({ userId: user.Id, BranchId: branchId }, function () {
                //checkFuncGroup(user);
                user.onPrivilegeChanged();
            });
        }
        $scope.grvDetailInit = function (e) {
            var detailRow = e.detailRow;
            var tabship = detailRow.find(".tabstrip").kendoTabStrip({
                animation: false
            });

            var b = $.grep($scope.branchs, function (b) { return b.id == _session.branch.Id })[0];
            $scope.viewBranch(b, e.data);
        };

        $scope.roleChanged = function (user) {
            if (!user.privileges.RoleId) {
                user.privileges.Data = {};
                user.securedFunc = {};
            }
            else {
                //get role default and then overwrite             
                for (var j = 0 ; j < $scope.roles.length ; j++) {
                    if (user.privileges.RoleId == $scope.roles[j].Id) {
                        var r = $scope.roles[j];
                        user.privileges.Data = angular.copy(r.Privileges);
                        //checkFuncGroup(user);
                        user.onPrivilegeChanged();
                        break;
                    }
                }

            }
        }

        $scope.viewBranch = function (branch, user) {
            // user.privileges = _users.getPrivileges({ userId: user.Id, BranchId: branch.id });
            //get currently selected 
            var current = $.grep($scope.branchs, function (b) { return b.selected });
            if (current.length == 1 && current[0].id == branch.id && user.privileges) {
                return;
            }

            angular.forEach($scope.branchs, function (b) {
                b.selected = false;
            });
            branch.selected = true;
            viewPrivilegeForBranch(user, branch.id);
        }

        $scope.filterByUserName = function () {
            if ($scope.filters.Username && $scope.filters.Username.length >= 2) {
                var cond = [], filter = [];
                cond.push(_filter.newCondition('UserName', $scope.filters.Username, 'contains'));
                cond.push(_filter.newCondition('GivenName', $scope.filters.Username, 'contains'));
                filter = _filter.append(filter, cond, "or");
                _filter.addfilter($scope.users, filter);
            }
            else if (!$scope.filters.Username) {
                //_filter.remove($scope.users, 'UserName');
                //_filter.remove($scope.users, 'GivenName');

                var filter = $scope.users.filter();
                if (!filter) return;
                filter = _filter.detach(filter, 'UserName');
                filter = _filter.detach(filter, 'GivenName');
                $scope.users.filter(filter);
            }
        }

        $scope.filterbyBranch = function () {
            $scope.users.read();
        }

        $scope.deleteUser = function (user) {
            _msgbox.confirm($scope._l.user_MsgDel, $scope._l.user_MsgDelTitle, false, $scope._l.confirmYes, $scope._l.confirmNo, false, true);
            _msgbox.onConfirm = function () {
                _users.remove({ userId: user.Id, CompareUserName: user.UserName }, function () {
                    _logger.success(_m.userDeleteSuccess);
                    $scope.users.read();
                },
                function (er) {
                    _logger.error(getMessage(er));
                })
            };
        }
    }])
.controller('UserFormCtrl', ['$scope', 'kvSession', 'SettingResource', 'UserResource', 'logger', '$location', 'BranchResource', '$http', '$timeout',
    function ($scope, _session, _settings, _users, _logger, $location, _branches, $http, $timeout) {

        var openWindow = function (user) {
            $scope.userWindow.wrapper.find(".addMoreMain .fa").removeClass('fa-minus-square').addClass('fa-plus-square');
            $scope.userWindow.wrapper.find(".addMoreBox").addClass('ng-hide');
            var listeners = {
                onSave: function (data) {
                    _logger.success($scope._m.globalSaveSuccess);
                    $scope.userWindow.close();
                    $scope.users.read();
                },
                onSaveError: function (err) {
                    _logger.error(err);
                },
                onCancel: function () {
                    $scope.userWindow.close();
                }
            };
            if (!user)
                user = {};
            else {
                $scope.source = user;
                //make a copy
                user = angular.copy(user);
            }

            $scope.userWindow.title($scope._l.addUser);
            $scope.userForm.setListeners(listeners);
            $scope.userForm.setUser(user);
            $scope.userWindow.wrapper.addClass("k-window-fix k-window-poup k-window-user");
            $scope.userWindow.center().open();
            refresh($scope);
        };
        $scope.$on(app.events.showUserForm, function (evt, data) {
            openWindow(data);
            $scope.userWindow.onClose = function (e) {
                if ($scope.userForm) {
                    $scope.userForm.clearListener();
                }
            };
        });


    }])
    .controller('AccountFormCtrl', ['$scope', 'kvSession', 'SettingResource', 'UserResource', 'logger', '$location', 'BranchResource', '$http', '$timeout',
    function ($scope, _session, _settings, _users, _logger, $location, _branches, $http, $timeout) {

        var openWindow = function (user) {

            var listeners = {
                onSave: function (data) {
                    _logger.success($scope._m.globalSaveSuccess);
                    $scope.userWindow.close();
                    location.reload();

                },
                onSaveError: function (err) {
                    _logger.error(err);
                },
                onCancel: function () {
                    $scope.userWindow.close();
                }
            };
            if (!user)
                user = {};
            else {
                $scope.source = user;
                //make a copy
                user = angular.copy(user);
            }


            $scope.userWindow.title($scope._l.addUser);
            $scope.userForm.setListeners(listeners);
            $scope.userForm.setUser(user);
            $scope.userWindow.wrapper.addClass("k-window-fix k-window-poup k-window-user");
            $scope.userWindow.center().open();
            refresh($scope);
        };
        $scope.$on(app.events.showViewUserForm, function (evt, d) {
            openWindow(d);

            $scope.userWindow.onClose = function (e) {
                if ($scope.userForm) {
                    $scope.userForm.clearListener();
                }
            };
        });
        $scope.$on(app.events.showAccountForm, function (evt) {
            _settings.getAccount(function (d) {
                openWindow(d);
            });
            $scope.userWindow.onClose = function (e) {
                if ($scope.userForm) {
                    $scope.userForm.clearListener();
                }
            };
        });


    }])
.directive('privilegeSetting', ['kvSession', 'kvLabel', function (_session, _labels) {

    return {
        restrict: 'EA',
        scope: { user: '=kvUser', privileges: '=kvPrivileges', name: '@kvName', onSave: '=kvOnSave' },
        templateUrl: _session.partialPath('privilege-form.html'),
        link: function (scope, elem, attr) {
            //nothing in particular   

            elem.on('$destroy', function () {
                if (scope.$parent && scope.name) {
                    delete scope.$parent[scope.name];
                }
            });
        },

        controller: ['$scope', 'UserResource', 'PrivilegeHelper', 'logger', function ($scope, _users, _privilegeHelper, _logger) {

            $scope._l = _labels;
            $scope.canUpdate = _privilegeHelper.has('User_Update');
            $scope.user.onPrivilegeChanged = function () {
                checkFuncGroup($scope.user);
            }

            function updateParentGroupStatus(user, f) {
                if (user.securedFunc[f.Id] === f.Ops.length) {
                    user.securedFunc[f.Id] = true;
                    if (user.grey) {
                        delete user.grey[f.Id];
                    }
                }
                else {
                    if (user.securedFunc[f.Id] && user.securedFunc[f.Id] > 0) {
                        user.grey = user.grey ? user.grey : {};
                        user.grey[f.Id] = true;
                    }
                    else {
                        if (user.grey) {
                            delete user.grey[f.Id];
                        }
                    }
                    user.securedFunc[f.Id] = false;
                }
            }

            function checkFuncGroup(user) {
                //update upper node

                user.securedFunc = {};
                if (!user.privileges || !user.privileges.Data)
                    return;

                for (var d in user.privileges.Data) {
                    var p = d.split('_')[0];
                    user.securedFunc[p] = user.securedFunc[p] ? user.securedFunc[p] : 0;
                    user.securedFunc[p] += 1;
                }

                for (var p = 0 ; p < $scope.privileges.length ; p++) {
                    angular.forEach($scope.privileges[p].Functions, function (f) {
                        updateParentGroupStatus(user, f);
                    });
                }
            }

            $scope.itemCheckChanged = function (user, f) {
                user.securedFunc[f.Id] = 0;
                for (var d in user.privileges.Data) {
                    if (d.indexOf(f.Id) >= 0 && user.privileges.Data[d]) {
                        user.securedFunc[f.Id] += 1;
                    }
                }
                updateParentGroupStatus(user, f);
            };

            $scope.savePrivilege = function (user) {
                if (user.locked)
                    return;
                user.locked = true;
                user.privileges.userId = user.Id;
                _users.savePrivileges(user.privileges, function () {
                    //user.privileges.$savePrivileges({ userId: user.Id }, function () {

                    user.locked = false;
                    if ($scope.onSave)
                        $scope.onSave($scope.user);

                }, function (er) {
                    _logger.error(getMessage(er)); user.locked = false;
                });
            };

            $scope.cancelChange = function (user) {
                user.privileges = _users.getPrivileges({ userId: user.Id, BranchId: user.privileges.BranchId }, function () {
                    user.onPrivilegeChanged();
                });
            }

            $scope.toggle = function (user, func) {
                //console.log('chaing to ' + user.securedFunc[func.Id])
                angular.forEach(func.Ops, function (o) {
                    user.privileges.Data[o.Id] = user.securedFunc[func.Id];
                });
                if (user.grey)
                    delete user.grey[func.Id];
                //updateParentGroupStatus(user, func);
            }

            checkFuncGroup($scope.user);
        }]
    };
}])
.directive('privilegePopup', ['kvSession', function (_session) {
    return {
        templateUrl: _session.partialPath('privilege-popup.html'),
        link: function (scope, elem, attrs) { },
        controller: ['$scope', function ($scope) {

        }]
    };
}])
.directive('kvUserForm', ['kvSession', 'SettingResource', '$routeParams', 'UserResource', 'logger', '$location', 'BranchResource', '$http', '$timeout', 'PrivilegeHelper', 'kvLabel', 'kvMessages', 'settings', 'TokenApiResource',
    function (_session, _settings, $routeParams, _users, _logger, $location, _branches, $http, $timeout, _privilege, _label, _messages, _setting, tokensvc) {
        return {
            restrict: 'E',
            scope: { formName: '@formName', isProfile: '@isProfile' },
            controller: ['$scope', function ($scope) {
                $scope._p = _privilege;
                $scope._m = _messages;
                $scope._l = _label;
                $scope._setting = _setting;
                $scope.listeners = {}

                $scope.branches = _branches.get({ Permission: 'User_Create' });//_session.branchs;
                $scope.branchids = [];
                _settings.getRoles({}, function (roles) {
                    $scope.roles = roles;
                    //$scope.roles.unshift({ Name: ("--" + $scope._l.lblPrivilegesSelectHolder + "--"), Id: '' });
                });

                $scope.generateRandomKey = function () {
                    if (_setting.UseTokenApi && $scope.user && $scope.user.Id) {
                        tokensvc.generateKey({ Id: $scope.user.Id }, function (data) {
                            if (data) {
                                $scope.user.TokenApi = data.Token;
                            }
                        });
                    }

                }
                $scope.loggedInUserId = _session.user.id;
                $scope.loggedInIsAdmin = _session.user.IsAdmin;
                var userName = "";

                $scope.datePickerOptions = {
                    parseFormats: ["yyyy-MM-ddTHH:mm:ss"]
                };

                function validateUser(user) {

                    if (!user.GivenName) {
                        return $scope._m.userEmptyName;
                    }

                    if (!user.UserName) {
                        return $scope._m.userEmptyUsername;
                    }

                    if (!user.Id) {
                        if (!user.PlainPassword) {
                            return $scope._m.userEmptyPassword;
                        }
                        if ((!user.Id || user.Id <= 0) && !user.IsAdmin && (!$scope.branchids || $scope.branchids.length == 0 || !$scope.roleId)) {
                            if (!$scope.roleId) {
                                return 'Bạn chưa phân quyền cho người dùng';
                            }
                            else {
                                return $scope._m.userNoRole;
                            }
                        }
                    }
                    if (!user.Id || user.Id === $scope.loggedInUserId) {
                        if (user.PlainPassword && user.PlainPassword !== user.RetypePassword) {
                            return $scope._m.userPasswordMismatch;
                        }
                    }
                    if (user.Id && user.Id === $scope.loggedInUserId) {
                        if ((user.PlainPassword || user.RetypePassword) && !user.OldPassword) {
                            return $scope._m.userEmptyOldPassword;
                        }
                    }
                    return null;
                }
                $scope.cancel = function () {
                    if ($scope.listeners.onCancel) {
                        execCb($scope.listeners.onCancel);
                    }
                };
                $scope.saveUser = function () {
                    var er = validateUser($scope.user);
                    if (er) {
                        _logger.error(er);
                        return;
                    }
                    if (typeof ($scope.user.PlainPassword) == 'undefined') {
                        $scope.user.PlainPassword = '';
                    }
                    if (typeof ($scope.user.RetypePassword) == 'undefined') {
                        $scope.user.RetypePassword = '';
                    }
                    if ($scope.user.PlainPassword != $scope.user.RetypePassword) {
                        _logger.error('Mật khẩu xác nhận không giống nhau.');
                        return;
                    }
                    if ($scope.locked) {
                        return;
                    }
                    if (!$scope.user.Id) {
                        //create permission object 
                        $scope.user.Permissions = [];
                        console.log($scope.branchids);
                        angular.forEach($scope.branchids, function (b) {
                            $scope.user.Permissions.push({
                                RoleId: $scope.roleId,
                                BranchId: b
                            });
                        });
                    }

                    $scope.locked = true;
                    function errHandler(er) {
                        if ($scope.listeners.onSaveError) {
                            execCb($scope.listeners.onSaveError, getMessage(er));
                        }
                        $scope.locked = false;
                    }
                    //if ($scope.isProfile == "true" && $scope.user.Id == $scope.loggedInUserId) {
                    //    _settings.saveAccount({  User: $scope.user }, function (result) {
                    //        if ($scope.listeners.onSave) {
                    //            execCb($scope.listeners.onSave, result)
                    //        }

                    //    }, errHandler);
                    //}
                    //else {
                    _users.save({ OldPassword: $scope.user.OldPassword, User: $scope.user, CompareUserName: userName }, function (result) {
                            // _logger.success($scope._m.globalSaveSuccess);
                            //  $location.path('/' + viewUrl.employeeList);
                            if ($scope.listeners.onSave) {
                                execCb($scope.listeners.onSave, result);
                            }
                            $scope.locked = false;
                        }, errHandler);
                    //}

                }
                this.setUser = function (data) {
                    $scope.user = data;
                    if (_setting.UseTokenApi && $scope.user.Id) {
                        tokensvc.get({ Id: $scope.user.Id }, function (data) {
                            if (data) {
                                $scope.user.TokenApi = data.Token;
                            }
                        });
                    }
                    userName = data.UserName;
                }
                this.setListeners = function (listener) {
                    $scope.listeners = listener;
                }
                this.clearListener = function () {
                    $scope.listeners = {};
                }

                if (!$scope.$parent[$scope.formName]) {
                    $scope.$parent[$scope.formName] = this;
                }
            }],

            link: function (scope, elem, attrs, ctrl) {
                elem.on('$destroy', function () {
                    ctrl.clearListener();
                    if (scope.formName && scope.$parent)
                        delete scope.$parent[scope.formName];
                });
            },
            templateUrl: _session.partialPath('user-form.html')
        }
    }]);;
/*
* TelerikReporting v10.0.16.204 (http://www.telerik.com/products/reporting.aspx)
* Copyright 2016 Telerik AD. All rights reserved.
*
* Telerik Reporting commercial licenses may be obtained at
* http://www.telerik.com/purchase/license-agreement/reporting.aspx
* If you do not own a commercial license, this file shall be governed by the trial license terms.
*/
(function(e,t,r,n,i){"use strict";var a=/{(\w+?)}/g;var o={DELETE:46,BACKSPACE:8,TAB:9,ESC:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,END:35,HOME:36};function u(){var e=r.navigator.userAgent.toLowerCase();if(e.indexOf("firefox")>-1){var t=Object.keys(o);var n=t.length;return function(e){for(var r=0;r<n;r++){if(o[t[r]]==e){return true}}}}return function(e){return false}}var s=e.utils={trim:function(e,t){return this.rtrim(this.ltrim(e,t),t)},replaceAll:function(e,t,r){return e.replace(new RegExp(t,"g"),r)},ltrim:function(e,t){if(t===i){t="s"}return e.replace(new RegExp("^["+t+"]+"),"")},rtrim:function(e,t){if(t===i){t="s"}return e.replace(new RegExp("["+t+"]+$"),"")},stringFormat:function(e,t){var r=Array.isArray(t);return e.replace(a,function(e,n){return t[r?parseInt(n):n]})},isSpecialKey:u(),tryParseInt:function(e){if(/^(\-|\+)?([0-9]+)$/.test(e)){return Number(e)}return NaN},tryParseFloat:function(e){if(/^(\-|\+)?([0-9]+(\.[0-9]+)?)$/.test(e)){return Number(e)}return NaN},parseToLocalDate:function(e){if(e instanceof Date)return e;var t=/Z|[\+\-]\d\d:?\d\d/i.test(e);if(!t){e+="Z"}return new Date(e)},adjustTimezone:function(e){return new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()))},unadjustTimezone:function(e){return new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds())},areEqual:function(e,t){if(e instanceof Date&&t instanceof Date){if(e.getTime()!==t.getTime()){return false}}else if(e!==t){return false}return true},reportSourcesAreEqual:function(e,t){if(e&&t&&e.report===t.report){var r=[],n=[];if(e.parameters)r=Object.getOwnPropertyNames(e.parameters);if(t.parameters)n=Object.getOwnPropertyNames(t.parameters);if(r.length===n.length){for(var i=r.length-1;i>=0;i--){var a=r[i];var o=e.parameters[a];var u=t.parameters[a];if(Array.isArray(o)){if(!Array.isArray(u))return false;if(o.length!==u.length)return false;for(var c=o.length-1;c>=0;c--){if(!s.areEqual(o[c],u[c])){return false}}}else if(!s.areEqual(o,u)){return false}}return true}}return false}};e.domUtils=function(){function e(e){return parseInt(e,10)||0}return{getMargins:function(r){var n=t(r);return{left:e(n.css("marginLeft")),right:e(n.css("marginRight")),top:e(n.css("marginTop")),bottom:e(n.css("marginBottom"))}},getPadding:function(r){var n=t(r);return{left:e(n.css("paddingLeft")),right:e(n.css("paddingRight")),top:e(n.css("paddingTop")),bottom:e(n.css("paddingBottom"))}},getBorderWidth:function(r){var n=t(r);return{left:e(n.css("borderLeftWidth")),right:e(n.css("borderRightWidth")),top:e(n.css("borderTopWidth")),bottom:e(n.css("borderBottomWidth"))}},scale:function(e,r,n,i,a){r=r||1;n=n||1;i=i||0;a=a||0;var o=s.stringFormat("scale({0}, {1})",[r,n]),u=s.stringFormat("{0} {1}",[i,a]);t(e).css("transform",o).css("-moz-transform",o).css("-ms-transform",o).css("-webkit-transform",o).css("-o-transform",o).css("-moz-transform-origin",u).css("-webkit-transform-origin",u).css("-o-transform-origin",u).css("-ms-transform-origin",u).css("transform-origin",u)}}}()})(window.telerikReportViewer=window.telerikReportViewer||{},window.jQuery,window,document);(function(e,t){"use strict";var r={controllerNotInitialized:"Controller is not initialized.",noReportInstance:"No report instance.",missingTemplate:"!obsolete resource!",noReport:"No report.",noReportDocument:"No report document.",invalidParameter:"Please input a valid value.",invalidDateTimeValue:"Please input a valid date.",parameterIsEmpty:"Parameter value cannot be empty.",cannotValidateType:"Cannot validate parameter of type {type}.",loadingFormats:"Loading...",loadingReport:"Loading report...",preparingDownload:"Preparing document to download. Please wait...",preparingPrint:"Preparing document to print. Please wait...",errorLoadingTemplates:"Error loading the report viewer's templates. (Template = {0}).",loadingReportPagesInProgress:"{0} pages loaded so far ...",loadedReportPagesComplete:"Done. Total {0} pages loaded.",noPageToDisplay:"No page to display.",errorDeletingReportInstance:"Error deleting report instance: {0}.",errorRegisteringViewer:"Error registering the viewer with the service.",noServiceClient:"No serviceClient has been specified for this controller.",errorRegisteringClientInstance:"Error registering client instance.",errorCreatingReportInstance:"Error creating report instance (Report = {0}).",errorCreatingReportDocument:"Error creating report document (Report = {0}; Format = {1}).",unableToGetReportParameters:"Unable to get report parameters.",errorObtainingAuthenticationToken:"Error obtaining authentication token."};e.sr=t.extend(r,e.sr)})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery);(function(e,t,r,n,i){"use strict";function a(){function e(){var e=["AcroPDF.PDF.1","PDF.PdfCtrl.6","PDF.PdfCtrl.5"];var r=null;t.each(e,function(e,t){try{r=new ActiveXObject(t);if(r){return false}}catch(n){}});return r}return{hasPdfPlugin:function(){return e()!==null}}}function o(){function e(){var e=/Firefox[\/\s](\d+\.\d+)/.exec(navigator.userAgent);if(null!==e&&e.length>1){var t=parseFloat(e[1]);if(t>=19){return false}}var r=navigator.mimeTypes["application/pdf"];var n=r!==null?r.enabledPlugin:null;if(n){var i=n.description;return i.indexOf("Adobe")!==-1&&(i.indexOf("Version")===-1||parseFloat(i.split("Version")[1])>=6)}return false}return{hasPdfPlugin:function(){return e()}}}function u(){function e(){var e=navigator.plugins;var r=false;t.each(e,function(t,n){if(e[t].name==="Chrome PDF Viewer"||e[t].name==="Adobe Acrobat"){r=true;return false}});return r}return{hasPdfPlugin:function(){return e()}}}function s(){return{hasPdfPlugin:function(){return false}}}function c(){if(r.navigator){var e=r.navigator.userAgent.toLowerCase();if(e.indexOf("msie")>-1||e.indexOf("mozilla")>-1&&e.indexOf("trident")>-1)return a();else if(e.indexOf("firefox")>-1)return o();else if(e.indexOf("chrome")>-1)return u();else return s()}return null}var l=c();var f=l?l.hasPdfPlugin():false;e.printManager=function(){var e;function t(t){if(!e){e=n.createElement("IFRAME");e.style.display="none"}e.src=t;n.body.appendChild(e)}function i(e){r.open(e,"_self")}var a=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);var o=a?i:t;return{print:function(e){o(e)},getDirectPrintState:function(){return f}}}()})(window.telerikReportViewer=window.telerikReportViewer||{},window.jQuery,window,document);(function(e,t,r){"use strict";var n=e.utils;if(!n){throw"Missing telerikReporting.utils"}var i="application/json",a="application/json; charset=UTF-8",o="application/x-www-form-urlencoded",u="GET",s="POST",c="PUT",l="DELETE";var f={};e.ServiceClient=function(e){e=t.extend({},f,e);var r=null;var i=null;if(e.useReportServer){r=n.rtrim(e.serviceUrl,"\\/");i=r+"/api/reports"}else{i=n.rtrim(e.serviceUrl||e.baseUrl,"\\/")}var d;function p(e){if(!e)throw"Invalid cliendID"}function v(e,r){r=t.extend({},{baseUrl:i},r);return n.stringFormat(e,r)}function m(e){g();if(d){e.setRequestHeader("Authorization","Bearer "+d.access_token)}}function g(){if(e.useReportServer&&!d){if(!h(e.credentials.username,e.credentials.password)){console.log("Error obtaining authentication token!")}}}function h(e,n){if(!r){return null}var i=r+"/Token";var a={grant_type:"password",username:e,password:n};t.when(t.ajax({url:i,async:false,type:s,data:a,dataType:"json",contentType:o})).then(function(e){d=e}).fail(function(e,t,r){d=null});return d!==null}return{_urlFromTemplate:v,registerClient:function(e){var r=t.extend({},e,{type:s,url:v("{baseUrl}/clients"),dataType:"json",data:JSON.stringify({timeStamp:Date.now()}),beforeSend:m});return t.ajax(r)},unregisterClient:function(e,r){p(e);var n=t.extend({},r,{type:l,url:v("{baseUrl}/clients/{clientID}",{clientID:e}),beforeSend:m});return t.ajax(n)},getParameters:function(e,r,n,i){p(e);var o=t.extend({},i,{type:s,url:v("{baseUrl}/clients/{clientID}/parameters",{clientID:e}),contentType:a,dataType:"json",data:JSON.stringify({report:r,parameterValues:n}),beforeSend:m});return t.ajax(o)},createReportInstance:function(e,r,n,i){p(e);var o=t.extend({},i,{type:s,url:v("{baseUrl}/clients/{clientID}/instances",{clientID:e}),contentType:a,dataType:"json",data:JSON.stringify({report:r,parameterValues:n}),beforeSend:m});return t.ajax(o)},deleteReportInstance:function(e,r,n){p(e);var i=t.extend({},n,{type:l,url:v("{baseUrl}/clients/{clientID}/instances/{instanceID}",{clientID:e,instanceID:r}),beforeSend:m});return t.ajax(i)},createReportDocument:function(e,r,n,o,u,c,l,f){p(e);o=o||{};o["BasePath"]=i;var d=t.extend({},f,{type:s,url:v("{baseUrl}/clients/{clientID}/instances/{instanceID}/documents",{clientID:e,instanceID:r}),contentType:a,dataType:"json",data:JSON.stringify({format:n,deviceInfo:o,useCache:u,baseDocumentID:c,actionID:l}),beforeSend:m});return t.ajax(d)},deleteReportDocument:function(e,r,n,i){p(e);var a=t.extend({},i,{type:l,url:v("{baseUrl}/clients/{clientID}/instances/{instanceID}/documents/{documentID}",{clientID:e,instanceID:r,documentID:n}),beforeSend:m});return t.ajax(a)},getDocumentInfo:function(e,r,n,i){p(e);var a=t.extend({},i,{type:u,url:v("{baseUrl}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/info",{clientID:e,instanceID:r,documentID:n}),dataType:"json",beforeSend:m});return t.ajax(a)},getPage:function(e,r,n,i,a){p(e);var o=t.extend({},a,{type:u,url:v("{baseUrl}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/pages/{pageNumber}",{clientID:e,instanceID:r,documentID:n,pageNumber:i}),dataType:"json",beforeSend:m});return t.ajax(o)},execServerAction:function(e,r,n,i,a){p(e);var o=t.extend({},a,{type:c,url:v("{baseUrl}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/actions/{actionID}",{clientID:e,instanceID:r,documentID:n,actionID:i}),beforeSend:m});return t.ajax(o)},formatDocumentUrl:function(e,t,r,n){var i=v("{baseUrl}/clients/{clientID}/instances/{instanceID}/documents/{documentID}",{clientID:e,instanceID:t,documentID:r});if(n){i+="?"+n}return i},getDocumentFormats:function(e){var r=t.extend({},e,{type:u,url:v("{baseUrl}/formats"),beforeSend:m});return t.ajax(r)},setAccessToken:function(e){d={access_token:e}}}}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery);(function(e,t,r,n,i){"use strict";var a=e.sr;if(!a){throw"Missing telerikReportViewer.sr"}var o=e.utils;if(!o){throw"Missing telerikReportViewer.utils"}var u=e.printManager;if(!u){throw"Missing telerikReportViewer.printManager"}e.ViewModes={INTERACTIVE:"INTERACTIVE",PRINT_PREVIEW:"PRINT_PREVIEW"};e.PrintModes={AUTO_SELECT:"AUTO_SELECT",FORCE_PDF_PLUGIN:"FORCE_PDF_PLUGIN",FORCE_PDF_FILE:"FORCE_PDF_FILE"};var s={pagePollIntervalMs:500,documentInfoPollIntervalMs:2e3};function c(n){var c={},l=t(c),f,d,p,v,m,g,h,E,R,w,T=e.ViewModes.INTERACTIVE,P,b,D=e.PrintModes.AUTO_SELECT,I;k();n=jQuery.extend({},s,n);if(n.settings.printMode){D=n.settings.printMode()}var _=n.serviceClient;if(!_){throw a.noServiceClient}f=n.settings.clientId();function A(e){f=e;n.settings.clientId(f)}function M(){if(T===e.ViewModes.PRINT_PREVIEW){return"HTML5"}return"HTML5Interactive"}function C(){return Boolean(f)}function S(e,r){return function(){var n=t.Deferred();var i=e.apply(this,arguments);t.when(i).then(function(e){n.resolve(e)},function(){var e=Array.prototype.slice.call(arguments).concat(r);n.rejectWith(null,e)});return n.promise()}}function y(e,t,r,n){G(H(e,t,r,n))}function V(){if(f){return f}if(v){return v}v=t.when(_.registerClient()).then(function(e){A(e.clientId);v=null;return t.Deferred().resolve()},function(e,r,n){v=null;return t.Deferred().rejectWith(this,[e,r,n,a.errorRegisteringViewer])});return v}function N(){if(d){return d}if(m){return m}m=x(h,E);t.when(m).done(function(e){O(e.instanceId);m=null}).fail(function(e,t,r){m=null});return m}function k(){p=d=null;R=w=0}function O(e){d=e}function L(e){var t=e.length;if(t==1){return e[0]}if(t>1){return o.stringFormat(e[0],Array.prototype.slice.call(e,1))}return""}function G(){c.error(L(arguments))}function x(e,t){tt();return _.createReportInstance(f,e,t)}function F(e,t,r,n,i){tt();rt();return _.createReportDocument(f,d,e,t,r,n,i)}function U(e,t,n,i,a){if(n==d){_.getDocumentInfo(t,n,i).done(function(o,u,s){if(o&&o.documentReady){e.resolve.apply(e,arguments)}else{e.notify.apply(e,arguments);r.setTimeout(function(){U(e,t,n,i,a)},a.documentInfoPollIntervalMs)}}).fail(function(){e.reject.apply(e,arguments)})}}function B(e,r,n,i){var a=t.Deferred();U(a,e,r,n,i);return a.promise()}function j(e,i,u,s){var c={};function l(t){if(e){p=t;m();R()}}function v(){c.documentInfoPollIntervalMs=n.pagePollIntervalMs;if(e){e.beforeLoadReport()}}function m(){if(e){e.beginLoadReport()}}function g(t){if(e){e.onReportLoadComplete(t)}}function E(t){if(e){w=t.pageCount;e.reportLoadProgress(t)}}function R(){tt();rt();nt();t.when(B(f,d,p,c)).done(function(e){g(e)}).fail(function(e,t,r){T(H(e,t,r))}).progress(function(e){E(e)})}function T(){if(e){e.error(L(arguments))}}function P(e,t){_.getPage(f,d,p,t).done(function(i,a,o){if(i&&i.pageReady){e.resolve.apply(e,arguments)}else{e.notify.apply(e,arguments);r.setTimeout(function(){P(e,t)},n.pagePollIntervalMs)}}).fail(function(){e.reject.apply(e,arguments)})}function b(e){var r=t.Deferred();P(r,e);return r.promise()}function D(t){if(e){e.beginLoadPage(t)}}function I(t,r){c.documentInfoPollIntervalMs=n.documentInfoPollIntervalMs;if(e){e.pageReady(r)}}var A;function C(){if(d)return d;if(A)return A;var e=t.Deferred();A=e.promise();v();var r=M(),n={ContentOnly:true};k(n);t.when(V()).then(S(N,o.stringFormat(a.errorCreatingReportInstance,[h]))).then(S(function(){return F(r,n,i,u,s)},o.stringFormat(a.errorCreatingReportDocument,[h,r]))).then(function(t){return e.resolve(t.documentId)}).then(null,y);t.when(A).done(function(e){l(e);A=null}).fail(function(e){T(e);A=null});return A}function k(e){if(!O()){e["UseSVG"]=false}}function O(){var e=/Version\/(\d+.\d+.\d+) Safari/.exec(navigator.userAgent);if(e&&e.length>1){var t=parseFloat(e[1]);return t>=6}return true}return{beginLoad:function(){C()},beginGetPage:function(e){tt();t.when(C()).then(function(){D(e);return b(e)}).done(function(t){I(e,t)}).fail(function(e,t,r){T(H(e,t,r))})},dispose:function(){e=null}}}function H(e,t,r,n){var i="";if(e){try{var a=JSON.parse(e.responseText);if(a){if(a.message){i=a.message}else if(a.Message){i=a.Message}if(a.exceptionMessage||a.ExceptionMessage){if(i){i+="<br/>"}if(a.exceptionMessage){i+=a.exceptionMessage}else if(a.ExceptionMessage){i+=a.ExceptionMessage}}}}catch(o){return e.responseText}}if(n||r){if(i){i="<br/>"+i}i=(n?n:r)+i}return i}function W(e){if(b){b.beginGetPage(e)}}function Q(e,t,r){if(!h){G(a.noReport);return}if(b){b.dispose();b=null}k();b=new j(c,!e,t,r);b.beginLoad()}function z(){c.exportStarted()}function Y(e){c.exportReady(e)}function X(){c.printStarted()}function J(e){c.printReady(e)}function $(){it();X();var e=q();var t=e?"inline":"attachment";var r="response-content-disposition="+t;Z("PDF",{ImmediatePrint:true}).then(function(e){var t=_.formatDocumentUrl(e.clientId,e.instanceId,e.documentId,r);J({url:t});return t},function(e){G(e)}).then(function(e){u.print(e)})}function q(){switch(D){case e.PrintModes.FORCE_PDF_FILE:case false:return false;case e.PrintModes.FORCE_PDF_PLUGIN:case true:return true;default:return u.getDirectPrintState()}}function K(e,t){it();z();var n="response-content-disposition=attachment";Z(e,t).then(function(e){var t=_.formatDocumentUrl(e.clientId,e.instanceId,e.documentId,n);Y({url:t});return t},function(e){G(e)}).then(function(e){r.open(e,"_self")})}function Z(e,r){it();var i=t.Deferred();var u;t.when(V()).then(S(N,o.stringFormat(a.errorCreatingReportInstance,[h]))).then(S(function(){return F(e,r,true,p)},o.stringFormat(a.errorCreatingReportDocument,[h,e]))).then(S(function(e){u=e.documentId;return B(f,d,e.documentId,n)})).then(function(e){return i.resolve({clientId:f,instanceId:d,documentId:u})}).then(null,y);return i.promise()}function et(e){it();rt();nt();mt();c.refreshReport(false,p,e)}function tt(){if(!C()){throw a.controllerNotInitialized}}function rt(){if(!d){throw a.noReportInstance}}function nt(){if(!p){throw a.noReportDocument}}function it(){if(!h){throw a.noReport}}function at(e){var t;if(e&&e.length){t=e[0]}if(typeof t=="function"){return t}return null}function ot(e,t){var r=at(t);if(r){l.on(e,r)}else{l.trigger(e,t)}return c}function ut(e,r){var n=t.Deferred();t.when(V()).then(S(function(){return _.getParameters(f,e,r||E||{})},a.unableToGetReportParameters)).done(function(e){n.resolve(e)}).fail(function(e,t,r,i){n.reject(H(e,t,r,i))});return n.promise()}function st(){if(P)return P;if(g)return g;g=_.getDocumentFormats().done(function(e){P=e;g=null}).fail(function(){g=null});return g}function ct(e,t){if(e){for(var r=0,n=e.length;r<n;r++){var i=e[r];if(i.id==t){return i.page}else{var a=ct(i.items,t);if(a){return a}}}}return null}function lt(e){var t={};if(Array.isArray(e)){e.forEach(function(e){t[e.Key]=e.Value})}return t}function ft(e){if(n.settings.reportSource){n.settings.reportSource(e)}c.reportSourceChanged()}function dt(e){n.settings.pageNumber(e);c.currentPageChanged()}var pt={toggleVisibility:function(e){et(e.actionId)},navigateToReport:function(e){mt();ut(e.Report,lt(e.ParameterValues)).done(function(r){var n={};t.each(r||[],function(){n[this.name]=this.value});c.reportSource({report:e.Report,parameters:n});c.refreshReport(false)}).fail(function(t){c.reportLoadFail({report:e.Report});G(t)})},navigateToUrl:function(e){r.open(e.Url,e.Target)},navigateToBookmark:function(e){var t=e,r=ct(I,t);c.navigateToPage(r,t)}};function vt(e,t){var n=pt[e];if(typeof n==="function"){r.setTimeout(function(){n(t)},0)}}function mt(){c.serverActionStarted()}c.Events={ERROR:"trv.ERROR",EXPORT_STARTED:"trv.EXPORT_STARTED",EXPORT_DOCUMENT_READY:"trv.EXPORT_DOCUMENT_READY",PRINT_STARTED:"trv.PRINT_STARTED",PRINT_DOCUMENT_READY:"trv.PRINT_DOCUMENT_READY",BEFORE_LOAD_PARAMETERS:"trv.BEFORE_LOAD_PARAMETERS",BEFORE_LOAD_REPORT:"trv.BEFORE_LOAD_REPORT",BEGIN_LOAD_REPORT:"trv.BEGIN_LOAD_REPORT",REPORT_LOAD_COMPLETE:"trv.REPORT_LOAD_COMPLETE",REPORT_LOAD_PROGRESS:"trv.REPORT_LOAD_PROGRESS",REPORT_LOAD_FAIL:"trv.REPORT_LOAD_FAIL",BEGIN_LOAD_PAGE:"trv.BEGIN_LOAD_PAGE",PAGE_READY:"trv.PAGE_READY",VIEW_MODE_CHANGED:"trv.VIEW_MODE_CHANGED",PRINT_MODE_CHANGED:"trv.PRINT_MODE_CHANGED",REPORT_SOURCE_CHANGED:"trv.REPORT_SOURCE_CHANGED",NAVIGATE_TO_PAGE:"trv.NAVIGATE_TO_PAGE",CURRENT_PAGE_CHANGED:"trv.CURRENT_PAGE_CHANGED",GET_DOCUMENT_MAP_STATE:"trv.GET_DOCUMENT_MAP_STATE",SET_DOCUMENT_MAP_VISIBLE:"trv.SET_DOCUMENT_MAP_VISIBLE",GET_PARAMETER_AREA_STATE:"trv.GET_PARAMETER_AREA_STATE",SET_PARAMETER_AREA_VISIBLE:"trv.SET_PARAMETER_AREA_VISIBLE",PAGE_SCALE:"trv.PAGE_SCALE",GET_PAGE_SCALE:"trv.GET_PAGE_SCALE",SERVER_ACTION_STARTED:"trv.SERVER_ACTION_STARTED",TOGGLE_SIDE_MENU:"trv.TOGGLE_SIDE_MENU",UPDATE_UI:"trv.UPDATE_UI",CSS_LOADED:"trv.CSS_LOADED"};t.extend(c,{reportSource:function(e){if(null===e){h=E=null;k();ft(e);return this}else if(e){h=e.report;E=e.parameters;ft(e);return this}else{if(h===null){return null}return{report:h,parameters:t.extend({},E)}}},reportDocumentIdExposed:function(){return p},setParameters:function(e){E=e},pageCount:function(){return w},currentPageNumber:function(e){if(e===i)return R;var t=o.tryParseInt(e);if(t!=R){R=t;dt(t)}return this},viewMode:function(e){var t=c.setViewMode(e);if(typeof t==="string"){return t}if(h){c.refreshReport(false,p)}return c},setViewMode:function(e){if(!e){return T}if(T!=e){T=e;c.viewModeChanged(e)}return c},printMode:function(e){if(!e){return D}if(D!=e){D=e;c.printModeChanged(e)}return c},refreshReport:function(e,t,r){return Q(e,t,r)},exportReport:function(e,t){K(e,t)},printReport:function(){$()},getReportPage:function(e){W(e)},executeReportAction:function(e,t){vt(e,t)},loadParameters:function(e){if(h===null){return{}}c.beforeLoadParameters(e==null);return ut(h,e)},getDocumentFormats:function(){return st()},setAuthenticationToken:function(e){_.setAccessToken(e)},clientId:function(){return f},onReportLoadComplete:function(e){w=e.pageCount;I=e.bookmarkNodes;c.reportLoadComplete(e)},error:function(){return ot(c.Events.ERROR,arguments)},exportStarted:function(){return ot(c.Events.EXPORT_STARTED,arguments)},exportReady:function(){return ot(c.Events.EXPORT_DOCUMENT_READY,arguments)},printStarted:function(){return ot(c.Events.PRINT_STARTED,arguments)},printReady:function(){return ot(c.Events.PRINT_DOCUMENT_READY,arguments)},beforeLoadParameters:function(){return ot(c.Events.BEFORE_LOAD_PARAMETERS,arguments)},beforeLoadReport:function(){return ot(c.Events.BEFORE_LOAD_REPORT,arguments)},beginLoadReport:function(){return ot(c.Events.BEGIN_LOAD_REPORT,arguments)},reportLoadComplete:function(){return ot(c.Events.REPORT_LOAD_COMPLETE,arguments)},reportLoadProgress:function(){return ot(c.Events.REPORT_LOAD_PROGRESS,arguments)},reportLoadFail:function(){return ot(c.Events.REPORT_LOAD_FAIL,arguments)},beginLoadPage:function(){return ot(c.Events.BEGIN_LOAD_PAGE,arguments)},pageReady:function(){return ot(c.Events.PAGE_READY,arguments)},viewModeChanged:function(){return ot(c.Events.VIEW_MODE_CHANGED,arguments)},printModeChanged:function(){return ot(c.Events.PRINT_MODE_CHANGED,arguments)},reportSourceChanged:function(){return ot(c.Events.REPORT_SOURCE_CHANGED,arguments)},navigateToPage:function(){return ot(c.Events.NAVIGATE_TO_PAGE,arguments)},currentPageChanged:function(){return ot(c.Events.CURRENT_PAGE_CHANGED,arguments)},getDocumentMapState:function(){return ot(c.Events.GET_DOCUMENT_MAP_STATE,arguments)},setDocumentMapVisible:function(){return ot(c.Events.SET_DOCUMENT_MAP_VISIBLE,arguments)},getParametersAreaState:function(){return ot(c.Events.GET_PARAMETER_AREA_STATE,arguments)},setParametersAreaVisible:function(){return ot(c.Events.SET_PARAMETER_AREA_VISIBLE,arguments)},scale:function(){return ot(c.Events.PAGE_SCALE,arguments)},getScale:function(){return ot(c.Events.GET_PAGE_SCALE,arguments)},serverActionStarted:function(){return ot(c.Events.SERVER_ACTION_STARTED,arguments)},cssLoaded:function(){return ot(c.Events.CSS_LOADED,arguments)}});return c}e.ReportViewerController=c})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";e.touchBehavior=function(e,r){var n,i;a(e);function a(e){if(typeof t.fn.kendoTouch==="function"){t(e).find(".trv-page-wrapper").mousedown(function(){i=true}).mouseup(function(){i=false}).kendoTouch({multiTouch:true,enableSwipe:true,swipe:function(e){if(!i){l(e)}},gesturestart:function(e){if(!i){u(e)}},gestureend:function(e){if(!i){s(e)}},gesturechange:function(e){if(!i){c(e)}},doubletap:function(e){if(!i){o(e)}},touchstart:function(e){if(!i){d("touchstart")}}})}}function o(e){d("doubletap",e)}function u(e){n=kendo.touchDelta(e.touches[0],e.touches[1]).distance}function s(e){}function c(e){var t=kendo.touchDelta(e.touches[0],e.touches[1]).distance;f({distance:t,lastDistance:n});n=t}function l(e){d("swipe",e)}function f(e){d("pinch",e)}function d(e,t){var n=r[e];if(typeof n==="function"){n(t)}}}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.sr;if(!a){throw"Missing telerikReportViewer.sr"}var o=e.utils;if(!o){throw"Missing telerikReportViewer.utils"}var u=e.domUtils;var s=e.touchBehavior;if(!s){throw"Missing telerikReportViewer.touch"}var c={};var l=e.ScaleModes={FIT_PAGE_WIDTH:"FIT_PAGE_WIDTH",FIT_PAGE:"FIT_PAGE",SPECIFIC:"SPECIFIC"};function f(n,f){f=t.extend({},c,f);var d=f.controller;if(!d)throw"No controller (telerikReportViewer.reportViewerController) has been specified.";var p=t(n),v=p.find(".trv-page-container"),m=v[0],g=p.find(".trv-page-wrapper"),h=g[0],E=p.find(".trv-error-message"),R,w,T=l.SPECIFIC,P=1,b=.1,D=8,I=true,_,A,M,C;t(r).on("resize",function(e,t){if(L()){G()}});O(p);function S(){if(C){r.clearTimeout(C)}}function y(){var e=B(_);if(e){X(e,-1)}}function V(e,t){if(e&&e<=t){j(e,A)}}function N(e,t){if(e){var e=Math.min(e,t);j(e,A)}}function k(){F(M);M=false}d.reportSourceChanged(function(){M=true;_=null;A=null;I=false}).beforeLoadParameters(function(e,t){if(t){Y(a.loadingReport)}}).beforeLoadReport(function(){I=false;if(!_)_=1;S();F();z(true);Y(a.loadingReport)}).beginLoadReport(function(e,t){I=true;y()}).reportLoadProgress(function(e,t){V(_,t.pageCount);Y(o.stringFormat(a.loadingReportPagesInProgress,[t.pageCount]))}).reportLoadComplete(function(e,t){if(0===t.pageCount){k();Y(a.noPageToDisplay)}else{N(_,t.pageCount);Y(o.stringFormat(a.loadedReportPagesComplete,[t.pageCount]));C=r.setTimeout(Y,2e3);q()}}).navigateToPage(function(e,t,r){j(t,r)}).pageReady(function(e,t){rt(t);z(false)}).error(function(e,t){z(false);k();Y(t)}).exportStarted(function(e,t){Y(a.preparingDownload)}).exportReady(function(e,t){Y()}).printStarted(function(e,t){Y(a.preparingPrint)}).printReady(function(e,t){Y()}).scale(function(e,t){x(t)}).getScale(function(e,r){var n=U();var i=t(n).data("pageScale")||P;r.scale=i;r.scaleMode=T}).setDocumentMapVisible(function(){if(L()){G()}}).setParametersAreaVisible(function(){if(L()){G()}}).serverActionStarted(function(){z(true);Y(a.loadingReport)});function O(r){var n,i;s(r,{swipe:function(e){var t=d.currentPageNumber();if(n&&e.direction=="left"){if(t<d.pageCount()){d.navigateToPage(t+1)}}else if(i&&e.direction=="right"){if(t>1){d.navigateToPage(t-1)}}},pinch:function(r){var n=U();var i=t(n).data("pageScale")||P;var a=r.distance/r.lastDistance;x({scale:i*a,scaleMode:e.ScaleModes.SPECIFIC})},doubletap:function(e){f.commands.toggleZoomMode.exec()},touchstart:function(e){var t=h;i=0==t.scrollLeft;n=t.scrollWidth-t.offsetWidth==t.scrollLeft}})}function L(){return-1!=[l.FIT_PAGE,l.FIT_PAGE_WIDTH].indexOf(T)}function G(){for(var e=0,t=m.childNodes,r=t.length;e<r;e++){$(t[e],T,P)}}function x(e){T=e.scaleMode||T;var t=P;if("scale"in e){t=e.scale}P=Math.max(b,Math.min(D,t));G()}function F(e){K();w=i;if(e){g.empty()}Y()}function U(){return B(d.currentPageNumber())}function B(e){var t;v.children().each(function(r,n){if(X(n)==e){t=n}return!t});return t}function j(e,t){if(I){W(e,t)}else{H(e,t)}}function H(e,t){_=e;A=t}function W(e,t){var r=B(e);if(r){if(t){Q(t)}}else{w=t;J(e)}}function Q(e){if(e){var r=v.find("[data-bookmark-id="+e+"]")[0];if(r){var n=v[0],i=0,a=0;while(r!=n){if(t(r).is(".trv-page-wrapper")){var o=t(r).data("pageScale");if(typeof o==="number"){i*=o;a*=o}}i+=r.offsetTop;a+=r.offsetLeft;r=r.offsetParent}n.scrollTop=i;n.scrollLeft=a}}}function z(e){(e?t.fn.addClass:t.fn.removeClass).call(p,"loading")}function Y(e){E.html(e);(e?t.fn.addClass:t.fn.removeClass).call(p,"error")}function X(e,r){var n=e.$?e:t(e),a="pageNumber";if(r===i){return n.data(a)}n.data(a,r);return e}function J(e){z(true);r.setTimeout(d.getReportPage.bind(d,e),1);_=null}function $(e,r,n){var a=t(e),o=a.find("div.trv-report-page"),s=a.find("div.sheet"),c=s[0];if(!c)return;var f,d,p=a.data("box");if(!p){var v=u.getMargins(a),g=u.getBorderWidth(o),h=u.getPadding(o);p={padLeft:v.left+g.left+h.left,padRight:v.right+g.right+h.right,padTop:v.top+g.top+h.top,padBottom:v.bottom+g.bottom+h.bottom};a.data("box",p)}if(a.data("pageWidth")===i){f=c.offsetWidth;d=c.offsetHeight;a.data("pageWidth",f);a.data("pageHeight",d)}else{f=a.data("pageWidth");d=a.data("pageHeight")}var E=d>f&&r==l.FIT_PAGE_WIDTH?20:0,R=(m.clientWidth-E-p.padLeft-p.padRight)/f,w=(m.clientHeight-1-p.padTop-p.padBottom)/d;if(r==l.FIT_PAGE_WIDTH){n=R}else if(!n||r==l.FIT_PAGE){n=Math.min(R,w)}a.data("pageScale",n);u.scale(s,n,n);o.css("height",n*d).css("width",n*f)}function q(){v.on("click","[data-reporting-action]",Z)}function K(){v.off("click","[data-reporting-action]",Z)}function Z(){var e=t(this);var r=e.attr("data-reporting-action");var n=et(r);if(n){var i=n.Value||{};i.actionId=r;_=d.currentPageNumber();d.executeReportAction(n.Type,i)}}function et(e){if(R){var r;t.each(R,function(){if(this.Id==e){r=this}return r===i});return r}return null}function tt(e){var r="trv-"+d.clientId()+"-styles";t("#"+r).remove();var n=t("<style id="+r+"></style>");n.append(e.pageStyles);n.appendTo("head")}function rt(r){R=JSON.parse(r.pageActions);tt(r);var n=t(t.parseHTML(r.pageContent)),i=n.find("div.sheet"),a=t('<div class="trv-report-page"></div>');i.css("margin",0);a.append(i).append(t('<div class="trv-page-overlay"></div>'));var o=r.pageNumber;var u=g.empty().removeData().data("pageNumber",o).append(a);d.currentPageNumber(o);if(d.viewMode()==e.ViewModes.INTERACTIVE){p.removeClass("printpreview");p.addClass("interactive")}else{p.removeClass("interactive");p.addClass("printpreview")}$(u,T,P);Q(w)}}var d="telerik_ReportViewer_PagesArea";t.fn[d]=function(e){return this.each(function(){if(!t.data(this,d)){t.data(this,d,new f(this,e))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a={};function o(e,r,n){r=t.extend({},a,r,n);var i=r.controller;if(!i){throw"No controller (telerikReporting.reportViewerController) has been specified."}var o=t(e),u;var s=r.documentMapVisible!==false;c();function c(){u=t("<div></div>");u.appendTo(e);R()}function l(e){var t=this.dataItem(e.node),r=t.page,n=t.id;i.navigateToPage(r,n)}function f(){d([])}function d(e){var r=e&&!t.isEmptyObject(e);var n=u.data("kendoTreeView");if(!n){u.kendoTreeView({dataTextField:"text",select:l});n=u.data("kendoTreeView")}n.setDataSource(e);E(r)}function p(){var e={};i.getDocumentMapState(e);return e.visible}function v(){o.addClass("loading")}function m(){o.removeClass("loading")}var g=null;var h=false;function E(e){(e?t.fn.removeClass:t.fn.addClass).call(o,"hidden")}function R(){i.beginLoadReport(function(){v();var e=i.reportSource().report;var t=g!==e||!p();g=e;if(t){f()}}).reportLoadComplete(function(e,t){if(t.documentMapAvailable){h=true;d(t.bookmarkNodes);i.setDocumentMapVisible({enabled:true,visible:s})}else{h=false;E(false)}m()}).error(function(e,t){m();f()}).getDocumentMapState(function(e,t){t.enabled=h;t.visible=s}).setDocumentMapVisible(function(e,t){s=t.visible;E(t.visible&&h)})}}var u="telerik_ReportViewer_DocumentMapArea";t.fn[u]=function(e,r){return this.each(function(){if(!t.data(this,u)){t.data(this,u,new o(this,e,r))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";e.ParameterTypes={INTEGER:"System.Int64",FLOAT:"System.Double",STRING:"System.String",DATETIME:"System.DateTime",BOOLEAN:"System.Boolean"};e.parameterEditorsMatch={MultiSelect:function(e){return Boolean(e.availableValues)&&e.multivalue},SingleSelect:function(e){return Boolean(e.availableValues)&&!e.multivalue},MultiValue:function(e){return Boolean(e.multivalue)},DateTime:function(t){return t.type===e.ParameterTypes.DATETIME},String:function(t){return t.type===e.ParameterTypes.STRING},Number:function(t){switch(t.type){case e.ParameterTypes.INTEGER:case e.ParameterTypes.FLOAT:return true;default:return false}},Boolean:function(t){return t.type===e.ParameterTypes.BOOLEAN},Default:function(e){return true}};var a=e.sr,o=e.utils;var u=function(){var e="\n";return{formatValue:function(t){var r="";if(t){[].concat(t).forEach(function(t){if(r.length>0){r+=e}r+=t})}return r},parseValues:function(t){return(""+t).split(e)}}}();function s(e){function r(e){return/^(\-|\+)?([0-9]*)$/.test(e)}function n(n){if(o.isSpecialKey(n.keyCode)){return true}return r(t(e).val()+String.fromCharCode(n.charCode))}function i(e){}function a(e){t(e).on("keypress",n).on("paste",i)}function u(e){t(e).off("keypress",n).off("paste",i)}a(e);return{dispose:function(){u(e)}}}function c(e){function r(e){return/^(\-|\+)?([0-9]*(\.[0-9]*)?)$/.test(e)}function n(n){if(o.isSpecialKey(n.keyCode)){return true}return r(t(e).val()+String.fromCharCode(n.charCode))}function i(e){}function a(e){t(e).on("keypress",n).on("paste",i)}function u(e){t(e).off("keypress",n).off("paste",i)}a(e);return{dispose:function(){u(e)}}}function l(e,r,n){var i=e?t.fn.addClass:t.fn.removeClass;i.call(n,r)}function f(e,t){l(!t,"k-state-disabled",e)
}function d(e,t){l(t,"k-state-selected",e)}e.parameterEditors=[{match:e.parameterEditorsMatch.MultiSelect,createEditor:function(e,n){var i=t(e);var a=true;i.html(n.templates["trv-parameter-editor-available-values-multiselect"]);var u=i.find(".list"),s=i.find(".select-all"),c=i.find(".select-none"),l,p,v,m=n.parameterChanged,g;s.click(function(e){e.preventDefault();if(!a)return;b(p.availableValues.map(function(e){return e.value}))});c.click(function(e){e.preventDefault();if(!a)return;b([])});function h(e){if(g){E(e)}var r=e.length==0;(r?t.fn.show:t.fn.hide).call(s);(!r?t.fn.show:t.fn.hide).call(c)}function E(e){var n=p.availableValues,i=t.map(e,function(e){return n[t(e).index()].value});if(v){r.clearTimeout(v)}var a=!p.autoRefresh&&!p.childParameters;v=r.setTimeout(function(){m(p,i);v=null},a?0:1e3)}function R(){return t(l.element).find(".k-state-selected")}function w(){if(!a)return;t(this).toggleClass("k-state-selected");h(R())}function T(){b(p.value);t(l.element).on("click",".listviewitem",w);g=true}function P(){g=false;if(l){t(l.element).off("click",".listviewitem",w)}}function b(e){D(e);h(R())}function D(e){if(!Array.isArray(e)){e=[e]}var r=l.element.children();t.each(p.availableValues,function(n,i){var a=false;t.each(e,function(e,t){var r=i.value;if(t instanceof Date){r=o.parseToLocalDate(i.value)}a=o.areEqual(t,r);return!a});d(t(r[n]),a)})}return{beginEdit:function(e){P();p=e;u.kendoListView({template:'<div class="listviewitem">${name}</div>',dataSource:{data:p.availableValues},selectable:false});l=u.data("kendoListView");T()},enable:function(e){a=e;f(u,a)}}}},{match:e.parameterEditorsMatch.SingleSelect,createEditor:function(e,r){var n=t(e);var i=true;n.html(r.templates["trv-parameter-editor-available-values"]);var a=n.find(".list"),u=n.find(".select-none"),s,c,l=r.parameterChanged;if(u){u.click(function(e){e.preventDefault();s.clearSelection()})}function d(e){p(e)}function p(e){var r=c.availableValues,n=t.map(e,function(e){return r[t(e).index()].value});if(Array.isArray(n)){n=n[0]}l(c,n)}function v(){return s.select()}function m(){d(v())}function g(){E(c.value);s.bind("change",m)}function h(){if(s){s.unbind("change",m)}}function E(e){var r=s.element.children();t.each(c.availableValues,function(t,n){var i=n.value;if(e instanceof Date){i=o.parseToLocalDate(n.value)}if(o.areEqual(e,i)){s.select(r[t]);return false}return true})}return{beginEdit:function(e){h();c=e;if(u&&!e.allowNull){u.hide()}a.kendoListView({template:'<div class="listviewitem">${name}</div>',dataSource:{data:c.availableValues},selectable:true});s=a.data("kendoListView");g()},enable:function(e){i=e;f(a,i);if(i){s.bind("change",m);a.addClass("k-selectable")}else{s.unbind("change",m);a.removeClass("k-selectable")}}}}},{match:e.parameterEditorsMatch.MultiValue,createEditor:function(e,r){var n=t(e),i;n.html(r.templates["trv-parameter-editor-multivalue"]);var a=n.find("textarea").on("change",function(){if(r.parameterChanged){r.parameterChanged(i,u.parseValues(this.value))}});function o(e){i.value=e;a.val(u.formatValue(e))}return{beginEdit:function(e){i=e;o(e.value)},enable:function(e){f(a,e);a.prop("disabled",!e)}}}},{match:e.parameterEditorsMatch.DateTime,createEditor:function(e,r){var n=t(e),i;n.html(r.templates["trv-parameter-editor-datetime"]);var a=n.find("input[type=datetime]").kendoDatePicker({change:function(){var e=r.parameterChanged;if(e){var t=this.value();if(null!==t){t=o.adjustTimezone(t)}e(i,t)}}});var u=a.data("kendoDatePicker");function s(e){i.value=e;var t=null;try{if(e){t=o.unadjustTimezone(e)}}catch(r){t=null}u.value(t)}return{beginEdit:function(e){i=e;s(e.value)},enable:function(e){u.enable(e);f(a,e)}}}},{match:e.parameterEditorsMatch.String,createEditor:function(e,r){var n=t(e),i;n.html(r.templates["trv-parameter-editor-text"]);var a=n.find('input[type="text"]').change(function(){if(r.parameterChanged){r.parameterChanged(i,a.val())}});function o(e){i.value=e;a.val(e)}return{beginEdit:function(e){i=e;o(e.value)},enable:function(e){a.prop("disabled",!e);f(a,e)}}}},{match:e.parameterEditorsMatch.Number,createEditor:function(r,n){var i=t(r),a,o;i.html(n.templates["trv-parameter-editor-number"]);var u=i.find("input[type=number]").on("change",function(){if(n.parameterChanged){n.parameterChanged(a,u.val())}});function l(e){a.value=e;u.val(e)}return{beginEdit:function(t){if(o){o.dispose()}a=t;u.val(a.value);if(a.type===e.ParameterTypes.INTEGER){o=s(u)}else{o=c(u)}},enable:function(e){u.prop("disabled",!e);f(u,e)}}}},{match:e.parameterEditorsMatch.Boolean,createEditor:function(e,r){var n=t(e),i;n.html(r.templates["trv-parameter-editor-boolean"]);var a=n.find("input[type=checkbox]").on("change",function(){if(r.parameterChanged){r.parameterChanged(i,this.checked)}});function o(e){i.value=e;a[0].checked=e===true}return{beginEdit:function(e){i=e;o(e.value)},enable:function(e){f(a,e);a.attr("disabled",!e)}}}},{match:e.parameterEditorsMatch.Default,createEditor:function(e,r){var n=t(e);n.html('<div class="trv-parameter-editor-generic"></div>');return{beginEdit:function(e){n.find(".trv-parameter-editor-generic").html(e.Error?"(error)":e.value)},enable:function(e){}}}}]})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.sr,o=e.utils;e.parameterValidators=function(){var r={};function n(e,t,r,n){var i=[].concat(t).map(function(t){return s(e,r(t),n)});if(e.multivalue){return i}return i[0]}function u(e,t){return e.allowNull&&-1!=[null,"",i].indexOf(t)}function s(e,r,n){if(e.availableValues){var i=false;t.each(e.availableValues,function(e,t){i=n(r,t.value);return!i});if(!i){if(e.allowNull&&!r){return r}throw a.invalidParameter}}return r}r[e.ParameterTypes.STRING]={validate:function(e,t){return n(e,t,function(t){if(!t){if(e.allowNull){return null}if(e.allowBlank){return""}throw a.parameterIsEmpty}return t},function(e,t){return e==t})}};r[e.ParameterTypes.FLOAT]={validate:function(e,t){return n(e,t,function(t){var r=o.tryParseFloat(t);if(isNaN(r)){if(u(e,t)){return null}throw a.parameterIsEmpty}return r},function(e,t){return o.tryParseFloat(e)==o.tryParseFloat(t)})}};r[e.ParameterTypes.INTEGER]={validate:function(e,t){return n(e,t,function(t){var r=o.tryParseInt(t);if(isNaN(r)){if(u(e,t)){return null}throw a.parameterIsEmpty}return r},function(e,t){return o.tryParseInt(e)==o.tryParseFloat(t)})}};r[e.ParameterTypes.DATETIME]={validate:function(e,t){return n(e,t,function(t){if(e.allowNull&&(t===null||t===""||t===i)){return null}if(!isNaN(Date.parse(t))){return o.parseToLocalDate(t)}throw a.invalidDateTimeValue},function(e,t){e=o.parseToLocalDate(e);t=o.parseToLocalDate(t);return e.getTime()==t.getTime()})}};r[e.ParameterTypes.BOOLEAN]={validate:function(e,t){return n(e,t,function(t){if(-1!=["true","false"].indexOf((""+t).toLowerCase())){return Boolean(t)}if(u(e,t)){return null}throw a.parameterIsEmpty},function(e,t){return Boolean(e)==Boolean(t)})}};return{validate:function(e,t){var n=r[e.type];if(!n){throw o.stringFormat(a.cannotValidateType,e)}return n.validate(e,t)}}}()})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.sr,o=e.utils,u=e.parameterValidators;var s={};var c={PARAMETERS_READY:"pa.parametersReady",ERROR:"pa.Error"};function l(r,n,o){n=t.extend({},s,n,o);var l={};var f=t(l);var d=n.controller;if(!d){throw"No controller (telerikReporting.reportViewerController) has been specified."}var p=[].concat(n.parameterEditors,e.parameterEditors);var v,m,g=i;var h=t(r),E=h.find(".trv-parameters-area-content"),R=h.find(".trv-error-message"),w=h.find(".trv-parameters-area-preview-button"),T=h.html();w.on("click",function(e){e.preventDefault();if(y()){N()}});var P=n.templates["trv-parameter"];var b=n.parametersAreaVisible!==false;function D(){return t(P)}function I(e){var r=D(),i=r.find(".trv-parameter-value"),a=r.find(".trv-parameter-title"),o=r.find(".trv-parameter-error"),s=r.find(".trv-parameter-error-message"),c=r.find(".trv-parameter-use-default input"),l=A(e);var f=e.text;var d=!e.isVisible;if(d){f+="<br />[<b>hidden</b>]"}a.html(f).attr("title",f);s.html(e.Error);(e.Error?t.fn.show:t.fn.hide).call(o);var p=l.createEditor(i,{templates:n.templates,parameterChanged:function(e,t){try{t=u.validate(e,t);o.hide();x(e,t)}catch(r){e.Error=r;s.html(r);o.show();_(false)}}});p.beginEdit(e);if(c.length>0){c.on("click",function(){var r=t(this).is(":checked");if(r){delete v[e.id];delete g[e.id];G(e);z(v,J)}else{v[e.id]=e.value;g[e.id]=e.value}p.enable(!r);O()});var m=g!=null;if(m){if(!(e.id in g)){c.prop("checked",true);p.enable(false)}}else if(d){c.prop("checked",true);p.enable(false)}}return r}function _(e){if(e){w.prop("disabled",false);w.removeClass("k-state-disabled")}else{w.prop("disabled",true);w.addClass("k-state-disabled")}}function A(e){var r;t.each(p,function(){if(this&&this.match(e)){r=this}return!r});return r}function M(e){R.html(e);(e?t.fn.addClass:t.fn.removeClass).call(h,"error")}function C(){(S(m)?t.fn.removeClass:t.fn.addClass).call(h,"preview")}function S(){var e=true;t.each(m,function(){return e=!this.isVisible||this.autoRefresh});return e}function y(){var e=true;t.each(m,function(){return e=!this.Error});return e}function V(e){v={};m=e||[];var r,o=t("<div></div>");t.each(m,function(){try{this.value=u.validate(this,this.value)}catch(e){this.Error=this.Error||e}var t=Boolean(this.Error),i=!t;if(i){v[this.id]=this.value}else{this.Error=a.invalidParameter}if(this.isVisible||n.showHiddenParameters){if(r=I(this)){o.append(r)}}});if(g!==i){if(null==g){g={};t.each(m,function(){if(this.isVisible){g[this.id]=this.value}else{delete v[this.id]}})}else{t.each(m,function(){if(!(this.id in g)){delete v[this.id]}})}}E.empty();if(m.length>0){E.append(o.children())}else{E.append(T)}C(m)}function N(){d.setParameters(v);d.refreshReport(false)}function k(){var e=true;for(var t=m.length-1;e&&t>=0;t--){var r=m[t];e=r.id in v&&(Boolean(r.autoRefresh)||!r.isVisible)}return e}function O(){l.parametersReady(v)}function L(){O();if(k()){N()}}function G(e){if(e.childParameters){t.each(e.childParameters,function(e,t){var r=F(t);if(r){G(r)}delete v[t]})}}function x(e,t){delete e["Error"];e.value=t;v[e.id]=t;if(g!==i){if(e.id in g){v[e.id]=t}}else{v[e.id]=t}G(e);if(e.childParameters){z(v,L)}else{var r=y();_(r);if(r){L()}}}function F(e){if(m){for(var t=0;t<m.length;t++){var r=m[t];if(r.id===e){return r}}}return null}function U(e){d.setParametersAreaVisible({visible:e})}function B(e){if(!e||null===e){return false}var r=false;t.each(e,function(){r=this.isVisible;return!r});return r}var j=0;function H(){j++;h.addClass("loading")}function W(){if(j>0){if(0==--j){h.removeClass("loading")}}}function Q(e,t){var r=B(e)&&b;if(!r){$(false)}V(e);M("");if(r){$(true)}t();W()}function z(e,r){H();t.when(d.loadParameters(e)).done(function(e){Q(e,r)}).fail(function(e){W();q();if(h.hasClass("hidden")){d.error(e)}else{M(e)}l.error(e)})}function Y(e){var t;if(e&&e.length){t=e[0]}if(typeof t=="function"){return t}return null}function X(e,t){var r=Y(t);if(r){f.on(e,r)}else{f.trigger(e,t)}return d}function J(){if(g===null){g=t.extend({},v)}O()}function $(e){(e?t.fn.removeClass:t.fn.addClass).call(h,"hidden")}d.reportSourceChanged(function(){M();E.empty();z(null,J)}).getParametersAreaState(function(e,t){var r=false;if(m){r=B(m)}t.enabled=r;t.visible=b}).setParametersAreaVisible(function(e,t){b=t.visible;$(t.visible&&B(m))}).beforeLoadReport(function(){j=0;H()}).error(function(){W()}).pageReady(function(){W()});function q(){V([])}t.extend(l,{allParametersValid:function(){return y()},clear:function(){q()},error:function(){return X(c.ERROR,arguments)},parametersReady:function(){return X(c.PARAMETERS_READY,arguments)},setParameters:function(e){g=null===e?null:t.extend({},e)}});return l}var f="telerik_ReportViewer_ParametersArea";t.fn[f]=function(e,r){return this.each(function(){if(!t.data(this,f)){t.data(this,f,new l(this,e,r))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.utils;if(!a){throw"Missing telerikReporting.utils"}function o(n){var i={ExportInProgress:1<<0,PrintInProgress:1<<1};function a(e){return(c&e)!=0}function o(e,t){if(t){c|=e}else{c&=~e}}var u=n.controller,s=n.history,c=0,l,f=n.commands,d=t(u);if(!u){throw"No controller (telerikReporting.ReportViewerController) has been specified."}function p(){var e={};u.getDocumentMapState(e);return e}function v(){var e={};u.getParametersAreaState(e);return e}function m(){if(!l){l=true;r.setTimeout(function(){try{g()}finally{l=false}},10)}}function g(){var t=u.reportSource();var r=u.pageCount();var n=u.currentPageNumber();var o=t&&t.report;var c=o&&r>0;var l=c&&n<r;var m=c&&n>1;var g=c&&n;var h=p();var E=v();f.goToFirstPage.enabled(m);f.goToPrevPage.enabled(m);f.goToLastPage.enabled(l);f.goToNextPage.enabled(l);f.goToPage.enabled(c);f.print.enabled(c&&!a(i.PrintInProgress));f.export.enabled(c&&!a(i.ExportInProgress));f.refresh.enabled(o);f.historyBack.enabled(s&&s.canMoveBack());f.historyForward.enabled(s&&s.canMoveForward());f.toggleDocumentMap.enabled(o&&h.enabled).checked(h.enabled&&h.visible);f.toggleParametersArea.enabled(o&&E.enabled).checked(E.enabled&&E.visible);f.togglePrintPreview.enabled(c).checked(u.viewMode()==e.ViewModes.PRINT_PREVIEW);f.zoom.enabled(g);f.zoomIn.enabled(g);f.zoomOut.enabled(g);f.toggleZoomMode.enabled(g);d.trigger(u.Events.UPDATE_UI,null);try{d.trigger("pageNumber",n).trigger("pageCount",r)}finally{}}function h(){var e={};u.getScale(e);return e.scaleMode}u.scale(function(t,r){f.toggleZoomMode.checked(r.scaleMode==e.ScaleModes.FIT_PAGE)});u.currentPageChanged(m);u.beforeLoadReport(m);u.reportLoadProgress(m);u.reportLoadComplete(m);u.reportSourceChanged(m);u.viewModeChanged(m);u.setParametersAreaVisible(m);u.setDocumentMapVisible(m);u.exportStarted(function(){o(i.ExportInProgress,true);m()});u.exportReady(function(){o(i.ExportInProgress,false);m()});u.printStarted(function(){o(i.PrintInProgress,true);m()});u.printReady(function(){o(i.PrintInProgress,false);m()});u.error(function(){o(i.ExportInProgress,false);o(i.PrintInProgress,false);m()});m()}e.uiController=o})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.utils;if(!a){throw"Missing telerikReporting.utils"}e.HistoryManager=function(e){var t=e.controller;if(!t){throw"No controller (telerikReporting.reportViewerController) has been specified."}var r=e.settings,n=r.history()||{records:[],position:-1};t.beforeLoadReport(function(){l()}).currentPageChanged(function(){c()}).reportSourceChanged(function(e){var t=e.target.reportSource();if(t===null){i()}}).reportLoadFail(function(e,r){if(r.report){t.reportSource(null)}}).error(function(){var e=o();if(e){e.temp=true}});function i(){var e=o();if(e!==null){l();o().temp=true;s()}}function o(){var e=n.records;if(e.length>0){return e[n.position]}return null}function u(e){var t=n.records,r=n.position;t=Array.prototype.slice.call(t,0,r+1);t.push(e);n.records=t;n.position=t.length-1;s()}function s(){r.history(n)}function c(){var e=o();if(e){e.pageNumber=t.currentPageNumber();e.viewMode=t.viewMode();e.reportDocumentId=t.reportDocumentIdExposed();s()}}function l(){v();var e=o();var r=t.reportSource();if(e&&e.temp){e.reportSource=r;delete e["temp"]}else if(!e||!a.reportSourcesAreEqual(e.reportSource,r)){u({reportSource:r,pageNumber:1})}}function f(e){t.setViewMode(e.viewMode);t.reportSource(e.reportSource);t.refreshReport(false,e.reportDocumentId);t.navigateToPage(e.pageNumber)}function d(e){var t=n.position,r=n.records.length,i=t+e;return 0<=i&&i<r}function p(e){var t=n.position,r=n.records.length,i=t+e;if(i<0){i=0}else if(i>=r){i=r-1}if(i!=t){n.position=i;s();f(o())}}function v(){for(var e=n.records.length-1;e>=0;e--){if(n.records[e].temp===true){n.records.splice(e,1);if(n.position>=e){n.position--}}}}return{back:function(){p(-1)},forward:function(){p(+1)},canMoveBack:function(){return d(-1)},canMoveForward:function(){return d(1)},loadCurrent:function(){var e=o();if(e){f(e)}return Boolean(e)}}}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.utils;if(!a){throw"Missing telerikReporting.utils"}var o={};o[e.ScaleModes.FIT_PAGE]={scaleMode:e.ScaleModes.FIT_PAGE_WIDTH};o[e.ScaleModes.FIT_PAGE_WIDTH]={scaleMode:e.ScaleModes.SPECIFIC,scale:1};o[e.ScaleModes.SPECIFIC]={scaleMode:e.ScaleModes.FIT_PAGE};var u=[.1,.25,.5,.75,1,1.5,2,4,8];function s(r){var n=r.controller;if(!n){throw"No options.controller."}var i=r.history;if(!i){throw"No options.history."}function a(){var e={};n.getDocumentMapState(e);return Boolean(e.visible)}function s(){var e={};n.getParametersAreaState(e);return Boolean(e.visible)}return{historyBack:new c(function(){i.back()}),historyForward:new c(function(){i.forward()}),goToPrevPage:new c(function(){n.navigateToPage(n.currentPageNumber()-1)}),goToNextPage:new c(function(){n.navigateToPage(n.currentPageNumber()+1)}),goToFirstPage:new c(function(){n.navigateToPage(1)}),goToLastPage:new c(function(){n.navigateToPage(n.pageCount())}),goToPage:new c(function(e){if(!isNaN(e)){var t=n.pageCount();if(e>t){e=t}else if(e<1){e=1}n.navigateToPage(e);return e}}),refresh:new c(function(){n.refreshReport(true)}),"export":new c(function(e){if(e){n.exportReport(e)}}),print:new c(function(){n.printReport()}),togglePrintPreview:new c(function(){n.viewMode(n.viewMode()==e.ViewModes.PRINT_PREVIEW?e.ViewModes.INTERACTIVE:e.ViewModes.PRINT_PREVIEW)}),toggleDocumentMap:new c(function(){n.setDocumentMapVisible({visible:!a()})}),toggleParametersArea:new c(function(){n.setParametersAreaVisible({visible:!s()})}),zoom:new c(function(e){n.scale({scale:1})}),zoomIn:new c(function(){l(1)}),zoomOut:new c(function(){l(-1)}),toggleSideMenu:new c(function(){t(n).trigger(n.Events.TOGGLE_SIDE_MENU)}),toggleZoomMode:new c(function(){var e={};n.getScale(e);n.scale(o[e.scaleMode])})};function l(t){var r={};n.getScale(r);r.scale=f(r.scale,t);r.scaleMode=e.ScaleModes.SPECIFIC;n.scale(r)}function f(e,t){var r=-1,n=u.length;for(var i=0;i<n;i++){var a=u[i];if(e<a){r=i-.5;break}if(e==a){r=i;break}}r=r+t;if(t>=0){r=Math.round(r-.49)}else{r=Math.round(r+.49)}if(r<0){r=0}else if(r>n-1){r=n-1}return u[r]}}e.CommandSet=s;function c(e){var r=true;var n=false;var i={enabled:function(e){if(arguments.length==0){return r}var n=Boolean(e);r=n;t(this).trigger("enabledChanged");return i},checked:function(e){if(arguments.length==0){return n}var r=Boolean(e);n=r;t(this).trigger("checkedChanged");return i},exec:e};return i}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.sr;if(!a){throw"Missing telerikReportViewer.sr"}var o=e.utils;if(!o){throw"Missing telerikReporting.utils"}function u(e,n){var i=t(e).data("kendoMenu"),u,s,c=n.controller;if(!i){l()}function l(){t(r).resize(function(){f()});i=t(e).kendoMenu().data("kendoMenu"),i.bind("open",d);r.setTimeout(f,100)}function f(){if(!s)s=e.childNodes;for(var r=s.length-1;r>=0;r--){var n=s[r];if(n.style){var i=n.style;var a=i.display!=="none";if(!a){i.display=""}var o=t(n).parents(".trv-report-viewer").length>0;if(o){if(n.offsetTop>0){i.display="none"}else{if(a){break}}}}}}function d(e){var r=t(e.item);if(r.children("ul[data-command-list=export-format-list]").length>0){p(r)}}function p(e){if(!u){m(e)}}function v(r){t(e).find("ul[data-command-list=export-format-list]").each(function(){var e=t(this),n=e.parents("li"),a=e.children("li");t.each(r,function(){var e=this;var t=o.stringFormat('<li><a href="#" data-command="telerik_ReportViewer_export" data-command-parameter="{name}"><span>{localizedName}</span></a></li>',e);i.append(t,n)});a.each(function(){i.remove(t(this))})})}function m(e){u=true;i.append({text:a.loadingFormats},e);t.when(c.getDocumentFormats()).done(function(e){u=false;r.setTimeout(function(){v(e)},0);i.unbind("open",d)}).fail(function(){u=false})}c.cssLoaded(f)}var s="telerik_ReportViewer_MainMenu";t.fn[s]=function(e){return this.each(function(){if(!t.data(this,s)){t.data(this,s,new u(this,e))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.sr;if(!a){throw"Missing telerikReportViewer.sr"}var o=e.utils;if(!o){throw"Missing telerikReporting.utils"}var u,s,c;function l(e,n){i(e);function i(e){c=t(e).children("ul").kendoPanelBar().data("kendoPanelBar");c.bind("expand",l);v(e);t(e).click(function(r){if(r.target==e){t(n.controller).trigger(n.controller.Events.TOGGLE_SIDE_MENU)}})}function l(e){var r=t(e.item);if(r.children("ul[data-command-list=export-format-list]").length>0){f(r)}}function f(e){if(!u){p(e)}}function d(r){t(e).find("ul[data-command-list=export-format-list]").each(function(){var e=t(this),n=e.parents("li"),i=e.children("li");t.each(r,function(e){var t=this;var r=o.stringFormat('<li><a href="#" data-command="telerik_ReportViewer_export" data-command-parameter="{name}"><span>{localizedName}</span></a></li>',t);c.append(r,n)});v(n);i.each(function(){c.remove(t(this))})})}function p(e){u=true;c.append({text:a.loadingFormats},e);t.when(n.controller.getDocumentFormats()).done(function(e){s=true;u=false;r.setTimeout(function(){d(e)},0);c.unbind("expand",l)}).fail(function(){u=false})}function v(e){t(e).find("li").each(function(){var e=t(this).children("ul").length==0;if(e){t(this).children("a").click(function(){t(n.controller).trigger(n.controller.Events.TOGGLE_SIDE_MENU)})}})}}var f="telerik_ReportViewer_SideMenu";t.fn[f]=function(e){return this.each(function(){if(!t.data(this,f)){t.data(this,f,new l(this,e))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";var a=e.utils;if(!a){throw"Missing telerikReportViewer.utils"}e.binder={bind:function(e){var r=Array.prototype.slice.call(arguments,1);o(e,r);t('[data-role^="telerik_ReportViewer_"]').each(function(){var e=t(this),n=t.fn[e.attr("data-role")];if(typeof n==="function"){n.apply(e,r)}})}};function o(r,i){var a=i[0].commands,o=i[1],s='[data-command^="telerik_ReportViewer_"]',c="[data-target-report-viewer]"+s;r.on("click",s,l);if(!e.GlobalSettings.CommandHandlerAttached){t(n.body).on("click",c,f);e.GlobalSettings.CommandHandlerAttached=true}t.each(a,function(e,t){u(e,t,o,r)});function l(e){var r=t(this).attr("data-command");if(r){var n=r.substring("telerik_ReportViewer_".length),i=a[n];if(i.enabled()){i.exec(t(this).attr("data-command-parameter"))}e.preventDefault()}}function f(e){var r=t(this),n=r.attr("data-command"),i=r.attr("data-target-report-viewer");if(n&&i){var a=n.substring("telerik_ReportViewer_".length),o=t(i).data("telerik_ReportViewer"),u=o.commands[a];if(u.enabled()){u.exec(t(this).attr("data-command-parameter"))}e.preventDefault()}}}function u(e,r,n,i){if(r){var a='[data-command="telerik_ReportViewer_'+e+'"]',o='[data-target-report-viewer="'+n.selector+'"]'+a,u=i.find(a),s=t(o);t(r).on("enabledChanged",function(e){(r.enabled()?t.fn.removeClass:t.fn.addClass).call(u.parent("li"),"k-state-disabled");(r.enabled()?t.fn.removeClass:t.fn.addClass).call(s,n.disabledButtonClass)}).on("checkedChanged",function(e){(r.checked()?t.fn.addClass:t.fn.removeClass).call(u.parent("li"),"k-state-selected");(r.checked()?t.fn.addClass:t.fn.removeClass).call(s,n.checkedButtonClass)})}}function s(e,r){var n,i=t(e),a=i.attr("data-command");if(a){n=r.commands[a]}if(n){i.click(function(e){if(n.enabled()){n.exec(t(this).attr("data-command-parameter"))}else{e.preventDefault()}});t(n).on("enabledChanged",function(e){(n.enabled()?t.fn.removeClass:t.fn.addClass).call(i,"disabled")}).on("checkedChanged",function(e){(n.checked()?t.fn.addClass:t.fn.removeClass).call(i,"checked")})}}var c="telerik_ReportViewer_LinkButton";t.fn[c]=function(e){return this.each(function(){if(!t.data(this,c)){t.data(this,c,new s(this,e))}})};function l(e,r){var n=t(e),i=t(r.controller),o=r.commands["goToPage"];function u(e){n.val(e)}i.on("pageNumber",function(e,t){u(t)});n.change(function(){var e=t(this).val();var r=a.tryParseInt(e);if(r!=NaN){var n=o.exec(r);u(n)}});n.keydown(function(e){if(e.which==13){t(this).change();return e.preventDefault()}});function s(e){return/^([0-9]+)$/.test(e)}n.keypress(function(e){if(a.isSpecialKey(e.keyCode)){return true}var t=n.val()+String.fromCharCode(e.charCode);return s(t)}).on("paste",function(e){})}var f="telerik_ReportViewer_PageNumberInput";t.fn[f]=function(e){return this.each(function(){if(!t.data(this,f)){t.data(this,f,new l(this,e))}})};function d(e,r){var n=t(e),i=t(r.controller);i.on("pageCount",function(e,t){n.html(t)})}var p="telerik_ReportViewer_PageCountLabel";t.fn[p]=function(e){return this.each(function(){if(!t.data(this,p)){t.data(this,p,new d(this,e))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";e.PerspectiveManager=function(e,n){var a=t(e).find(".trv-menu-small"),o={small:{documentMapVisible:false,parametersAreaVisible:false,onDocumentMapVisibleChanged:function(e,t){if(t.visible){n.setParametersAreaVisible({visible:false})}},onParameterAreaVisibleChanged:function(e,t){if(t.visible){n.setDocumentMapVisible({visible:false})}},onBeforeLoadReport:function(){n.setParametersAreaVisible({visible:false});n.setDocumentMapVisible({visible:false})},onNavigateToPage:function(){n.setParametersAreaVisible({visible:false});n.setDocumentMapVisible({visible:false})}},large:{documentMapVisible:true,parametersAreaVisible:true}},u;function s(){u=R();w(o["large"])}function c(e){var t=R();if(t!==u){var r=o[u];var n=o[t];u=t;if(e){e.call(i,r,n)}T(n)}}function l(e,t){h("onDocumentMapVisibleChanged",arguments)}function f(e,t){h("onParameterAreaVisibleChanged",arguments)}function d(){h("onBeforeLoadReport",arguments)}function p(){h("onNavigateToPage",arguments)}function v(){h("onReportLoadComplete",arguments)}function m(){c(function(e,t){w(e)})}function g(){c(null)}function h(e,t){var r=o[u];var n=r[e];if(typeof n==="function"){n.apply(r,t)}}function E(){t(r).resize(m);n.setDocumentMapVisible(l);n.setParametersAreaVisible(f);n.beforeLoadReport(d);n.navigateToPage(p);n.reportLoadComplete(v);n.cssLoaded(g)}function R(){return a.css("display")!="none"?"small":"large"}function w(e){e.documentMapVisible=P();e.parametersAreaVisible=b()}function T(e){P(e.documentMapVisible);b(e.parametersAreaVisible)}function P(){if(arguments.length==0){var e={};n.getDocumentMapState(e);return e.visible}n.setDocumentMapVisible({visible:Boolean(arguments[0])});return this}function b(){if(arguments.length==0){var e={};n.getParametersAreaState(e);return e.visible}n.setParametersAreaVisible({visible:Boolean(arguments[0])});return this}s();return{attach:E}}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);(function(e,t,r,n,i){"use strict";if(!t){alert("jQuery is not loaded. Make sure that jQuery is included.")}if(!e.GlobalSettings){e.GlobalSettings={}}var a=e.sr;if(!a){throw"Missing telerikReportViewer.sr"}var o=e.utils;if(!o){throw"Missing telerikReportViewer.utils"}if(!e.ServiceClient){throw"Missing telerikReportViewer.ServiceClient"}if(!e.ReportViewerController){throw"Missing telerikReportViewer.ReportViewerController"}if(!e.HistoryManager){throw"Missing telerikReportViewer.HistoryManager"}var u=e.binder;if(!u){throw"Missing telerikReportViewer.Binder"}if(!e.CommandSet){throw"Missing telerikReportViewer.commandSet"}if(!e.uiController){throw"Missing telerikReportViewer.uiController"}e.Events={EXPORT_BEGIN:"EXPORT_BEGIN",EXPORT_END:"EXPORT_END",PRINT_BEGIN:"PRINT_BEGIN",PRINT_END:"PRINT_END",RENDERING_BEGIN:"RENDERING_BEGIN",RENDERING_END:"RENDERING_END",PAGE_READY:"PAGE_READY",ERROR:"ERROR",UPDATE_UI:"UPDATE_UI"};var s=function(){var e={};var r={};function n(e){delete r[e]}function i(i,a){var u=r[i];if(u){return u}var s=t.Deferred();r[i]=u=s.promise();t.when(t.get(i)).done(function(r){var u={};var c=[];var l=o.rtrim(a,"\\/")+"/";r=o.replaceAll(r,"{service}/",l);r=o.replaceAll(r,"{service}",l);var f=t("<div></div>").html(r);f.find("template").each(function(e,r){var n=t(r);u[n.attr("id")]=o.trim(n.html(),"\n ")});f.find("link").each(function(e,t){c.push(o.trim(t.outerHTML,"\n "))});e[i]=u;s.resolve(u,c);n(i)}).fail(function(){s.reject();n(i)});return u}return{load:function(t,r){var n=e[t];if(n){return n}return i(t,r)}}}();function c(){var e={};return{getItem:function(t){return e[t]},setItem:function(t,r){e[t]=r},removeItem:function(t){delete e[t]}}}function l(e,i,a){var o={};function u(e){var t=i.getItem(l(e));return t!=null?t:a[e]}function s(e,t){var r="state";var n=u(r);var i=typeof n=="string"?JSON.parse(n):{};if(t.length){if(i){i[e]=t[0]}c(r,JSON.stringify(i));return o}else{return i[e]}}function c(e,t){var a=l(e);i.setItem(a,t);if(i instanceof r.Storage){var o=i.getItem(a);var u=n.createEvent("StorageEvent");u.initStorageEvent("telerikReportingStorage",false,false,a,o,t,null,i);r.dispatchEvent(u)}}function l(t){return e+"_"+t}function f(e,t){if(t.length){c(e,t[0]);return o}else{return u(e)}}function d(e,t){if(t.length){c(e,t[0]);return o}else{return parseFloat(u(e))}}function p(e,t){if(t.length){c(e,JSON.stringify(t[0]));return o}else{var r=u(e);return typeof r=="string"?JSON.parse(r):null}}o=t.extend(o,{viewMode:function(){return s("viewMode",arguments)},printMode:function(){return s("printMode",arguments)},scale:function(){return s("scale",arguments)},scaleMode:function(){return s("scaleMode",arguments)},documentMapVisible:function(){return s("documentMapVisible",arguments)},parametersAreaVisible:function(){return s("parametersAreaVisible",arguments)},history:function(){return p("history",arguments)},clientId:function(){return f("clientId",arguments)},reportSource:function(){return s("reportSource",arguments)},pageNumber:function(){return s("pageNumber",arguments)}});return o}function f(t){return{id:null,serviceUrl:null,templateUrl:o.rtrim(t,"\\/")+"/resources/templates/telerikReportViewerTemplate-html",reportSource:null,reportServer:null,authenticationToken:null,scale:1,scaleMode:e.ScaleModes.FIT_PAGE,viewMode:e.ViewModes.INTERACTIVE,persistSession:false,parameterEditors:[],disabledButtonClass:null,checkedButtonClass:null,parametersAreaVisible:true,documentMapVisible:true}}function d(n,d){if(!r.kendo){alert("Kendo is not loaded. Make sure that Kendo is included.")}var p=t(n),v={},m=d.id||"#"+p.attr("id");if(!I(d)){return}var g=d.serviceUrl;if(d.reportServer){var h=o.rtrim(d.reportServer.url,"\\/");g=h+"/api/reports"}d=jQuery.extend({},f(g),d);var E=new l(m,d.persistSession?r.sessionStorage:new c,{scale:d.scale,scaleMode:d.scaleMode,printMode:d.printMode?d.printMode:d.directPrint});var R=d.reportServer?d.reportServer.url:d.serviceUrl;var w=new e.ServiceClient({serviceUrl:R,useReportServer:d.reportServer?true:false,credentials:d.reportServer?{username:d.reportServer.username,password:d.reportServer.password}:null});var T=d.controller;if(!T){T=new e.ReportViewerController({serviceClient:w,settings:E});if(d.authenticationToken){T.setAuthenticationToken(d.authenticationToken)}}var P=new e.HistoryManager({controller:T,settings:E});var b=new e.CommandSet({controller:T,history:P});new e.uiController({controller:T,history:P,commands:b});var D={refreshReport:function(e){if(arguments.length===0){e=true}T.refreshReport(e);return D},reportSource:function(e){if(e||e===null){T.reportSource(e);T.refreshReport(false);return D}return T.reportSource()},viewMode:function(e){if(e){T.viewMode(e);return D}return T.viewMode()},printMode:function(e){if(e){T.printMode(e);return D}return T.printMode()},scale:function(e){if(e){T.scale(e);return D}e={};T.getScale(e);return e},currentPage:function(){return T.currentPageNumber()},pageCount:function(){return T.pageCount()},bind:function(e,t){_(e,t,true)},unbind:function(e,t){_(e,t,false)},commands:b};function I(e){if(!e){p.html("The report viewer configuration options are not initialized.");return false}if(e.reportServer){if(!e.reportServer.url){p.html("The report server URL is not specified.");
return false}}else{if(!e.serviceUrl){p.html("The serviceUrl is not specified.");return false}}return true}function _(e,r,n){if(typeof r=="function"){if(n){t(D).on(e,{sender:D},r)}else{t(D).off(e,r)}}else if(!r&&!n){t(D).off(e)}}function A(){var e={EXPORT_BEGIN:T.Events.EXPORT_STARTED,EXPORT_END:T.Events.EXPORT_DOCUMENT_READY,PRINT_BEGIN:T.Events.PRINT_STARTED,PRINT_END:T.Events.PRINT_DOCUMENT_READY,RENDERING_BEGIN:T.Events.BEFORE_LOAD_REPORT,RENDERING_END:T.Events.REPORT_LOAD_COMPLETE,PAGE_READY:T.Events.PAGE_READY,ERROR:T.Events.ERROR,UPDATE_UI:T.Events.UPDATE_UI},r=t(D),n=t(T);for(var i in e){var a=e[i];n.on(a,function(e,t){return function(r,n){e.trigger({type:t,data:r.data},n)}}(r,i))}}function M(){_(e.Events.EXPORT_BEGIN,d.exportBegin,true);_(e.Events.EXPORT_END,d.exportEnd,true);_(e.Events.PRINT_BEGIN,d.printBegin,true);_(e.Events.PRINT_END,d.printEnd,true);_(e.Events.RENDERING_BEGIN,d.renderingBegin,true);_(e.Events.RENDERING_END,d.renderingEnd,true);_(e.Events.PAGE_READY,d.pageReady,true);_(e.Events.ERROR,d.error,true);_(e.Events.UPDATE_UI,d.updateUi,true);t(T).on(T.Events.TOGGLE_SIDE_MENU,function(){r.setTimeout(function(){p.toggleClass("trv-side-menu-visible")},1)})}function C(){p.html(v["trv-report-viewer"]);u.bind(p,{controller:T,commands:b,templates:v},d);new e.PerspectiveManager(n,T).attach();A();M();S()}function S(){var e=E.viewMode();var t=E.printMode();var r=E.scale();var n=E.scaleMode();var i=E.documentMapVisible();var a=E.parametersAreaVisible();T.viewMode(e?e:d.viewMode);T.printMode(t?t:d.printMode);T.scale({scale:r?r:d.scale,scaleMode:n?n:d.scaleMode});T.setDocumentMapVisible({visible:i?i:d.documentMapVisible});T.setParametersAreaVisible({visible:a?a:d.parametersAreaVisible});T.printModeChanged(function(){E.printMode(T.printMode())});T.viewModeChanged(function(){E.viewMode(T.viewMode())});T.scale(function(){var e={};T.getScale(e);E.scale(e.scale);E.scaleMode(e.scaleMode)});T.setDocumentMapVisible(function(){var e={};T.getDocumentMapState(e);E.documentMapVisible(e.visible)});T.setParametersAreaVisible(function(){var e={};T.getParametersAreaState(e);E.parametersAreaVisible(e.visible)})}function y(){var e=false;C();T.reportLoadComplete(function(){if(d.documentMapVisible===false){T.setDocumentMapVisible({visible:false})}});var t=E.reportSource();if(t!==i){T.reportSource(t);var r=E.pageNumber();if(r!==i){T.navigateToPage(r)}e=true}else{if(d.viewMode){T.viewMode(d.viewMode)}if(d.reportSource){T.reportSource(d.reportSource);e=true}}if(typeof d.ready=="function"){d.ready.call(D)}if(e){T.refreshReport(false)}}function V(e){if(!e)return;var r=t("head");t.each(e,function(e,n){var i=r.find("link").map(function(e,t){return t.outerHTML}).toArray();if(-1===t.inArray(n,i)){var a=t(n);a.on("load",T.cssLoaded);r.append(a)}})}t.when(s.load(d.templateUrl,g)).done(function(e,t){v=e;V(t);r.setTimeout(y,100)}).fail(function(){p.html(o.stringFormat(a.errorLoadingTemplates,[d.templateUrl]))});return D}var p="telerik_ReportViewer";jQuery.fn[p]=function(e){if(this.selector&&!e.selector){e.selector=this.selector}return this.each(function(){if(!t.data(this,p)){t.data(this,p,new d(this,e))}})}})(window.telerikReportViewer=window.telerikReportViewer||{},jQuery,window,document);
/* DO NOT MODIFY OR DELETE THIS LINE! UPGRADE WIZARD CHECKSUM 851798E6CDA388FF8DE0EB7BEBBFDF7A */;
(function () {
    'use strict';

    kvApp.factory('SmsEmailService', ["$q", "$http", SmsEmailService]);

    /* @ngInject */
    function SmsEmailService($q, $http) {
        var service = {};

        service.sendSms = sendSms;
        service.sendEmail = sendEmail;
        service.getVietguysBrand = getVietguysBrand;

        return service;

        function sendSms(message) {
            var defer = $q.defer();

            $http.post("/api/sms-email/send-sms", message)
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error);
                });

            return defer.promise;
        }

        function sendEmail(message) {
            var defer = $q.defer();

            $http.post("/api/sms-email/send-email", message)
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error);
                });

            return defer.promise;
        }

        function getVietguysBrand() {
            var defer = $q.defer();

            $http.get("/api/sms-email/vietguys-brand")
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error);
                });

            return defer.promise;
        }
    }
})();;
(function () {
    'use strict';

    kvApp.factory('SmsEmailTemplateService', ["$q", "$http", SmsEmailTemplateService]);

    /* @ngInject */
    function SmsEmailTemplateService($q, $http) {
        var service = {};

        service.addOrUpdateTemplate = addOrUpdateTemplate;
        service.deleteTemplate = deleteTemplate;

        return service;

        function addOrUpdateTemplate(template) {
            var defer = $q.defer();

            $http.post('/api/sms-email-template/', template)
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error.ResponseStatus);
                });

            return defer.promise;
        }

        function deleteTemplate(Id) {
            var defer = $q.defer();

            $http.delete('/api/sms-email-template/' + Id)
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error.ResponseStatus);
                });

            return defer.promise;
        }
    }
})();;
(function () {
    'use strict';

    kvApp.factory('MsgBox', ["$q", "$http", "$kWindow", MsgBoxService]);

    /* @ngInject */
    function MsgBoxService($q, $http, $kWindow) {
        var service = {};

        service.confirm = confirm;
        service.alert = alert;

        return service; 

        function confirm(title, message) {
            var defer = $q.defer();

            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: title,
                    resizable: true,
                    visible: false,
                    width: '500px',
                    height: '150px',
                    top: '10px',
                    open: function () {
                        this.wrapper.addClass("k-window-poup window-error");
                    }
                },
                template: '<p class="confirm-message txt-cbk txt-ltd">' + message + '</p>\
                          <article class="clb boxBtn txtC ovh">\
                                <kendo-button class="btn-confirm kv2Btn" ng-click="ok()"><i class="fa fa-check"></i> Đồng ý</kendo-button>\
                                <kendo-button ng-click="cancel()" class="btn-cancel kv2Btn kv2BtnYellow"><i class="fa fa-ban"></i> Bỏ qua</kendo-button>\
                          </article>',
                controller: ['$scope', '$windowInstance', function ($scope, $windowInstance) {
                    $scope.ok = function () {
                        $windowInstance.close(true);
                    }

                    $scope.cancel = function () {
                        $windowInstance.close(false);
                    }
                }]
            });

            //wdInstance.wrapper.addClass("gjfidjg9oi");

            wdInstance.result.then(function (resp) {
                defer.resolve(resp);
            })

            return defer.promise;
        }

        function alert(title, message) {
            var defer = $q.defer();

            var wdInstance = $kWindow.open({
                options: {
                    modal: true,
                    title: title,
                    resizable: true,
                    visible: false,
                    width: '500px',
                    height: '150px',
                    top: '10px',
                    open: function () {
                        this.wrapper.addClass("k-window-poup window-error");
                    }
                },
                template: '<p class="confirm-message txt-cbk txt-ltd">' + message + '</p>\
                          <article class="clb boxBtn txtC ovh">\
                                <kendo-button class="btn-confirm kv2Btn" ng-click="ok()"><i class="fa fa-check"></i> Đồng ý</kendo-button>\
                          </article>',
                controller: ['$scope', '$windowInstance', function ($scope, $windowInstance) {
                    $scope.ok = function () {
                        $windowInstance.close(true);
                    }
                }]
            });

            //wdInstance.wrapper.addClass("gjfidjg9oi");

            wdInstance.result.then(function (resp) {
                defer.resolve(resp);
            })

            return defer.promise;
        }
    }

})();;
(function () {
    'use strict';

    kvApp.factory('SmsEmailSettingService', ["$q", "$http", SmsEmailSettingService]);

    /* @ngInject */
    function SmsEmailSettingService($q, $http) {
        var service = {};

        service.updateEmailSetting = updateEmailSetting;
        service.getSmsEmailSetting = getSmsEmailSetting;
        service.connectVietGuys = connectVietGuys;

        return service;

        function updateEmailSetting(setting) {
            var defer = $q.defer();

            $http.post('/api/sms-email/setting', setting)
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error.ResponseStatus);
                });

            return defer.promise;
        }

        function getSmsEmailSetting() {
            var defer = $q.defer();

            $http.get('/api/sms-email/setting')
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error.ResponseStatus);
                });

            return defer.promise;
        }

        function connectVietGuys() {
            var defer = $q.defer();

            $http.post('/api/sms-email/connect-vg')
                .success(function (resp) {
                    defer.resolve(resp);
                })
                .error(function (error) {
                    defer.reject(error);
                });

            return defer.promise;
        }
    }

})();;
/**
 * http://www.openjs.com/scripts/events/keyboard_shortcuts/
 * Version : 2.01.B
 * By Binny V A
 * License : BSD
 */
var shortcut = {
	'all_shortcuts':{},//All the shortcuts are stored in this array
	'add': function(shortcut_combination,callback,opt) {
		//Provide a set of default options
		var default_options = {
			'type':'keydown',
			'propagate':false,
			'disable_in_input':false,
			'target':document,
			'keycode':false
		}
		if(!opt) opt = default_options;
		else {
			for(var dfo in default_options) {
				if(typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];
			}
		}

		var ele = opt.target;
		if(typeof opt.target == 'string') ele = document.getElementById(opt.target);
		var ths = this;
		shortcut_combination = shortcut_combination.toLowerCase();

		//The function to be called at keypress
		var func = function(e) {
			e = e || window.event;
			
			if(opt['disable_in_input']) { //Don't enable shortcut keys in Input, Textarea fields
				var element;
				if(e.target) element=e.target;
				else if(e.srcElement) element=e.srcElement;
				if(element.nodeType==3) element=element.parentNode;

				if(element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;
			}
	
			//Find Which key is pressed
			if (e.keyCode) code = e.keyCode;
			else if (e.which) code = e.which;
			var character = String.fromCharCode(code).toLowerCase();
			
			if(code == 188) character=","; //If the user presses , when the type is onkeydown
			if(code == 190) character="."; //If the user presses , when the type is onkeydown

			var keys = shortcut_combination.split("+");
			//Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
			var kp = 0;
			
			//Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
			var shift_nums = {
				"`":"~",
				"1":"!",
				"2":"@",
				"3":"#",
				"4":"$",
				"5":"%",
				"6":"^",
				"7":"&",
				"8":"*",
				"9":"(",
				"0":")",
				"-":"_",
				"=":"+",
				";":":",
				"'":"\"",
				",":"<",
				".":">",
				"/":"?",
				"\\":"|"
			}
			//Special Keys - and their codes
			var special_keys = {
				'esc':27,
				'escape':27,
				'tab':9,
				'space':32,
				'return':13,
				'enter':13,
				'backspace':8,
	
				'scrolllock':145,
				'scroll_lock':145,
				'scroll':145,
				'capslock':20,
				'caps_lock':20,
				'caps':20,
				'numlock':144,
				'num_lock':144,
				'num':144,
				
				'pause':19,
				'break':19,
				
				'insert':45,
				'home':36,
				'delete':46,
				'end':35,
				
				'pageup':33,
				'page_up':33,
				'pu':33,
	
				'pagedown':34,
				'page_down':34,
				'pd':34,
	
				'left':37,
				'up':38,
				'right':39,
				'down':40,
	
				'f1':112,
				'f2':113,
				'f3':114,
				'f4':115,
				'f5':116,
				'f6':117,
				'f7':118,
				'f8':119,
				'f9':120,
				'f10':121,
				'f11':122,
				'f12':123
			}
	
			var modifiers = { 
				shift: { wanted:false, pressed:false},
				ctrl : { wanted:false, pressed:false},
				alt  : { wanted:false, pressed:false},
				meta : { wanted:false, pressed:false}	//Meta is Mac specific
			};
                        
			if(e.ctrlKey)	modifiers.ctrl.pressed = true;
			if(e.shiftKey)	modifiers.shift.pressed = true;
			if(e.altKey)	modifiers.alt.pressed = true;
			if(e.metaKey)   modifiers.meta.pressed = true;
                        
			for(var i=0; k=keys[i],i<keys.length; i++) {
				//Modifiers
				if(k == 'ctrl' || k == 'control') {
					kp++;
					modifiers.ctrl.wanted = true;

				} else if(k == 'shift') {
					kp++;
					modifiers.shift.wanted = true;

				} else if(k == 'alt') {
					kp++;
					modifiers.alt.wanted = true;
				} else if(k == 'meta') {
					kp++;
					modifiers.meta.wanted = true;
				} else if(k.length > 1) { //If it is a special key
					if(special_keys[k] == code) kp++;
					
				} else if(opt['keycode']) {
					if(opt['keycode'] == code) kp++;

				} else { //The special keys did not match
					if(character == k) kp++;
					else {
						if(shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase
							character = shift_nums[character]; 
							if(character == k) kp++;
						}
					}
				}
			}
			
			if(kp == keys.length && 
						modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
						modifiers.shift.pressed == modifiers.shift.wanted &&
						modifiers.alt.pressed == modifiers.alt.wanted &&
						modifiers.meta.pressed == modifiers.meta.wanted) {
				callback(e);
	
				if(!opt['propagate']) { //Stop the event
					//e.cancelBubble is supported by IE - this will kill the bubbling process.
					e.cancelBubble = true;
					e.returnValue = false;
	
					//e.stopPropagation works in Firefox.
					if (e.stopPropagation) {
						e.stopPropagation();
						e.preventDefault();
					}
					return false;
				}
			}
		}
		this.all_shortcuts[shortcut_combination] = {
			'callback':func, 
			'target':ele, 
			'event': opt['type']
		};
		//Attach the function with the event
		if(ele.addEventListener) ele.addEventListener(opt['type'], func, false);
		else if(ele.attachEvent) ele.attachEvent('on'+opt['type'], func);
		else ele['on'+opt['type']] = func;
	},

	//Remove the shortcut - just specify the shortcut and I will remove the binding
	'remove':function(shortcut_combination) {
		shortcut_combination = shortcut_combination.toLowerCase();
		var binding = this.all_shortcuts[shortcut_combination];
		delete(this.all_shortcuts[shortcut_combination])
		if(!binding) return;
		var type = binding['event'];
		var ele = binding['target'];
		var callback = binding['callback'];

		if(ele.detachEvent) ele.detachEvent('on'+type, callback);
		else if(ele.removeEventListener) ele.removeEventListener(type, callback, false);
		else ele['on'+type] = false;
	}
};
//! moment.js
//! version : 2.8.2
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b,c){switch(arguments.length){case 2:return null!=a?a:b;case 3:return null!=a?a:null!=b?b:c;default:throw new Error("Implement me")}}function c(a,b){return yb.call(a,b)}function d(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function e(a){sb.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}function f(a,b){var c=!0;return m(function(){return c&&(e(a),c=!1),b.apply(this,arguments)},b)}function g(a,b){pc[a]||(e(b),pc[a]=!0)}function h(a,b){return function(c){return p(a.call(this,c),b)}}function i(a,b){return function(c){return this.localeData().ordinal(a.call(this,c),b)}}function j(){}function k(a,b){b!==!1&&F(a),n(this,a),this._d=new Date(+a._d)}function l(a){var b=y(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=sb.localeData(),this._bubble()}function m(a,b){for(var d in b)c(b,d)&&(a[d]=b[d]);return c(b,"toString")&&(a.toString=b.toString),c(b,"valueOf")&&(a.valueOf=b.valueOf),a}function n(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=b._pf),"undefined"!=typeof b._locale&&(a._locale=b._locale),Hb.length>0)for(c in Hb)d=Hb[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function o(a){return 0>a?Math.ceil(a):Math.floor(a)}function p(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function q(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function r(a,b){var c;return b=K(b,a),a.isBefore(b)?c=q(a,b):(c=q(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function s(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(g(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=sb.duration(c,d),t(this,e,a),this}}function t(a,b,c,d){var e=b._milliseconds,f=b._days,g=b._months;d=null==d?!0:d,e&&a._d.setTime(+a._d+e*c),f&&mb(a,"Date",lb(a,"Date")+f*c),g&&kb(a,lb(a,"Month")+g*c),d&&sb.updateOffset(a,f||g)}function u(a){return"[object Array]"===Object.prototype.toString.call(a)}function v(a){return"[object Date]"===Object.prototype.toString.call(a)||a instanceof Date}function w(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&A(a[d])!==A(b[d]))&&g++;return g+f}function x(a){if(a){var b=a.toLowerCase().replace(/(.)s$/,"$1");a=ic[a]||jc[b]||b}return a}function y(a){var b,d,e={};for(d in a)c(a,d)&&(b=x(d),b&&(e[b]=a[d]));return e}function z(b){var c,d;if(0===b.indexOf("week"))c=7,d="day";else{if(0!==b.indexOf("month"))return;c=12,d="month"}sb[b]=function(e,f){var g,h,i=sb._locale[b],j=[];if("number"==typeof e&&(f=e,e=a),h=function(a){var b=sb().utc().set(d,a);return i.call(sb._locale,b,e||"")},null!=f)return h(f);for(g=0;c>g;g++)j.push(h(g));return j}}function A(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function B(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function C(a,b,c){return gb(sb([a,11,31+b-c]),b,c).week}function D(a){return E(a)?366:365}function E(a){return a%4===0&&a%100!==0||a%400===0}function F(a){var b;a._a&&-2===a._pf.overflow&&(b=a._a[Ab]<0||a._a[Ab]>11?Ab:a._a[Bb]<1||a._a[Bb]>B(a._a[zb],a._a[Ab])?Bb:a._a[Cb]<0||a._a[Cb]>23?Cb:a._a[Db]<0||a._a[Db]>59?Db:a._a[Eb]<0||a._a[Eb]>59?Eb:a._a[Fb]<0||a._a[Fb]>999?Fb:-1,a._pf._overflowDayOfYear&&(zb>b||b>Bb)&&(b=Bb),a._pf.overflow=b)}function G(a){return null==a._isValid&&(a._isValid=!isNaN(a._d.getTime())&&a._pf.overflow<0&&!a._pf.empty&&!a._pf.invalidMonth&&!a._pf.nullInput&&!a._pf.invalidFormat&&!a._pf.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===a._pf.charsLeftOver&&0===a._pf.unusedTokens.length)),a._isValid}function H(a){return a?a.toLowerCase().replace("_","-"):a}function I(a){for(var b,c,d,e,f=0;f<a.length;){for(e=H(a[f]).split("-"),b=e.length,c=H(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=J(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&w(e,c,!0)>=b-1)break;b--}f++}return null}function J(a){var b=null;if(!Gb[a]&&Ib)try{b=sb.locale(),require("./locale/"+a),sb.locale(b)}catch(c){}return Gb[a]}function K(a,b){return b._isUTC?sb(a).zone(b._offset||0):sb(a).local()}function L(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function M(a){var b,c,d=a.match(Mb);for(b=0,c=d.length;c>b;b++)d[b]=oc[d[b]]?oc[d[b]]:L(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function N(a,b){return a.isValid()?(b=O(b,a.localeData()),kc[b]||(kc[b]=M(b)),kc[b](a)):a.localeData().invalidDate()}function O(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Nb.lastIndex=0;d>=0&&Nb.test(a);)a=a.replace(Nb,c),Nb.lastIndex=0,d-=1;return a}function P(a,b){var c,d=b._strict;switch(a){case"Q":return Yb;case"DDDD":return $b;case"YYYY":case"GGGG":case"gggg":return d?_b:Qb;case"Y":case"G":case"g":return bc;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return d?ac:Rb;case"S":if(d)return Yb;case"SS":if(d)return Zb;case"SSS":if(d)return $b;case"DDD":return Pb;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Tb;case"a":case"A":return b._locale._meridiemParse;case"X":return Wb;case"Z":case"ZZ":return Ub;case"T":return Vb;case"SSSS":return Sb;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return d?Zb:Ob;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Ob;case"Do":return Xb;default:return c=new RegExp(Y(X(a.replace("\\","")),"i"))}}function Q(a){a=a||"";var b=a.match(Ub)||[],c=b[b.length-1]||[],d=(c+"").match(gc)||["-",0,0],e=+(60*d[1])+A(d[2]);return"+"===d[0]?-e:e}function R(a,b,c){var d,e=c._a;switch(a){case"Q":null!=b&&(e[Ab]=3*(A(b)-1));break;case"M":case"MM":null!=b&&(e[Ab]=A(b)-1);break;case"MMM":case"MMMM":d=c._locale.monthsParse(b),null!=d?e[Ab]=d:c._pf.invalidMonth=b;break;case"D":case"DD":null!=b&&(e[Bb]=A(b));break;case"Do":null!=b&&(e[Bb]=A(parseInt(b,10)));break;case"DDD":case"DDDD":null!=b&&(c._dayOfYear=A(b));break;case"YY":e[zb]=sb.parseTwoDigitYear(b);break;case"YYYY":case"YYYYY":case"YYYYYY":e[zb]=A(b);break;case"a":case"A":c._isPm=c._locale.isPM(b);break;case"H":case"HH":case"h":case"hh":e[Cb]=A(b);break;case"m":case"mm":e[Db]=A(b);break;case"s":case"ss":e[Eb]=A(b);break;case"S":case"SS":case"SSS":case"SSSS":e[Fb]=A(1e3*("0."+b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=Q(b);break;case"dd":case"ddd":case"dddd":d=c._locale.weekdaysParse(b),null!=d?(c._w=c._w||{},c._w.d=d):c._pf.invalidWeekday=b;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":a=a.substr(0,1);case"gggg":case"GGGG":case"GGGGG":a=a.substr(0,2),b&&(c._w=c._w||{},c._w[a]=A(b));break;case"gg":case"GG":c._w=c._w||{},c._w[a]=sb.parseTwoDigitYear(b)}}function S(a){var c,d,e,f,g,h,i;c=a._w,null!=c.GG||null!=c.W||null!=c.E?(g=1,h=4,d=b(c.GG,a._a[zb],gb(sb(),1,4).year),e=b(c.W,1),f=b(c.E,1)):(g=a._locale._week.dow,h=a._locale._week.doy,d=b(c.gg,a._a[zb],gb(sb(),g,h).year),e=b(c.w,1),null!=c.d?(f=c.d,g>f&&++e):f=null!=c.e?c.e+g:g),i=hb(d,e,f,h,g),a._a[zb]=i.year,a._dayOfYear=i.dayOfYear}function T(a){var c,d,e,f,g=[];if(!a._d){for(e=V(a),a._w&&null==a._a[Bb]&&null==a._a[Ab]&&S(a),a._dayOfYear&&(f=b(a._a[zb],e[zb]),a._dayOfYear>D(f)&&(a._pf._overflowDayOfYear=!0),d=cb(f,0,a._dayOfYear),a._a[Ab]=d.getUTCMonth(),a._a[Bb]=d.getUTCDate()),c=0;3>c&&null==a._a[c];++c)a._a[c]=g[c]=e[c];for(;7>c;c++)a._a[c]=g[c]=null==a._a[c]?2===c?1:0:a._a[c];a._d=(a._useUTC?cb:bb).apply(null,g),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()+a._tzm)}}function U(a){var b;a._d||(b=y(a._i),a._a=[b.year,b.month,b.day,b.hour,b.minute,b.second,b.millisecond],T(a))}function V(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function W(a){if(a._f===sb.ISO_8601)return void $(a);a._a=[],a._pf.empty=!0;var b,c,d,e,f,g=""+a._i,h=g.length,i=0;for(d=O(a._f,a._locale).match(Mb)||[],b=0;b<d.length;b++)e=d[b],c=(g.match(P(e,a))||[])[0],c&&(f=g.substr(0,g.indexOf(c)),f.length>0&&a._pf.unusedInput.push(f),g=g.slice(g.indexOf(c)+c.length),i+=c.length),oc[e]?(c?a._pf.empty=!1:a._pf.unusedTokens.push(e),R(e,c,a)):a._strict&&!c&&a._pf.unusedTokens.push(e);a._pf.charsLeftOver=h-i,g.length>0&&a._pf.unusedInput.push(g),a._isPm&&a._a[Cb]<12&&(a._a[Cb]+=12),a._isPm===!1&&12===a._a[Cb]&&(a._a[Cb]=0),T(a),F(a)}function X(a){return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e})}function Y(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function Z(a){var b,c,e,f,g;if(0===a._f.length)return a._pf.invalidFormat=!0,void(a._d=new Date(0/0));for(f=0;f<a._f.length;f++)g=0,b=n({},a),b._pf=d(),b._f=a._f[f],W(b),G(b)&&(g+=b._pf.charsLeftOver,g+=10*b._pf.unusedTokens.length,b._pf.score=g,(null==e||e>g)&&(e=g,c=b));m(a,c||b)}function $(a){var b,c,d=a._i,e=cc.exec(d);if(e){for(a._pf.iso=!0,b=0,c=ec.length;c>b;b++)if(ec[b][1].exec(d)){a._f=ec[b][0]+(e[6]||" ");break}for(b=0,c=fc.length;c>b;b++)if(fc[b][1].exec(d)){a._f+=fc[b][0];break}d.match(Ub)&&(a._f+="Z"),W(a)}else a._isValid=!1}function _(a){$(a),a._isValid===!1&&(delete a._isValid,sb.createFromInputFallback(a))}function ab(b){var c,d=b._i;d===a?b._d=new Date:v(d)?b._d=new Date(+d):null!==(c=Jb.exec(d))?b._d=new Date(+c[1]):"string"==typeof d?_(b):u(d)?(b._a=d.slice(0),T(b)):"object"==typeof d?U(b):"number"==typeof d?b._d=new Date(d):sb.createFromInputFallback(b)}function bb(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function cb(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function db(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function eb(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function fb(a,b,c){var d=sb.duration(a).abs(),e=xb(d.as("s")),f=xb(d.as("m")),g=xb(d.as("h")),h=xb(d.as("d")),i=xb(d.as("M")),j=xb(d.as("y")),k=e<lc.s&&["s",e]||1===f&&["m"]||f<lc.m&&["mm",f]||1===g&&["h"]||g<lc.h&&["hh",g]||1===h&&["d"]||h<lc.d&&["dd",h]||1===i&&["M"]||i<lc.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,eb.apply({},k)}function gb(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=sb(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function hb(a,b,c,d,e){var f,g,h=cb(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:D(a-1)+g}}function ib(b){var c=b._i,d=b._f;return b._locale=b._locale||sb.localeData(b._l),null===c||d===a&&""===c?sb.invalid({nullInput:!0}):("string"==typeof c&&(b._i=c=b._locale.preparse(c)),sb.isMoment(c)?new k(c,!0):(d?u(d)?Z(b):W(b):ab(b),new k(b)))}function jb(a,b){var c,d;if(1===b.length&&u(b[0])&&(b=b[0]),!b.length)return sb();for(c=b[0],d=1;d<b.length;++d)b[d][a](c)&&(c=b[d]);return c}function kb(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),B(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function lb(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function mb(a,b,c){return"Month"===b?kb(a,c):a._d["set"+(a._isUTC?"UTC":"")+b](c)}function nb(a,b){return function(c){return null!=c?(mb(this,a,c),sb.updateOffset(this,b),this):lb(this,a)}}function ob(a){return 400*a/146097}function pb(a){return 146097*a/400}function qb(a){sb.duration.fn[a]=function(){return this._data[a]}}function rb(a){"undefined"==typeof ender&&(tb=wb.moment,wb.moment=a?f("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",sb):sb)}for(var sb,tb,ub,vb="2.8.2",wb="undefined"!=typeof global?global:this,xb=Math.round,yb=Object.prototype.hasOwnProperty,zb=0,Ab=1,Bb=2,Cb=3,Db=4,Eb=5,Fb=6,Gb={},Hb=[],Ib="undefined"!=typeof module&&module.exports,Jb=/^\/?Date\((\-?\d+)/i,Kb=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Lb=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Mb=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,Nb=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,Ob=/\d\d?/,Pb=/\d{1,3}/,Qb=/\d{1,4}/,Rb=/[+\-]?\d{1,6}/,Sb=/\d+/,Tb=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ub=/Z|[\+\-]\d\d:?\d\d/gi,Vb=/T/i,Wb=/[\+\-]?\d+(\.\d{1,3})?/,Xb=/\d{1,2}/,Yb=/\d/,Zb=/\d\d/,$b=/\d{3}/,_b=/\d{4}/,ac=/[+-]?\d{6}/,bc=/[+-]?\d+/,cc=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,dc="YYYY-MM-DDTHH:mm:ssZ",ec=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],fc=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],gc=/([\+\-]|\d\d)/gi,hc=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),ic={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},jc={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},kc={},lc={s:45,m:45,h:22,d:26,M:11},mc="DDD w W M D d".split(" "),nc="M D H h m s w W".split(" "),oc={M:function(){return this.month()+1},MMM:function(a){return this.localeData().monthsShort(this,a)},MMMM:function(a){return this.localeData().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.localeData().weekdaysMin(this,a)},ddd:function(a){return this.localeData().weekdaysShort(this,a)},dddd:function(a){return this.localeData().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return p(this.year()%100,2)},YYYY:function(){return p(this.year(),4)},YYYYY:function(){return p(this.year(),5)},YYYYYY:function(){var a=this.year(),b=a>=0?"+":"-";return b+p(Math.abs(a),6)},gg:function(){return p(this.weekYear()%100,2)},gggg:function(){return p(this.weekYear(),4)},ggggg:function(){return p(this.weekYear(),5)},GG:function(){return p(this.isoWeekYear()%100,2)},GGGG:function(){return p(this.isoWeekYear(),4)},GGGGG:function(){return p(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return A(this.milliseconds()/100)},SS:function(){return p(A(this.milliseconds()/10),2)},SSS:function(){return p(this.milliseconds(),3)},SSSS:function(){return p(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+p(A(a/60),2)+":"+p(A(a)%60,2)},ZZ:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+p(A(a/60),2)+p(A(a)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},pc={},qc=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];mc.length;)ub=mc.pop(),oc[ub+"o"]=i(oc[ub],ub);for(;nc.length;)ub=nc.pop(),oc[ub+ub]=h(oc[ub],2);oc.DDDD=h(oc.DDD,3),m(j.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a){var b,c,d;for(this._monthsParse||(this._monthsParse=[]),b=0;12>b;b++)if(this._monthsParse[b]||(c=sb.utc([2e3,b]),d="^"+this.months(c,"")+"|^"+this.monthsShort(c,""),this._monthsParse[b]=new RegExp(d.replace(".",""),"i")),this._monthsParse[b].test(a))return b},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=sb([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendar[a];return"function"==typeof c?c.apply(b):c},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",preparse:function(a){return a},postformat:function(a){return a},week:function(a){return gb(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),sb=function(b,c,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._i=b,g._f=c,g._l=e,g._strict=f,g._isUTC=!1,g._pf=d(),ib(g)},sb.suppressDeprecationWarnings=!1,sb.createFromInputFallback=f("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i)}),sb.min=function(){var a=[].slice.call(arguments,0);return jb("isBefore",a)},sb.max=function(){var a=[].slice.call(arguments,0);return jb("isAfter",a)},sb.utc=function(b,c,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._useUTC=!0,g._isUTC=!0,g._l=e,g._i=b,g._f=c,g._strict=f,g._pf=d(),ib(g).utc()},sb.unix=function(a){return sb(1e3*a)},sb.duration=function(a,b){var d,e,f,g,h=a,i=null;return sb.isDuration(a)?h={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(h={},b?h[b]=a:h.milliseconds=a):(i=Kb.exec(a))?(d="-"===i[1]?-1:1,h={y:0,d:A(i[Bb])*d,h:A(i[Cb])*d,m:A(i[Db])*d,s:A(i[Eb])*d,ms:A(i[Fb])*d}):(i=Lb.exec(a))?(d="-"===i[1]?-1:1,f=function(a){var b=a&&parseFloat(a.replace(",","."));return(isNaN(b)?0:b)*d},h={y:f(i[2]),M:f(i[3]),d:f(i[4]),h:f(i[5]),m:f(i[6]),s:f(i[7]),w:f(i[8])}):"object"==typeof h&&("from"in h||"to"in h)&&(g=r(sb(h.from),sb(h.to)),h={},h.ms=g.milliseconds,h.M=g.months),e=new l(h),sb.isDuration(a)&&c(a,"_locale")&&(e._locale=a._locale),e},sb.version=vb,sb.defaultFormat=dc,sb.ISO_8601=function(){},sb.momentProperties=Hb,sb.updateOffset=function(){},sb.relativeTimeThreshold=function(b,c){return lc[b]===a?!1:c===a?lc[b]:(lc[b]=c,!0)},sb.lang=f("moment.lang is deprecated. Use moment.locale instead.",function(a,b){return sb.locale(a,b)}),sb.locale=function(a,b){var c;return a&&(c="undefined"!=typeof b?sb.defineLocale(a,b):sb.localeData(a),c&&(sb.duration._locale=sb._locale=c)),sb._locale._abbr},sb.defineLocale=function(a,b){return null!==b?(b.abbr=a,Gb[a]||(Gb[a]=new j),Gb[a].set(b),sb.locale(a),Gb[a]):(delete Gb[a],null)},sb.langData=f("moment.langData is deprecated. Use moment.localeData instead.",function(a){return sb.localeData(a)}),sb.localeData=function(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return sb._locale;if(!u(a)){if(b=J(a))return b;a=[a]}return I(a)},sb.isMoment=function(a){return a instanceof k||null!=a&&c(a,"_isAMomentObject")},sb.isDuration=function(a){return a instanceof l};for(ub=qc.length-1;ub>=0;--ub)z(qc[ub]);sb.normalizeUnits=function(a){return x(a)},sb.invalid=function(a){var b=sb.utc(0/0);return null!=a?m(b._pf,a):b._pf.userInvalidated=!0,b},sb.parseZone=function(){return sb.apply(null,arguments).parseZone()},sb.parseTwoDigitYear=function(a){return A(a)+(A(a)>68?1900:2e3)},m(sb.fn=k.prototype,{clone:function(){return sb(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var a=sb(this).utc();return 0<a.year()&&a.year()<=9999?N(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):N(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return G(this)},isDSTShifted:function(){return this._a?this.isValid()&&w(this._a,(this._isUTC?sb.utc(this._a):sb(this._a)).toArray())>0:!1},parsingFlags:function(){return m({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(a){return this.zone(0,a)},local:function(a){return this._isUTC&&(this.zone(0,a),this._isUTC=!1,a&&this.add(this._d.getTimezoneOffset(),"m")),this},format:function(a){var b=N(this,a||sb.defaultFormat);return this.localeData().postformat(b)},add:s(1,"add"),subtract:s(-1,"subtract"),diff:function(a,b,c){var d,e,f=K(a,this),g=6e4*(this.zone()-f.zone());return b=x(b),"year"===b||"month"===b?(d=432e5*(this.daysInMonth()+f.daysInMonth()),e=12*(this.year()-f.year())+(this.month()-f.month()),e+=(this-sb(this).startOf("month")-(f-sb(f).startOf("month")))/d,e-=6e4*(this.zone()-sb(this).startOf("month").zone()-(f.zone()-sb(f).startOf("month").zone()))/d,"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:o(e)},from:function(a,b){return sb.duration({to:this,from:a}).locale(this.locale()).humanize(!b)},fromNow:function(a){return this.from(sb(),a)},calendar:function(a){var b=a||sb(),c=K(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this))},isLeapYear:function(){return E(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=db(a,this.localeData()),this.add(a-b,"d")):b},month:nb("Month",!0),startOf:function(a){switch(a=x(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(a){return a=x(a),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")},isAfter:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)>+sb(a).startOf(b)},isBefore:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)<+sb(a).startOf(b)},isSame:function(a,b){return b=b||"ms",+this.clone().startOf(b)===+K(a,this).startOf(b)},min:f("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(a){return a=sb.apply(null,arguments),this>a?this:a}),max:f("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(a){return a=sb.apply(null,arguments),a>this?this:a}),zone:function(a,b){var c,d=this._offset||0;return null==a?this._isUTC?d:this._d.getTimezoneOffset():("string"==typeof a&&(a=Q(a)),Math.abs(a)<16&&(a=60*a),!this._isUTC&&b&&(c=this._d.getTimezoneOffset()),this._offset=a,this._isUTC=!0,null!=c&&this.subtract(c,"m"),d!==a&&(!b||this._changeInProgress?t(this,sb.duration(d-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,sb.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(a){return a=a?sb(a).zone():0,(this.zone()-a)%60===0},daysInMonth:function(){return B(this.year(),this.month())},dayOfYear:function(a){var b=xb((sb(this).startOf("day")-sb(this).startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")},quarter:function(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)},weekYear:function(a){var b=gb(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")},isoWeekYear:function(a){var b=gb(this,1,4).year;return null==a?b:this.add(a-b,"y")},week:function(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")},isoWeek:function(a){var b=gb(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")},weekday:function(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},isoWeeksInYear:function(){return C(this.year(),1,4)},weeksInYear:function(){var a=this.localeData()._week;return C(this.year(),a.dow,a.doy)},get:function(a){return a=x(a),this[a]()},set:function(a,b){return a=x(a),"function"==typeof this[a]&&this[a](b),this},locale:function(b){return b===a?this._locale._abbr:(this._locale=sb.localeData(b),this)},lang:f("moment().lang() is deprecated. Use moment().localeData() instead.",function(b){return b===a?this.localeData():(this._locale=sb.localeData(b),this)}),localeData:function(){return this._locale}}),sb.fn.millisecond=sb.fn.milliseconds=nb("Milliseconds",!1),sb.fn.second=sb.fn.seconds=nb("Seconds",!1),sb.fn.minute=sb.fn.minutes=nb("Minutes",!1),sb.fn.hour=sb.fn.hours=nb("Hours",!0),sb.fn.date=nb("Date",!0),sb.fn.dates=f("dates accessor is deprecated. Use date instead.",nb("Date",!0)),sb.fn.year=nb("FullYear",!0),sb.fn.years=f("years accessor is deprecated. Use year instead.",nb("FullYear",!0)),sb.fn.days=sb.fn.day,sb.fn.months=sb.fn.month,sb.fn.weeks=sb.fn.week,sb.fn.isoWeeks=sb.fn.isoWeek,sb.fn.quarters=sb.fn.quarter,sb.fn.toJSON=sb.fn.toISOString,m(sb.duration.fn=l.prototype,{_bubble:function(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;g.milliseconds=d%1e3,a=o(d/1e3),g.seconds=a%60,b=o(a/60),g.minutes=b%60,c=o(b/60),g.hours=c%24,e+=o(c/24),h=o(ob(e)),e-=o(pb(h)),f+=o(e/30),e%=30,h+=o(f/12),f%=12,g.days=e,g.months=f,g.years=h},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return o(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*A(this._months/12)},humanize:function(a){var b=fb(this,!a,this.localeData());return a&&(b=this.localeData().pastFuture(+this,b)),this.localeData().postformat(b)},add:function(a,b){var c=sb.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=sb.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=x(a),this[a.toLowerCase()+"s"]()},as:function(a){var b,c;if(a=x(a),b=this._days+this._milliseconds/864e5,"month"===a||"year"===a)return c=this._months+12*ob(b),"month"===a?c:c/12;switch(b+=pb(this._months/12),a){case"week":return b/7;case"day":return b;case"hour":return 24*b;case"minute":return 24*b*60;case"second":return 24*b*60*60;case"millisecond":return 24*b*60*60*1e3;default:throw new Error("Unknown unit "+a)}},lang:sb.fn.lang,locale:sb.fn.locale,toIsoString:f("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var a=Math.abs(this.years()),b=Math.abs(this.months()),c=Math.abs(this.days()),d=Math.abs(this.hours()),e=Math.abs(this.minutes()),f=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"},localeData:function(){return this._locale}}),sb.duration.fn.toString=sb.duration.fn.toISOString;for(ub in hc)c(hc,ub)&&qb(ub.toLowerCase());sb.duration.fn.asMilliseconds=function(){return this.as("ms")},sb.duration.fn.asSeconds=function(){return this.as("s")},sb.duration.fn.asMinutes=function(){return this.as("m")},sb.duration.fn.asHours=function(){return this.as("h")},sb.duration.fn.asDays=function(){return this.as("d")},sb.duration.fn.asWeeks=function(){return this.as("weeks")},sb.duration.fn.asMonths=function(){return this.as("M")},sb.duration.fn.asYears=function(){return this.as("y")},sb.locale("en",{ordinal:function(a){var b=a%10,c=1===A(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),Ib?module.exports=sb:"function"==typeof define&&define.amd?(define("moment",function(a,b,c){return c.config&&c.config()&&c.config().noGlobal===!0&&(wb.moment=tb),sb}),rb(!0)):rb()}).call(this);;
// moment.js language configuration
// language : vietnamese (vi)
// author : Bang Nguyen : https://github.com/bangnk

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.lang('vi', {
        months : "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort : "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        weekdays : "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM [năm] YYYY",
            LLL : "D MMMM [năm] YYYY LT",
            LLLL : "dddd, D MMMM [năm] YYYY LT",
            l : "DD/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay: "[Hôm nay lúc] LT",
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "%s tới",
            past : "%s trước",
            s : "vài giây",
            m : "một phút",
            mm : "%d phút",
            h : "một giờ",
            hh : "%d giờ",
            d : "một ngày",
            dd : "%d ngày",
            M : "một tháng",
            MM : "%d tháng",
            y : "một năm",
            yy : "%d năm"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
;
